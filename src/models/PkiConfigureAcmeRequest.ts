/**
 * Copyright (c) HashiCorp, Inc.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PkiConfigureAcmeRequest
 */
export interface PkiConfigureAcmeRequest {
    /**
     * whether the ExtKeyUsage field from a role is used, defaults to false meaning that certificate will be signed with ServerAuth.
     * @type {boolean}
     * @memberof PkiConfigureAcmeRequest
     */
    allow_role_ext_key_usage?: boolean;
    /**
     * which issuers are allowed for use with ACME; by default, this will only be the primary (default) issuer
     * @type {Array<string>}
     * @memberof PkiConfigureAcmeRequest
     */
    allowed_issuers?: Array<string>;
    /**
     * which roles are allowed for use with ACME; by default via '*', these will be all roles including sign-verbatim; when concrete role names are specified, any default_directory_policy role must be included to allow usage of the default acme directories under /pki/acme/directory and /pki/issuer/:issuer_id/acme/directory.
     * @type {Array<string>}
     * @memberof PkiConfigureAcmeRequest
     */
    allowed_roles?: Array<string>;
    /**
     * the policy to be used for non-role-qualified ACME requests; by default ACME issuance will be otherwise unrestricted, equivalent to the sign-verbatim endpoint; one may also specify a role to use as this policy, as "role:<role_name>", the specified role must be allowed by allowed_roles
     * @type {string}
     * @memberof PkiConfigureAcmeRequest
     */
    default_directory_policy?: string;
    /**
     * DNS resolver to use for domain resolution on this mount. Defaults to using the default system resolver. Must be in the format <host>:<port>, with both parts mandatory.
     * @type {string}
     * @memberof PkiConfigureAcmeRequest
     */
    dns_resolver?: string;
    /**
     * Specify the policy to use for external account binding behaviour, 'not-required', 'new-account-required' or 'always-required'
     * @type {string}
     * @memberof PkiConfigureAcmeRequest
     */
    eab_policy?: string;
    /**
     * whether ACME is enabled, defaults to false meaning that clusters will by default not get ACME support
     * @type {boolean}
     * @memberof PkiConfigureAcmeRequest
     */
    enabled?: boolean;
    /**
     * Specify the maximum TTL for ACME certificates. Role TTL values will be limited to this value
     * @type {string}
     * @memberof PkiConfigureAcmeRequest
     */
    max_ttl?: string;
}

/**
 * Check if a given object implements the PkiConfigureAcmeRequest interface.
 */
export function instanceOfPkiConfigureAcmeRequest(value: object): value is PkiConfigureAcmeRequest {
    return true;
}

export function PkiConfigureAcmeRequestFromJSON(json: any): PkiConfigureAcmeRequest {
    return PkiConfigureAcmeRequestFromJSONTyped(json, false);
}

export function PkiConfigureAcmeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PkiConfigureAcmeRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'allow_role_ext_key_usage': json['allow_role_ext_key_usage'] == null ? undefined : json['allow_role_ext_key_usage'],
        'allowed_issuers': json['allowed_issuers'] == null ? undefined : json['allowed_issuers'],
        'allowed_roles': json['allowed_roles'] == null ? undefined : json['allowed_roles'],
        'default_directory_policy': json['default_directory_policy'] == null ? undefined : json['default_directory_policy'],
        'dns_resolver': json['dns_resolver'] == null ? undefined : json['dns_resolver'],
        'eab_policy': json['eab_policy'] == null ? undefined : json['eab_policy'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'max_ttl': json['max_ttl'] == null ? undefined : json['max_ttl'],
    };
}

export function PkiConfigureAcmeRequestToJSON(json: any): PkiConfigureAcmeRequest {
    return PkiConfigureAcmeRequestToJSONTyped(json, false);
}

export function PkiConfigureAcmeRequestToJSONTyped(value?: PkiConfigureAcmeRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allow_role_ext_key_usage': value['allow_role_ext_key_usage'],
        'allowed_issuers': value['allowed_issuers'],
        'allowed_roles': value['allowed_roles'],
        'default_directory_policy': value['default_directory_policy'],
        'dns_resolver': value['dns_resolver'],
        'eab_policy': value['eab_policy'],
        'enabled': value['enabled'],
        'max_ttl': value['max_ttl'],
    };
}

