/**
 * Copyright (c) HashiCorp, Inc.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransformWriteTransformationRequest
 */
export interface TransformWriteTransformationRequest {
    /**
     * The set of roles allowed to perform this transformation.
     * @type {Array<string>}
     * @memberof TransformWriteTransformationRequest
     */
    allowed_roles?: Array<string>;
    /**
     * Specifies whether to use convergent tokenization, which produces consistent tokens given consistent plaintext and expiration inputs.
     * @type {boolean}
     * @memberof TransformWriteTransformationRequest
     */
    convergent?: boolean;
    /**
     * If false, deletion of this transform is prevented.
     * @type {boolean}
     * @memberof TransformWriteTransformationRequest
     */
    deletion_allowed?: boolean;
    /**
     * Specifies the mapping mode for stored tokenization values. 'default', the default is strongly recommended for high security. 'exportable' allows for all plaintexts to be decoded simultaneously in an emergency.
     * @type {string}
     * @memberof TransformWriteTransformationRequest
     */
    mapping_mode?: string;
    /**
     * The character used to replace data when in masking mode
     * @type {string}
     * @memberof TransformWriteTransformationRequest
     */
    masking_character?: string;
    /**
     * The store or stores which will contain tokenized state.
     * @type {Array<string>}
     * @memberof TransformWriteTransformationRequest
     */
    stores?: Array<string>;
    /**
     * The name of the template to use.
     * @type {string}
     * @memberof TransformWriteTransformationRequest
     */
    template?: string;
    /**
     * The source of where the tweak value comes from. Only valid when in FPE mode.
     * @type {string}
     * @memberof TransformWriteTransformationRequest
     */
    tweak_source?: string;
    /**
     * The type of transformation to perform.
     * @type {string}
     * @memberof TransformWriteTransformationRequest
     */
    type?: string;
}

/**
 * Check if a given object implements the TransformWriteTransformationRequest interface.
 */
export function instanceOfTransformWriteTransformationRequest(value: object): value is TransformWriteTransformationRequest {
    return true;
}

export function TransformWriteTransformationRequestFromJSON(json: any): TransformWriteTransformationRequest {
    return TransformWriteTransformationRequestFromJSONTyped(json, false);
}

export function TransformWriteTransformationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransformWriteTransformationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'allowed_roles': json['allowed_roles'] == null ? undefined : json['allowed_roles'],
        'convergent': json['convergent'] == null ? undefined : json['convergent'],
        'deletion_allowed': json['deletion_allowed'] == null ? undefined : json['deletion_allowed'],
        'mapping_mode': json['mapping_mode'] == null ? undefined : json['mapping_mode'],
        'masking_character': json['masking_character'] == null ? undefined : json['masking_character'],
        'stores': json['stores'] == null ? undefined : json['stores'],
        'template': json['template'] == null ? undefined : json['template'],
        'tweak_source': json['tweak_source'] == null ? undefined : json['tweak_source'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function TransformWriteTransformationRequestToJSON(json: any): TransformWriteTransformationRequest {
    return TransformWriteTransformationRequestToJSONTyped(json, false);
}

export function TransformWriteTransformationRequestToJSONTyped(value?: TransformWriteTransformationRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allowed_roles': value['allowed_roles'],
        'convergent': value['convergent'],
        'deletion_allowed': value['deletion_allowed'],
        'mapping_mode': value['mapping_mode'],
        'masking_character': value['masking_character'],
        'stores': value['stores'],
        'template': value['template'],
        'tweak_source': value['tweak_source'],
        'type': value['type'],
    };
}

