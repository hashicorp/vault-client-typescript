/**
 * Copyright (c) HashiCorp, Inc.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DatabaseConfigureConnectionRequest
 */
export interface DatabaseConfigureConnectionRequest {
    /**
     * Comma separated string or array of the role names allowed to get creds from this database connection. If empty no roles are allowed. If "*" all roles are allowed.
     * @type {Array<string>}
     * @memberof DatabaseConfigureConnectionRequest
     */
    allowed_roles?: Array<string>;
    /**
     * If set to true, will deregister all registered rotation jobs from the RotationManager for the plugin.
     * @type {boolean}
     * @memberof DatabaseConfigureConnectionRequest
     */
    disable_automated_rotation?: boolean;
    /**
     * Password policy to use when generating passwords.
     * @type {string}
     * @memberof DatabaseConfigureConnectionRequest
     */
    password_policy?: string;
    /**
     * The name of a builtin or previously registered plugin known to vault. This endpoint will create an instance of that plugin type.
     * @type {string}
     * @memberof DatabaseConfigureConnectionRequest
     */
    plugin_name?: string;
    /**
     * The version of the plugin to use.
     * @type {string}
     * @memberof DatabaseConfigureConnectionRequest
     */
    plugin_version?: string;
    /**
     * Specifies the database statements to be executed to rotate the root user's credentials. See the plugin's API page for more information on support and formatting for this parameter.
     * @type {Array<string>}
     * @memberof DatabaseConfigureConnectionRequest
     */
    root_rotation_statements?: Array<string>;
    /**
     * TTL for automatic credential rotation of the given username. Mutually exclusive with rotation_schedule
     * @type {string}
     * @memberof DatabaseConfigureConnectionRequest
     */
    rotation_period?: string;
    /**
     * CRON-style string that will define the schedule on which rotations should occur. Mutually exclusive with rotation_period
     * @type {string}
     * @memberof DatabaseConfigureConnectionRequest
     */
    rotation_schedule?: string;
    /**
     * Specifies the amount of time in which the rotation is allowed to occur starting from a given rotation_schedule
     * @type {string}
     * @memberof DatabaseConfigureConnectionRequest
     */
    rotation_window?: string;
    /**
     * Enterprise only. If true, the static roles associated with this connection will not have their passwords rotated on creation of the role. Defaults to false.
     * @type {boolean}
     * @memberof DatabaseConfigureConnectionRequest
     */
    skip_static_role_import_rotation?: boolean;
    /**
     * If true, the connection details are verified by actually connecting to the database. Defaults to true.
     * @type {boolean}
     * @memberof DatabaseConfigureConnectionRequest
     */
    verify_connection?: boolean;
}

/**
 * Check if a given object implements the DatabaseConfigureConnectionRequest interface.
 */
export function instanceOfDatabaseConfigureConnectionRequest(value: object): value is DatabaseConfigureConnectionRequest {
    return true;
}

export function DatabaseConfigureConnectionRequestFromJSON(json: any): DatabaseConfigureConnectionRequest {
    return DatabaseConfigureConnectionRequestFromJSONTyped(json, false);
}

export function DatabaseConfigureConnectionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatabaseConfigureConnectionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'allowed_roles': json['allowed_roles'] == null ? undefined : json['allowed_roles'],
        'disable_automated_rotation': json['disable_automated_rotation'] == null ? undefined : json['disable_automated_rotation'],
        'password_policy': json['password_policy'] == null ? undefined : json['password_policy'],
        'plugin_name': json['plugin_name'] == null ? undefined : json['plugin_name'],
        'plugin_version': json['plugin_version'] == null ? undefined : json['plugin_version'],
        'root_rotation_statements': json['root_rotation_statements'] == null ? undefined : json['root_rotation_statements'],
        'rotation_period': json['rotation_period'] == null ? undefined : json['rotation_period'],
        'rotation_schedule': json['rotation_schedule'] == null ? undefined : json['rotation_schedule'],
        'rotation_window': json['rotation_window'] == null ? undefined : json['rotation_window'],
        'skip_static_role_import_rotation': json['skip_static_role_import_rotation'] == null ? undefined : json['skip_static_role_import_rotation'],
        'verify_connection': json['verify_connection'] == null ? undefined : json['verify_connection'],
    };
}

export function DatabaseConfigureConnectionRequestToJSON(json: any): DatabaseConfigureConnectionRequest {
    return DatabaseConfigureConnectionRequestToJSONTyped(json, false);
}

export function DatabaseConfigureConnectionRequestToJSONTyped(value?: DatabaseConfigureConnectionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allowed_roles': value['allowed_roles'],
        'disable_automated_rotation': value['disable_automated_rotation'],
        'password_policy': value['password_policy'],
        'plugin_name': value['plugin_name'],
        'plugin_version': value['plugin_version'],
        'root_rotation_statements': value['root_rotation_statements'],
        'rotation_period': value['rotation_period'],
        'rotation_schedule': value['rotation_schedule'],
        'rotation_window': value['rotation_window'],
        'skip_static_role_import_rotation': value['skip_static_role_import_rotation'],
        'verify_connection': value['verify_connection'],
    };
}

