/**
 * Copyright (c) HashiCorp, Inc.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SpiffeWriteRoleNameRequest
 */
export interface SpiffeWriteRoleNameRequest {
    /**
     * A PEM-encoded CA certificate of an intermediate or root CA to validate the incoming certificate. Only one of ca_cert or ca_cert_url+ca_cert_url_trust_ca may be specified on a role.
     * @type {string}
     * @memberof SpiffeWriteRoleNameRequest
     */
    ca_cert?: string;
    /**
     * A URL from which to fetch the CA certificate for cert validation. This URL must be HTTPS, and must be signed by ca_cert_url_trust_ca.
     * @type {string}
     * @memberof SpiffeWriteRoleNameRequest
     */
    ca_cert_url?: string;
    /**
     * A CA certificate used to validate the server reached by ca_cert_url.
     * @type {string}
     * @memberof SpiffeWriteRoleNameRequest
     */
    ca_cert_url_trust_ca?: string;
    /**
     * The display name to use for clients using this role
     * @type {string}
     * @memberof SpiffeWriteRoleNameRequest
     */
    display_name?: string;
    /**
     * The metadata to be tied to generated tokens. This should be a list or map containing the metadata in key value pairs
     * @type {object}
     * @memberof SpiffeWriteRoleNameRequest
     */
    token_auth_metadata?: object;
    /**
     * Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.
     * @type {Array<string>}
     * @memberof SpiffeWriteRoleNameRequest
     */
    token_bound_cidrs?: Array<string>;
    /**
     * If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.
     * @type {string}
     * @memberof SpiffeWriteRoleNameRequest
     */
    token_explicit_max_ttl?: string;
    /**
     * The maximum lifetime of the generated token
     * @type {string}
     * @memberof SpiffeWriteRoleNameRequest
     */
    token_max_ttl?: string;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     * @type {boolean}
     * @memberof SpiffeWriteRoleNameRequest
     */
    token_no_default_policy?: boolean;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     * @type {number}
     * @memberof SpiffeWriteRoleNameRequest
     */
    token_num_uses?: number;
    /**
     * If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. "24h").
     * @type {string}
     * @memberof SpiffeWriteRoleNameRequest
     */
    token_period?: string;
    /**
     * Comma-separated list of policies
     * @type {Array<string>}
     * @memberof SpiffeWriteRoleNameRequest
     */
    token_policies?: Array<string>;
    /**
     * The initial ttl of the token to generate
     * @type {string}
     * @memberof SpiffeWriteRoleNameRequest
     */
    token_ttl?: string;
    /**
     * The type of token to generate, service or batch
     * @type {string}
     * @memberof SpiffeWriteRoleNameRequest
     */
    token_type?: string;
    /**
     * A comma separated list of regexps that match an incoming workload id to this role.
     * @type {Array<string>}
     * @memberof SpiffeWriteRoleNameRequest
     */
    workload_id_patterns?: Array<string>;
}

/**
 * Check if a given object implements the SpiffeWriteRoleNameRequest interface.
 */
export function instanceOfSpiffeWriteRoleNameRequest(value: object): value is SpiffeWriteRoleNameRequest {
    return true;
}

export function SpiffeWriteRoleNameRequestFromJSON(json: any): SpiffeWriteRoleNameRequest {
    return SpiffeWriteRoleNameRequestFromJSONTyped(json, false);
}

export function SpiffeWriteRoleNameRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SpiffeWriteRoleNameRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'ca_cert': json['ca_cert'] == null ? undefined : json['ca_cert'],
        'ca_cert_url': json['ca_cert_url'] == null ? undefined : json['ca_cert_url'],
        'ca_cert_url_trust_ca': json['ca_cert_url_trust_ca'] == null ? undefined : json['ca_cert_url_trust_ca'],
        'display_name': json['display_name'] == null ? undefined : json['display_name'],
        'token_auth_metadata': json['token_auth_metadata'] == null ? undefined : json['token_auth_metadata'],
        'token_bound_cidrs': json['token_bound_cidrs'] == null ? undefined : json['token_bound_cidrs'],
        'token_explicit_max_ttl': json['token_explicit_max_ttl'] == null ? undefined : json['token_explicit_max_ttl'],
        'token_max_ttl': json['token_max_ttl'] == null ? undefined : json['token_max_ttl'],
        'token_no_default_policy': json['token_no_default_policy'] == null ? undefined : json['token_no_default_policy'],
        'token_num_uses': json['token_num_uses'] == null ? undefined : json['token_num_uses'],
        'token_period': json['token_period'] == null ? undefined : json['token_period'],
        'token_policies': json['token_policies'] == null ? undefined : json['token_policies'],
        'token_ttl': json['token_ttl'] == null ? undefined : json['token_ttl'],
        'token_type': json['token_type'] == null ? undefined : json['token_type'],
        'workload_id_patterns': json['workload_id_patterns'] == null ? undefined : json['workload_id_patterns'],
    };
}

export function SpiffeWriteRoleNameRequestToJSON(json: any): SpiffeWriteRoleNameRequest {
    return SpiffeWriteRoleNameRequestToJSONTyped(json, false);
}

export function SpiffeWriteRoleNameRequestToJSONTyped(value?: SpiffeWriteRoleNameRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'ca_cert': value['ca_cert'],
        'ca_cert_url': value['ca_cert_url'],
        'ca_cert_url_trust_ca': value['ca_cert_url_trust_ca'],
        'display_name': value['display_name'],
        'token_auth_metadata': value['token_auth_metadata'],
        'token_bound_cidrs': value['token_bound_cidrs'],
        'token_explicit_max_ttl': value['token_explicit_max_ttl'],
        'token_max_ttl': value['token_max_ttl'],
        'token_no_default_policy': value['token_no_default_policy'],
        'token_num_uses': value['token_num_uses'],
        'token_period': value['token_period'],
        'token_policies': value['token_policies'],
        'token_ttl': value['token_ttl'],
        'token_type': value['token_type'],
        'workload_id_patterns': value['workload_id_patterns'],
    };
}

