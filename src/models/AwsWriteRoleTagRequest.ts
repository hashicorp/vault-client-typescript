/**
 * Copyright (c) HashiCorp, Inc.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AwsWriteRoleTagRequest
 */
export interface AwsWriteRoleTagRequest {
    /**
     * If set, allows migration of the underlying instance where the client resides. This keys off of pendingTime in the metadata document, so essentially, this disables the client nonce check whenever the instance is migrated to a new host and pendingTime is newer than the previously-remembered time. Use with caution.
     * @type {boolean}
     * @memberof AwsWriteRoleTagRequest
     */
    allow_instance_migration?: boolean;
    /**
     * If set, only allows a single token to be granted per instance ID. In order to perform a fresh login, the entry in access list for the instance ID needs to be cleared using the 'auth/aws-ec2/identity-accesslist/<instance_id>' endpoint.
     * @type {boolean}
     * @memberof AwsWriteRoleTagRequest
     */
    disallow_reauthentication?: boolean;
    /**
     * Instance ID for which this tag is intended for. If set, the created tag can only be used by the instance with the given ID.
     * @type {string}
     * @memberof AwsWriteRoleTagRequest
     */
    instance_id?: string;
    /**
     * If set, specifies the maximum allowed token lifetime.
     * @type {string}
     * @memberof AwsWriteRoleTagRequest
     */
    max_ttl?: string;
    /**
     * Policies to be associated with the tag. If set, must be a subset of the role's policies. If set, but set to an empty value, only the 'default' policy will be given to issued tokens.
     * @type {Array<string>}
     * @memberof AwsWriteRoleTagRequest
     */
    policies?: Array<string>;
}

/**
 * Check if a given object implements the AwsWriteRoleTagRequest interface.
 */
export function instanceOfAwsWriteRoleTagRequest(value: object): value is AwsWriteRoleTagRequest {
    return true;
}

export function AwsWriteRoleTagRequestFromJSON(json: any): AwsWriteRoleTagRequest {
    return AwsWriteRoleTagRequestFromJSONTyped(json, false);
}

export function AwsWriteRoleTagRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AwsWriteRoleTagRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'allow_instance_migration': json['allow_instance_migration'] == null ? undefined : json['allow_instance_migration'],
        'disallow_reauthentication': json['disallow_reauthentication'] == null ? undefined : json['disallow_reauthentication'],
        'instance_id': json['instance_id'] == null ? undefined : json['instance_id'],
        'max_ttl': json['max_ttl'] == null ? undefined : json['max_ttl'],
        'policies': json['policies'] == null ? undefined : json['policies'],
    };
}

export function AwsWriteRoleTagRequestToJSON(json: any): AwsWriteRoleTagRequest {
    return AwsWriteRoleTagRequestToJSONTyped(json, false);
}

export function AwsWriteRoleTagRequestToJSONTyped(value?: AwsWriteRoleTagRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allow_instance_migration': value['allow_instance_migration'],
        'disallow_reauthentication': value['disallow_reauthentication'],
        'instance_id': value['instance_id'],
        'max_ttl': value['max_ttl'],
        'policies': value['policies'],
    };
}

