/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PkiCrossSignIntermediateRequest
 */
export interface PkiCrossSignIntermediateRequest {
    /**
     * Whether to add a Basic Constraints extension with CA: true. Only needed as a workaround in some compatibility scenarios with Active Directory Certificate Services.
     * @type {boolean}
     * @memberof PkiCrossSignIntermediateRequest
     */
    add_basic_constraints?: boolean;
    /**
     * The requested Subject Alternative Names, if any, in a comma-delimited list. May contain both DNS names and email addresses.
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    alt_names?: string;
    /**
     * The requested common name; if you want more than one, specify the alternative names in the alt_names map. If not specified when signing, the common name will be taken from the CSR; other names must still be specified in alt_names or ip_sans.
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    common_name?: string;
    /**
     * If set, Country will be set to this value.
     * @type {Array<string>}
     * @memberof PkiCrossSignIntermediateRequest
     */
    country?: Array<string>;
    /**
     * If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).
     * @type {boolean}
     * @memberof PkiCrossSignIntermediateRequest
     */
    exclude_cn_from_sans?: boolean;
    /**
     * Must be "internal", "exported" or "kms". If set to "exported", the generated private key will be returned. This is your *only* chance to retrieve the private key!
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    exported?: PkiCrossSignIntermediateRequestExportedEnum;
    /**
     * Format for returned data. Can be "pem", "der", or "pem_bundle". If "pem_bundle", any private key and issuing cert will be appended to the certificate pem. If "der", the value will be base64 encoded. Defaults to "pem".
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    format?: PkiCrossSignIntermediateRequestFormatEnum;
    /**
     * The requested IP SANs, if any, in a comma-delimited list
     * @type {Array<string>}
     * @memberof PkiCrossSignIntermediateRequest
     */
    ip_sans?: Array<string>;
    /**
     * The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, 4096 or 8192; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.
     * @type {number}
     * @memberof PkiCrossSignIntermediateRequest
     */
    key_bits?: number;
    /**
     * Provide a name to the generated or existing key, the name must be unique across all keys and not be the reserved value 'default'
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    key_name?: string;
    /**
     * Reference to a existing key; either "default" for the configured default key, an identifier or the name assigned to the key.
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    key_ref?: string;
    /**
     * The type of key to use; defaults to RSA. "rsa" "ec" and "ed25519" are the only valid values.
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    key_type?: PkiCrossSignIntermediateRequestKeyTypeEnum;
    /**
     * Specifies key_usage to encode in the certificate signing request. This is a comma-separated string or list of key usages (not extended key usages). Valid values can be found at https://golang.org/pkg/crypto/x509/#KeyUsage -- simply drop the "KeyUsage" part of the name. If not set, key usage will not appear on the CSR.
     * @type {Array<string>}
     * @memberof PkiCrossSignIntermediateRequest
     */
    key_usage?: Array<string>;
    /**
     * If set, Locality will be set to this value.
     * @type {Array<string>}
     * @memberof PkiCrossSignIntermediateRequest
     */
    locality?: Array<string>;
    /**
     * The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_name is required. Ignored for other types.
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    managed_key_id?: string;
    /**
     * The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_id is required. Ignored for other types.
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    managed_key_name?: string;
    /**
     * Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    not_after?: string;
    /**
     * The duration before now which the certificate needs to be backdated by.
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    not_before_duration?: string;
    /**
     * If set, O (Organization) will be set to this value.
     * @type {Array<string>}
     * @memberof PkiCrossSignIntermediateRequest
     */
    organization?: Array<string>;
    /**
     * Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.
     * @type {Array<string>}
     * @memberof PkiCrossSignIntermediateRequest
     */
    other_sans?: Array<string>;
    /**
     * If set, OU (OrganizationalUnit) will be set to this value.
     * @type {Array<string>}
     * @memberof PkiCrossSignIntermediateRequest
     */
    ou?: Array<string>;
    /**
     * If set, Postal Code will be set to this value.
     * @type {Array<string>}
     * @memberof PkiCrossSignIntermediateRequest
     */
    postal_code?: Array<string>;
    /**
     * Format for the returned private key. Generally the default will be controlled by the "format" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to "der".
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    private_key_format?: PkiCrossSignIntermediateRequestPrivateKeyFormatEnum;
    /**
     * If set, Province will be set to this value.
     * @type {Array<string>}
     * @memberof PkiCrossSignIntermediateRequest
     */
    province?: Array<string>;
    /**
     * The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field.
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    serial_number?: string;
    /**
     * The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).
     * @type {number}
     * @memberof PkiCrossSignIntermediateRequest
     */
    signature_bits?: number;
    /**
     * If set, Street Address will be set to this value.
     * @type {Array<string>}
     * @memberof PkiCrossSignIntermediateRequest
     */
    street_address?: Array<string>;
    /**
     * The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA.
     * @type {string}
     * @memberof PkiCrossSignIntermediateRequest
     */
    ttl?: string;
    /**
     * The requested URI SANs, if any, in a comma-delimited list.
     * @type {Array<string>}
     * @memberof PkiCrossSignIntermediateRequest
     */
    uri_sans?: Array<string>;
}

/**
* @export
* @enum {string}
*/
export enum PkiCrossSignIntermediateRequestExportedEnum {
    INTERNAL = 'internal',
    EXTERNAL = 'external',
    KMS = 'kms'
}
/**
* @export
* @enum {string}
*/
export enum PkiCrossSignIntermediateRequestFormatEnum {
    PEM = 'pem',
    DER = 'der',
    PEM_BUNDLE = 'pem_bundle'
}
/**
* @export
* @enum {string}
*/
export enum PkiCrossSignIntermediateRequestKeyTypeEnum {
    RSA = 'rsa',
    EC = 'ec',
    ED25519 = 'ed25519'
}
/**
* @export
* @enum {string}
*/
export enum PkiCrossSignIntermediateRequestPrivateKeyFormatEnum {
    EMPTY = '',
    DER = 'der',
    PEM = 'pem',
    PKCS8 = 'pkcs8'
}


/**
 * Check if a given object implements the PkiCrossSignIntermediateRequest interface.
 */
export function instanceOfPkiCrossSignIntermediateRequest(value: object): value is PkiCrossSignIntermediateRequest {
    return true;
}

export function PkiCrossSignIntermediateRequestFromJSON(json: any): PkiCrossSignIntermediateRequest {
    return PkiCrossSignIntermediateRequestFromJSONTyped(json, false);
}

export function PkiCrossSignIntermediateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PkiCrossSignIntermediateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'add_basic_constraints': json['add_basic_constraints'] == null ? undefined : json['add_basic_constraints'],
        'alt_names': json['alt_names'] == null ? undefined : json['alt_names'],
        'common_name': json['common_name'] == null ? undefined : json['common_name'],
        'country': json['country'] == null ? undefined : json['country'],
        'exclude_cn_from_sans': json['exclude_cn_from_sans'] == null ? undefined : json['exclude_cn_from_sans'],
        'exported': json['exported'] == null ? undefined : json['exported'],
        'format': json['format'] == null ? undefined : json['format'],
        'ip_sans': json['ip_sans'] == null ? undefined : json['ip_sans'],
        'key_bits': json['key_bits'] == null ? undefined : json['key_bits'],
        'key_name': json['key_name'] == null ? undefined : json['key_name'],
        'key_ref': json['key_ref'] == null ? undefined : json['key_ref'],
        'key_type': json['key_type'] == null ? undefined : json['key_type'],
        'key_usage': json['key_usage'] == null ? undefined : json['key_usage'],
        'locality': json['locality'] == null ? undefined : json['locality'],
        'managed_key_id': json['managed_key_id'] == null ? undefined : json['managed_key_id'],
        'managed_key_name': json['managed_key_name'] == null ? undefined : json['managed_key_name'],
        'not_after': json['not_after'] == null ? undefined : json['not_after'],
        'not_before_duration': json['not_before_duration'] == null ? undefined : json['not_before_duration'],
        'organization': json['organization'] == null ? undefined : json['organization'],
        'other_sans': json['other_sans'] == null ? undefined : json['other_sans'],
        'ou': json['ou'] == null ? undefined : json['ou'],
        'postal_code': json['postal_code'] == null ? undefined : json['postal_code'],
        'private_key_format': json['private_key_format'] == null ? undefined : json['private_key_format'],
        'province': json['province'] == null ? undefined : json['province'],
        'serial_number': json['serial_number'] == null ? undefined : json['serial_number'],
        'signature_bits': json['signature_bits'] == null ? undefined : json['signature_bits'],
        'street_address': json['street_address'] == null ? undefined : json['street_address'],
        'ttl': json['ttl'] == null ? undefined : json['ttl'],
        'uri_sans': json['uri_sans'] == null ? undefined : json['uri_sans'],
    };
}

export function PkiCrossSignIntermediateRequestToJSON(json: any): PkiCrossSignIntermediateRequest {
    return PkiCrossSignIntermediateRequestToJSONTyped(json, false);
}

export function PkiCrossSignIntermediateRequestToJSONTyped(value?: PkiCrossSignIntermediateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'add_basic_constraints': value['add_basic_constraints'],
        'alt_names': value['alt_names'],
        'common_name': value['common_name'],
        'country': value['country'],
        'exclude_cn_from_sans': value['exclude_cn_from_sans'],
        'exported': value['exported'],
        'format': value['format'],
        'ip_sans': value['ip_sans'],
        'key_bits': value['key_bits'],
        'key_name': value['key_name'],
        'key_ref': value['key_ref'],
        'key_type': value['key_type'],
        'key_usage': value['key_usage'],
        'locality': value['locality'],
        'managed_key_id': value['managed_key_id'],
        'managed_key_name': value['managed_key_name'],
        'not_after': value['not_after'],
        'not_before_duration': value['not_before_duration'],
        'organization': value['organization'],
        'other_sans': value['other_sans'],
        'ou': value['ou'],
        'postal_code': value['postal_code'],
        'private_key_format': value['private_key_format'],
        'province': value['province'],
        'serial_number': value['serial_number'],
        'signature_bits': value['signature_bits'],
        'street_address': value['street_address'],
        'ttl': value['ttl'],
        'uri_sans': value['uri_sans'],
    };
}

