/**
 * Copyright (c) HashiCorp, Inc.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PkiRootSignIntermediateRequest
 */
export interface PkiRootSignIntermediateRequest {
    /**
     * The requested Subject Alternative Names, if any, in a comma-delimited list. May contain both DNS names and email addresses.
     * @type {string}
     * @memberof PkiRootSignIntermediateRequest
     */
    alt_names?: string;
    /**
     * The requested common name; if you want more than one, specify the alternative names in the alt_names map. If not specified when signing, the common name will be taken from the CSR; other names must still be specified in alt_names or ip_sans.
     * @type {string}
     * @memberof PkiRootSignIntermediateRequest
     */
    common_name?: string;
    /**
     * If set, Country will be set to this value.
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    country?: Array<string>;
    /**
     * PEM-format CSR to be signed.
     * @type {string}
     * @memberof PkiRootSignIntermediateRequest
     */
    csr?: string;
    /**
     * Do not truncate the NotAfter field, use the issuer's configured leaf_not_after_behavior
     * @type {boolean}
     * @memberof PkiRootSignIntermediateRequest
     */
    enforce_leaf_not_after_behavior?: boolean;
    /**
     * If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).
     * @type {boolean}
     * @memberof PkiRootSignIntermediateRequest
     */
    exclude_cn_from_sans?: boolean;
    /**
     * Domains for which this certificate is not allowed to sign or issue child certificates (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    excluded_dns_domains?: Array<string>;
    /**
     * Email addresses for which this certificate is not allowed to sign or issue child certificates (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    excluded_email_addresses?: Array<string>;
    /**
     * IP ranges for which this certificate is not allowed to sign or issue child certificates (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10). Ranges must be specified in the notation of IP address and prefix length, like "192.0.2.0/24" or "2001:db8::/32", as defined in RFC 4632 and RFC 4291.
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    excluded_ip_ranges?: Array<string>;
    /**
     * URI domains for which this certificate is not allowed to sign or issue child certificates (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    excluded_uri_domains?: Array<string>;
    /**
     * Format for returned data. Can be "pem", "der", or "pem_bundle". If "pem_bundle", any private key and issuing cert will be appended to the certificate pem. If "der", the value will be base64 encoded. Defaults to "pem".
     * @type {string}
     * @memberof PkiRootSignIntermediateRequest
     */
    format?: PkiRootSignIntermediateRequestFormatEnum;
    /**
     * The requested IP SANs, if any, in a comma-delimited list
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    ip_sans?: Array<string>;
    /**
     * Provide a name to the generated or existing issuer, the name must be unique across all issuers and not be the reserved value 'default'
     * @type {string}
     * @memberof PkiRootSignIntermediateRequest
     */
    issuer_name?: string;
    /**
     * Reference to a existing issuer; either "default" for the configured default issuer, an identifier or the name assigned to the issuer.
     * @type {string}
     * @memberof PkiRootSignIntermediateRequest
     */
    issuer_ref?: string;
    /**
     * This list of key usages (not extended key usages) will be added to the existing set of key usages, CRL,CertSign, on the generated certificate. Valid values can be found at https://golang.org/pkg/crypto/x509/#KeyUsage -- simply drop the "KeyUsage" part of the name. To use the issuer for CMPv2, DigitalSignature must be set.
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    key_usage?: Array<string>;
    /**
     * If set, Locality will be set to this value.
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    locality?: Array<string>;
    /**
     * The maximum allowable path length
     * @type {number}
     * @memberof PkiRootSignIntermediateRequest
     */
    max_path_length?: number;
    /**
     * Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
     * @type {string}
     * @memberof PkiRootSignIntermediateRequest
     */
    not_after?: string;
    /**
     * The duration before now which the certificate needs to be backdated by.
     * @type {string}
     * @memberof PkiRootSignIntermediateRequest
     */
    not_before_duration?: string;
    /**
     * If set, O (Organization) will be set to this value.
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    organization?: Array<string>;
    /**
     * Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    other_sans?: Array<string>;
    /**
     * If set, OU (OrganizationalUnit) will be set to this value.
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    ou?: Array<string>;
    /**
     * Domains for which this certificate is allowed to sign or issue child certificates. If set, all DNS names (subject and alt) on child certs must be exact matches or subsets of the given domains (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    permitted_dns_domains?: Array<string>;
    /**
     * Email addresses for which this certificate is allowed to sign or issue child certificates (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    permitted_email_addresses?: Array<string>;
    /**
     * IP ranges for which this certificate is allowed to sign or issue child certificates (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10). Ranges must be specified in the notation of IP address and prefix length, like "192.0.2.0/24" or "2001:db8::/32", as defined in RFC 4632 and RFC 4291.
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    permitted_ip_ranges?: Array<string>;
    /**
     * URI domains for which this certificate is allowed to sign or issue child certificates (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    permitted_uri_domains?: Array<string>;
    /**
     * If set, Postal Code will be set to this value.
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    postal_code?: Array<string>;
    /**
     * Format for the returned private key. Generally the default will be controlled by the "format" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to "der".
     * @type {string}
     * @memberof PkiRootSignIntermediateRequest
     */
    private_key_format?: PkiRootSignIntermediateRequestPrivateKeyFormatEnum;
    /**
     * If set, Province will be set to this value.
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    province?: Array<string>;
    /**
     * The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field.
     * @type {string}
     * @memberof PkiRootSignIntermediateRequest
     */
    serial_number?: string;
    /**
     * The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).
     * @type {number}
     * @memberof PkiRootSignIntermediateRequest
     */
    signature_bits?: number;
    /**
     * Value for the Subject Key Identifier field (RFC 5280 Section 4.2.1.2). This value should ONLY be used when cross-signing to mimic the existing certificate's SKID value; this is necessary to allow certain TLS implementations (such as OpenSSL) which use SKID/AKID matches in chain building to restrict possible valid chains. Specified as a string in hex format. Default is empty, allowing Vault to automatically calculate the SKID according to method one in the above RFC section.
     * @type {string}
     * @memberof PkiRootSignIntermediateRequest
     */
    skid?: string;
    /**
     * If set, Street Address will be set to this value.
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    street_address?: Array<string>;
    /**
     * The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA.
     * @type {string}
     * @memberof PkiRootSignIntermediateRequest
     */
    ttl?: string;
    /**
     * The requested URI SANs, if any, in a comma-delimited list.
     * @type {Array<string>}
     * @memberof PkiRootSignIntermediateRequest
     */
    uri_sans?: Array<string>;
    /**
     * If true, then: 1) Subject information, including names and alternate names, will be preserved from the CSR rather than using values provided in the other parameters to this path; 2) Any key usages requested in the CSR will be added to the basic set of key usages used for CA certs signed by this path; for instance, the non-repudiation flag; 3) Extensions requested in the CSR will be copied into the issued certificate.
     * @type {boolean}
     * @memberof PkiRootSignIntermediateRequest
     */
    use_csr_values?: boolean;
    /**
     * Whether or not to use PSS signatures when using a RSA key-type issuer. Defaults to false.
     * @type {boolean}
     * @memberof PkiRootSignIntermediateRequest
     */
    use_pss?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum PkiRootSignIntermediateRequestFormatEnum {
    PEM = 'pem',
    DER = 'der',
    PEM_BUNDLE = 'pem_bundle'
}
/**
* @export
* @enum {string}
*/
export enum PkiRootSignIntermediateRequestPrivateKeyFormatEnum {
    EMPTY = '',
    DER = 'der',
    PEM = 'pem',
    PKCS8 = 'pkcs8'
}


/**
 * Check if a given object implements the PkiRootSignIntermediateRequest interface.
 */
export function instanceOfPkiRootSignIntermediateRequest(value: object): value is PkiRootSignIntermediateRequest {
    return true;
}

export function PkiRootSignIntermediateRequestFromJSON(json: any): PkiRootSignIntermediateRequest {
    return PkiRootSignIntermediateRequestFromJSONTyped(json, false);
}

export function PkiRootSignIntermediateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PkiRootSignIntermediateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'alt_names': json['alt_names'] == null ? undefined : json['alt_names'],
        'common_name': json['common_name'] == null ? undefined : json['common_name'],
        'country': json['country'] == null ? undefined : json['country'],
        'csr': json['csr'] == null ? undefined : json['csr'],
        'enforce_leaf_not_after_behavior': json['enforce_leaf_not_after_behavior'] == null ? undefined : json['enforce_leaf_not_after_behavior'],
        'exclude_cn_from_sans': json['exclude_cn_from_sans'] == null ? undefined : json['exclude_cn_from_sans'],
        'excluded_dns_domains': json['excluded_dns_domains'] == null ? undefined : json['excluded_dns_domains'],
        'excluded_email_addresses': json['excluded_email_addresses'] == null ? undefined : json['excluded_email_addresses'],
        'excluded_ip_ranges': json['excluded_ip_ranges'] == null ? undefined : json['excluded_ip_ranges'],
        'excluded_uri_domains': json['excluded_uri_domains'] == null ? undefined : json['excluded_uri_domains'],
        'format': json['format'] == null ? undefined : json['format'],
        'ip_sans': json['ip_sans'] == null ? undefined : json['ip_sans'],
        'issuer_name': json['issuer_name'] == null ? undefined : json['issuer_name'],
        'issuer_ref': json['issuer_ref'] == null ? undefined : json['issuer_ref'],
        'key_usage': json['key_usage'] == null ? undefined : json['key_usage'],
        'locality': json['locality'] == null ? undefined : json['locality'],
        'max_path_length': json['max_path_length'] == null ? undefined : json['max_path_length'],
        'not_after': json['not_after'] == null ? undefined : json['not_after'],
        'not_before_duration': json['not_before_duration'] == null ? undefined : json['not_before_duration'],
        'organization': json['organization'] == null ? undefined : json['organization'],
        'other_sans': json['other_sans'] == null ? undefined : json['other_sans'],
        'ou': json['ou'] == null ? undefined : json['ou'],
        'permitted_dns_domains': json['permitted_dns_domains'] == null ? undefined : json['permitted_dns_domains'],
        'permitted_email_addresses': json['permitted_email_addresses'] == null ? undefined : json['permitted_email_addresses'],
        'permitted_ip_ranges': json['permitted_ip_ranges'] == null ? undefined : json['permitted_ip_ranges'],
        'permitted_uri_domains': json['permitted_uri_domains'] == null ? undefined : json['permitted_uri_domains'],
        'postal_code': json['postal_code'] == null ? undefined : json['postal_code'],
        'private_key_format': json['private_key_format'] == null ? undefined : json['private_key_format'],
        'province': json['province'] == null ? undefined : json['province'],
        'serial_number': json['serial_number'] == null ? undefined : json['serial_number'],
        'signature_bits': json['signature_bits'] == null ? undefined : json['signature_bits'],
        'skid': json['skid'] == null ? undefined : json['skid'],
        'street_address': json['street_address'] == null ? undefined : json['street_address'],
        'ttl': json['ttl'] == null ? undefined : json['ttl'],
        'uri_sans': json['uri_sans'] == null ? undefined : json['uri_sans'],
        'use_csr_values': json['use_csr_values'] == null ? undefined : json['use_csr_values'],
        'use_pss': json['use_pss'] == null ? undefined : json['use_pss'],
    };
}

export function PkiRootSignIntermediateRequestToJSON(json: any): PkiRootSignIntermediateRequest {
    return PkiRootSignIntermediateRequestToJSONTyped(json, false);
}

export function PkiRootSignIntermediateRequestToJSONTyped(value?: PkiRootSignIntermediateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'alt_names': value['alt_names'],
        'common_name': value['common_name'],
        'country': value['country'],
        'csr': value['csr'],
        'enforce_leaf_not_after_behavior': value['enforce_leaf_not_after_behavior'],
        'exclude_cn_from_sans': value['exclude_cn_from_sans'],
        'excluded_dns_domains': value['excluded_dns_domains'],
        'excluded_email_addresses': value['excluded_email_addresses'],
        'excluded_ip_ranges': value['excluded_ip_ranges'],
        'excluded_uri_domains': value['excluded_uri_domains'],
        'format': value['format'],
        'ip_sans': value['ip_sans'],
        'issuer_name': value['issuer_name'],
        'issuer_ref': value['issuer_ref'],
        'key_usage': value['key_usage'],
        'locality': value['locality'],
        'max_path_length': value['max_path_length'],
        'not_after': value['not_after'],
        'not_before_duration': value['not_before_duration'],
        'organization': value['organization'],
        'other_sans': value['other_sans'],
        'ou': value['ou'],
        'permitted_dns_domains': value['permitted_dns_domains'],
        'permitted_email_addresses': value['permitted_email_addresses'],
        'permitted_ip_ranges': value['permitted_ip_ranges'],
        'permitted_uri_domains': value['permitted_uri_domains'],
        'postal_code': value['postal_code'],
        'private_key_format': value['private_key_format'],
        'province': value['province'],
        'serial_number': value['serial_number'],
        'signature_bits': value['signature_bits'],
        'skid': value['skid'],
        'street_address': value['street_address'],
        'ttl': value['ttl'],
        'uri_sans': value['uri_sans'],
        'use_csr_values': value['use_csr_values'],
        'use_pss': value['use_pss'],
    };
}

