/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransformWriteTokenizationTransformationRequest
 */
export interface TransformWriteTokenizationTransformationRequest {
    /**
     * Specifies a list of allowed roles that this transformation can be assigned to. A role using this transformation must exist in this list in order for encode and decode operations to properly function.
     * @type {Array<string>}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    allowed_roles?: Array<string>;
    /**
     * Specifies whether to use convergent tokenization, which produces consistent tokens given consistent plaintext and expiration inputs.
     * @type {boolean}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    convergent?: boolean;
    /**
     * If false, deletion of this transform is prevented.
     * @type {boolean}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    deletion_allowed?: boolean;
    /**
     * Specifies the mapping mode for stored tokenization values. 'default', the default is strongly recommended for high security. 'exportable' allows for all plaintexts to be decoded simultaneously in an emergency.
     * @type {string}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    mapping_mode?: string;
    /**
     * The maximum TTL of a token. If 0 or unspecified, tokens may have no expiration.
     * @type {string}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    max_ttl?: string;
    /**
     * The store or stores which will contain tokenized state.
     * @type {Array<string>}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    stores?: Array<string>;
    /**
     * Specifies the template name to use for matching value on encode and decode operations when using this transformation.
     * @type {string}
     * @memberof TransformWriteTokenizationTransformationRequest
     */
    template?: string;
}

/**
 * Check if a given object implements the TransformWriteTokenizationTransformationRequest interface.
 */
export function instanceOfTransformWriteTokenizationTransformationRequest(value: object): value is TransformWriteTokenizationTransformationRequest {
    return true;
}

export function TransformWriteTokenizationTransformationRequestFromJSON(json: any): TransformWriteTokenizationTransformationRequest {
    return TransformWriteTokenizationTransformationRequestFromJSONTyped(json, false);
}

export function TransformWriteTokenizationTransformationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransformWriteTokenizationTransformationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'allowed_roles': json['allowed_roles'] == null ? undefined : json['allowed_roles'],
        'convergent': json['convergent'] == null ? undefined : json['convergent'],
        'deletion_allowed': json['deletion_allowed'] == null ? undefined : json['deletion_allowed'],
        'mapping_mode': json['mapping_mode'] == null ? undefined : json['mapping_mode'],
        'max_ttl': json['max_ttl'] == null ? undefined : json['max_ttl'],
        'stores': json['stores'] == null ? undefined : json['stores'],
        'template': json['template'] == null ? undefined : json['template'],
    };
}

export function TransformWriteTokenizationTransformationRequestToJSON(json: any): TransformWriteTokenizationTransformationRequest {
    return TransformWriteTokenizationTransformationRequestToJSONTyped(json, false);
}

export function TransformWriteTokenizationTransformationRequestToJSONTyped(value?: TransformWriteTokenizationTransformationRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allowed_roles': value['allowed_roles'],
        'convergent': value['convergent'],
        'deletion_allowed': value['deletion_allowed'],
        'mapping_mode': value['mapping_mode'],
        'max_ttl': value['max_ttl'],
        'stores': value['stores'],
        'template': value['template'],
    };
}

