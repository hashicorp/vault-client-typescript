/**
 * Copyright (c) HashiCorp, Inc.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AliCloudConfigureRequest,
  AliCloudWriteRoleRequest,
  AwsConfigureLeaseRequest,
  AwsConfigureRootIamCredentialsRequest,
  AwsGenerateCredentialsWithParametersRequest,
  AwsGenerateStsCredentialsWithParametersRequest,
  AwsReadStaticCredsNameResponse,
  AwsReadStaticRolesNameResponse,
  AwsWriteRoleRequest,
  AwsWriteStaticRolesNameRequest,
  AwsWriteStaticRolesNameResponse,
  AzureConfigureRequest,
  AzureWriteRoleRequest,
  ConsulConfigureAccessRequest,
  ConsulWriteRoleRequest,
  DatabaseConfigureConnectionRequest,
  DatabaseWriteRoleRequest,
  DatabaseWriteStaticRoleRequest,
  GoogleCloudConfigureRequest,
  GoogleCloudGenerateRolesetKey3Request,
  GoogleCloudGenerateRolesetKeyRequest,
  GoogleCloudGenerateStaticAccountKeyRequest,
  GoogleCloudKmsConfigureKeyRequest,
  GoogleCloudKmsConfigureRequest,
  GoogleCloudKmsDecryptRequest,
  GoogleCloudKmsEncryptRequest,
  GoogleCloudKmsReencryptRequest,
  GoogleCloudKmsRegisterKeyRequest,
  GoogleCloudKmsSignRequest,
  GoogleCloudKmsVerifyRequest,
  GoogleCloudKmsWriteKeyRequest,
  GoogleCloudWriteImpersonatedAccountRequest,
  GoogleCloudWriteRolesetRequest,
  GoogleCloudWriteStaticAccountRequest,
  KeyManagementDistributeKeyInKmsProviderRequest,
  KeyManagementUpdateKeyRequest,
  KeyManagementWriteKmsProviderRequest,
  KmipConfigureRequest,
  KmipCreateScopeRequest,
  KmipGenerateClientCertificateRequest,
  KmipRevokeClientCertificateRequest,
  KmipSignClientCertificateRequestRequest,
  KmipWriteRoleRequest,
  KubernetesConfigureRequest,
  KubernetesGenerateCredentialsRequest,
  KubernetesWriteRoleRequest,
  KvV2ConfigureRequest,
  KvV2DeleteVersionsRequest,
  KvV2DestroyVersionsRequest,
  KvV2PatchMetadataPathRequest,
  KvV2PatchRequest,
  KvV2PatchResponse,
  KvV2ReadConfigurationResponse,
  KvV2ReadMetadataResponse,
  KvV2ReadResponse,
  KvV2ReadSubkeysResponse,
  KvV2UndeleteVersionsRequest,
  KvV2WriteMetadataRequest,
  KvV2WriteRequest,
  KvV2WriteResponse,
  LdapConfigureRequest,
  LdapLibraryCheckInRequest,
  LdapLibraryCheckOutRequest,
  LdapLibraryConfigureRequest,
  LdapLibraryForceCheckInRequest,
  LdapRotateStaticRoleRequest,
  LdapWriteDynamicRoleRequest,
  LdapWriteStaticRoleRequest,
  MongoDbAtlasConfigureRequest,
  MongoDbAtlasWriteRoleRequest,
  NomadConfigureAccessRequest,
  NomadConfigureLeaseRequest,
  NomadWriteRoleRequest,
  PkiConfigureAcmeRequest,
  PkiConfigureAutoTidyRequest,
  PkiConfigureAutoTidyResponse,
  PkiConfigureCaRequest,
  PkiConfigureCaResponse,
  PkiConfigureClusterRequest,
  PkiConfigureClusterResponse,
  PkiConfigureCmpRequest,
  PkiConfigureCrlRequest,
  PkiConfigureCrlResponse,
  PkiConfigureEstRequest,
  PkiConfigureExternalPolicyRequest,
  PkiConfigureExternalPolicyResponse,
  PkiConfigureIssuersRequest,
  PkiConfigureIssuersResponse,
  PkiConfigureKeysRequest,
  PkiConfigureKeysResponse,
  PkiConfigureScepRequest,
  PkiConfigureUrlsRequest,
  PkiConfigureUrlsResponse,
  PkiCrossSignIntermediateRequest,
  PkiCrossSignIntermediateResponse,
  PkiGenerateEabKeyForIssuerAndRoleResponse,
  PkiGenerateEabKeyForIssuerResponse,
  PkiGenerateEabKeyForRoleResponse,
  PkiGenerateEabKeyResponse,
  PkiGenerateExportedKeyRequest,
  PkiGenerateExportedKeyResponse,
  PkiGenerateIntermediateRequest,
  PkiGenerateIntermediateResponse,
  PkiGenerateInternalKeyRequest,
  PkiGenerateInternalKeyResponse,
  PkiGenerateKmsKeyRequest,
  PkiGenerateKmsKeyResponse,
  PkiGenerateRootRequest,
  PkiGenerateRootResponse,
  PkiImportKeyRequest,
  PkiImportKeyResponse,
  PkiIssueWithRoleRequest,
  PkiIssueWithRoleResponse,
  PkiIssuerIssueWithRoleRequest,
  PkiIssuerIssueWithRoleResponse,
  PkiIssuerReadCrlDeltaDerResponse,
  PkiIssuerReadCrlDeltaPemResponse,
  PkiIssuerReadCrlDeltaResponse,
  PkiIssuerReadCrlDerResponse,
  PkiIssuerReadCrlPemResponse,
  PkiIssuerReadCrlResponse,
  PkiIssuerReadUnifiedCrlDeltaDerResponse,
  PkiIssuerReadUnifiedCrlDeltaPemResponse,
  PkiIssuerReadUnifiedCrlDeltaResponse,
  PkiIssuerReadUnifiedCrlDerResponse,
  PkiIssuerReadUnifiedCrlPemResponse,
  PkiIssuerReadUnifiedCrlResponse,
  PkiIssuerResignCrlsRequest,
  PkiIssuerResignCrlsResponse,
  PkiIssuerSignIntermediateRequest,
  PkiIssuerSignIntermediateResponse,
  PkiIssuerSignRevocationListRequest,
  PkiIssuerSignRevocationListResponse,
  PkiIssuerSignSelfIssuedRequest,
  PkiIssuerSignSelfIssuedResponse,
  PkiIssuerSignVerbatimRequest,
  PkiIssuerSignVerbatimResponse,
  PkiIssuerSignVerbatimWithRoleRequest,
  PkiIssuerSignVerbatimWithRoleResponse,
  PkiIssuerSignWithRoleRequest,
  PkiIssuerSignWithRoleResponse,
  PkiIssuersGenerateIntermediateRequest,
  PkiIssuersGenerateIntermediateResponse,
  PkiIssuersGenerateRootRequest,
  PkiIssuersGenerateRootResponse,
  PkiIssuersImportBundleRequest,
  PkiIssuersImportBundleResponse,
  PkiIssuersImportCertRequest,
  PkiIssuersImportCertResponse,
  PkiListEabKeysResponse,
  PkiListIssuersResponse,
  PkiListKeysResponse,
  PkiListUnifiedRevokedCertsResponse,
  PkiPatchIssuerRequest,
  PkiPatchIssuerResponse,
  PkiPatchRoleRequest,
  PkiPatchRoleResponse,
  PkiReadAutoTidyConfigurationResponse,
  PkiReadCaChainPemResponse,
  PkiReadCaDerResponse,
  PkiReadCaPemResponse,
  PkiReadCertCaChainResponse,
  PkiReadCertCrlResponse,
  PkiReadCertDeltaCrlResponse,
  PkiReadCertMetadataResponse,
  PkiReadCertRawDerResponse,
  PkiReadCertRawPemResponse,
  PkiReadCertResponse,
  PkiReadCertUnifiedCrlResponse,
  PkiReadCertUnifiedDeltaCrlResponse,
  PkiReadClusterConfigurationResponse,
  PkiReadCrlConfigurationResponse,
  PkiReadCrlDeltaPemResponse,
  PkiReadCrlDeltaResponse,
  PkiReadCrlDerResponse,
  PkiReadCrlPemResponse,
  PkiReadIssuerDerResponse,
  PkiReadIssuerJsonResponse,
  PkiReadIssuerPemResponse,
  PkiReadIssuerResponse,
  PkiReadIssuersConfigurationResponse,
  PkiReadKeyResponse,
  PkiReadKeysConfigurationResponse,
  PkiReadRoleResponse,
  PkiReadUrlsConfigurationResponse,
  PkiReplaceRootRequest,
  PkiReplaceRootResponse,
  PkiRevokeIssuerResponse,
  PkiRevokeRequest,
  PkiRevokeResponse,
  PkiRevokeWithKeyRequest,
  PkiRevokeWithKeyResponse,
  PkiRootSignIntermediateRequest,
  PkiRootSignIntermediateResponse,
  PkiRootSignSelfIssuedRequest,
  PkiRootSignSelfIssuedResponse,
  PkiRotateCrlResponse,
  PkiRotateDeltaCrlResponse,
  PkiRotateRootRequest,
  PkiRotateRootResponse,
  PkiSetSignedIntermediateRequest,
  PkiSetSignedIntermediateResponse,
  PkiSignVerbatimRequest,
  PkiSignVerbatimResponse,
  PkiSignVerbatimWithRoleRequest,
  PkiSignVerbatimWithRoleResponse,
  PkiSignWithRoleRequest,
  PkiSignWithRoleResponse,
  PkiTidyCancelResponse,
  PkiTidyRequest,
  PkiTidyStatusResponse,
  PkiWriteAcmeAccountKidRequest,
  PkiWriteAcmeAuthorizationAuthIdRequest,
  PkiWriteAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteAcmeKeyIdRequest,
  PkiWriteAcmeNewAccountRequest,
  PkiWriteAcmeNewOrderRequest,
  PkiWriteAcmeOrderOrderIdCertRequest,
  PkiWriteAcmeOrderOrderIdFinalizeRequest,
  PkiWriteAcmeOrderOrderIdRequest,
  PkiWriteAcmeOrdersRequest,
  PkiWriteAcmeRevokeCertRequest,
  PkiWriteExternalPolicyAcmeAccountKidRequest,
  PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest,
  PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteExternalPolicyAcmeNewAccountRequest,
  PkiWriteExternalPolicyAcmeNewOrderRequest,
  PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest,
  PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest,
  PkiWriteExternalPolicyAcmeOrderOrderIdRequest,
  PkiWriteExternalPolicyAcmeOrdersRequest,
  PkiWriteExternalPolicyAcmeRevokeCertRequest,
  PkiWriteExternalPolicyIssuePolicyRequest,
  PkiWriteExternalPolicyIssuePolicyResponse,
  PkiWriteExternalPolicyIssueRequest,
  PkiWriteExternalPolicyIssueResponse,
  PkiWriteExternalPolicyPolicyAcmeAccountKidRequest,
  PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest,
  PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteExternalPolicyPolicyAcmeNewAccountRequest,
  PkiWriteExternalPolicyPolicyAcmeNewOrderRequest,
  PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest,
  PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest,
  PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest,
  PkiWriteExternalPolicyPolicyAcmeOrdersRequest,
  PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest,
  PkiWriteExternalPolicySignIntermediatePolicyRequest,
  PkiWriteExternalPolicySignIntermediatePolicyResponse,
  PkiWriteExternalPolicySignIntermediateRequest,
  PkiWriteExternalPolicySignIntermediateResponse,
  PkiWriteExternalPolicySignPolicyRequest,
  PkiWriteExternalPolicySignPolicyResponse,
  PkiWriteExternalPolicySignRequest,
  PkiWriteExternalPolicySignResponse,
  PkiWriteIssuerIssuerRefAcmeAccountKidRequest,
  PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest,
  PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteIssuerIssuerRefAcmeNewAccountRequest,
  PkiWriteIssuerIssuerRefAcmeNewOrderRequest,
  PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest,
  PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest,
  PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest,
  PkiWriteIssuerIssuerRefAcmeOrdersRequest,
  PkiWriteIssuerIssuerRefAcmeRevokeCertRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest,
  PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest,
  PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest,
  PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponse,
  PkiWriteIssuerIssuerRefExternalPolicyIssueRequest,
  PkiWriteIssuerIssuerRefExternalPolicyIssueResponse,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest,
  PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest,
  PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest,
  PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponse,
  PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest,
  PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponse,
  PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest,
  PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponse,
  PkiWriteIssuerIssuerRefExternalPolicySignRequest,
  PkiWriteIssuerIssuerRefExternalPolicySignResponse,
  PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest,
  PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest,
  PkiWriteIssuerRequest,
  PkiWriteIssuerResponse,
  PkiWriteKeyRequest,
  PkiWriteKeyResponse,
  PkiWriteRoleRequest,
  PkiWriteRoleResponse,
  PkiWriteRolesRoleAcmeAccountKidRequest,
  PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest,
  PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest,
  PkiWriteRolesRoleAcmeNewAccountRequest,
  PkiWriteRolesRoleAcmeNewOrderRequest,
  PkiWriteRolesRoleAcmeOrderOrderIdCertRequest,
  PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest,
  PkiWriteRolesRoleAcmeOrderOrderIdRequest,
  PkiWriteRolesRoleAcmeOrdersRequest,
  PkiWriteRolesRoleAcmeRevokeCertRequest,
  RabbitMqConfigureConnectionRequest,
  RabbitMqConfigureLeaseRequest,
  RabbitMqWriteRoleRequest,
  SshConfigureCaRequest,
  SshConfigureZeroAddressRequest,
  SshGenerateCredentialsRequest,
  SshIssueCertificateRequest,
  SshListRolesByIpRequest,
  SshSignCertificateRequest,
  SshVerifyOtpRequest,
  SshWriteRoleRequest,
  StandardListResponse,
  TerraformCloudConfigureRequest,
  TerraformCloudWriteRoleRequest,
  TotpCreateKeyRequest,
  TotpValidateCodeRequest,
  TransformApplyStoreSchemaRequest,
  TransformCheckTokenizedRequest,
  TransformConfigureCacheRequest,
  TransformConfigureNamedEncryptionKeyRequest,
  TransformCreateFpeTransformationWithImportedKeysRequest,
  TransformCreateTokenizationTransformationWithImportedKeysRequest,
  TransformDecodeRequest,
  TransformDecodeWithFormatRequest,
  TransformEncodeRequest,
  TransformExportDecodedTokenizationTokensRequest,
  TransformImportKeyVersionIntoTokenizationTransformationRequest,
  TransformLookUpTokenRequest,
  TransformRestoreTokenizationStateRequest,
  TransformRetrieveTokenMetadataRequest,
  TransformSnapshotTokenizationStateRequest,
  TransformTrimKeyVersionsRequest,
  TransformValidateTokenRequest,
  TransformWriteAlphabetRequest,
  TransformWriteFpeTransformationRequest,
  TransformWriteMaskingTransformationRequest,
  TransformWriteRoleRequest,
  TransformWriteStoreRequest,
  TransformWriteTemplateRequest,
  TransformWriteTokenizationTransformationRequest,
  TransformWriteTransformationRequest,
  TransitConfigureCacheRequest,
  TransitConfigureKeyRequest,
  TransitConfigureKeysRequest,
  TransitCreateKeyRequest,
  TransitDecryptRequest,
  TransitEncryptRequest,
  TransitGenerateCmacRequest,
  TransitGenerateCmacWithMacLengthRequest,
  TransitGenerateCsrForKeyRequest,
  TransitGenerateDataKeyRequest,
  TransitGenerateHmacRequest,
  TransitGenerateHmacWithAlgorithmRequest,
  TransitGenerateRandomRequest,
  TransitGenerateRandomWithBytesRequest,
  TransitGenerateRandomWithSourceAndBytesRequest,
  TransitGenerateRandomWithSourceRequest,
  TransitHashRequest,
  TransitHashWithAlgorithmRequest,
  TransitImportKeyRequest,
  TransitImportKeyVersionRequest,
  TransitRestoreAndRenameKeyRequest,
  TransitRestoreKeyRequest,
  TransitRewrapRequest,
  TransitRotateKeyRequest,
  TransitSetCertificateForKeyRequest,
  TransitSignRequest,
  TransitSignWithAlgorithmRequest,
  TransitTrimKeyRequest,
  TransitVerifyRequest,
  TransitVerifyWithAlgorithmRequest,
} from '../models/index';
import {
    AliCloudConfigureRequestFromJSON,
    AliCloudConfigureRequestToJSON,
    AliCloudWriteRoleRequestFromJSON,
    AliCloudWriteRoleRequestToJSON,
    AwsConfigureLeaseRequestFromJSON,
    AwsConfigureLeaseRequestToJSON,
    AwsConfigureRootIamCredentialsRequestFromJSON,
    AwsConfigureRootIamCredentialsRequestToJSON,
    AwsGenerateCredentialsWithParametersRequestFromJSON,
    AwsGenerateCredentialsWithParametersRequestToJSON,
    AwsGenerateStsCredentialsWithParametersRequestFromJSON,
    AwsGenerateStsCredentialsWithParametersRequestToJSON,
    AwsReadStaticCredsNameResponseFromJSON,
    AwsReadStaticCredsNameResponseToJSON,
    AwsReadStaticRolesNameResponseFromJSON,
    AwsReadStaticRolesNameResponseToJSON,
    AwsWriteRoleRequestFromJSON,
    AwsWriteRoleRequestToJSON,
    AwsWriteStaticRolesNameRequestFromJSON,
    AwsWriteStaticRolesNameRequestToJSON,
    AwsWriteStaticRolesNameResponseFromJSON,
    AwsWriteStaticRolesNameResponseToJSON,
    AzureConfigureRequestFromJSON,
    AzureConfigureRequestToJSON,
    AzureWriteRoleRequestFromJSON,
    AzureWriteRoleRequestToJSON,
    ConsulConfigureAccessRequestFromJSON,
    ConsulConfigureAccessRequestToJSON,
    ConsulWriteRoleRequestFromJSON,
    ConsulWriteRoleRequestToJSON,
    DatabaseConfigureConnectionRequestFromJSON,
    DatabaseConfigureConnectionRequestToJSON,
    DatabaseWriteRoleRequestFromJSON,
    DatabaseWriteRoleRequestToJSON,
    DatabaseWriteStaticRoleRequestFromJSON,
    DatabaseWriteStaticRoleRequestToJSON,
    GoogleCloudConfigureRequestFromJSON,
    GoogleCloudConfigureRequestToJSON,
    GoogleCloudGenerateRolesetKey3RequestFromJSON,
    GoogleCloudGenerateRolesetKey3RequestToJSON,
    GoogleCloudGenerateRolesetKeyRequestFromJSON,
    GoogleCloudGenerateRolesetKeyRequestToJSON,
    GoogleCloudGenerateStaticAccountKeyRequestFromJSON,
    GoogleCloudGenerateStaticAccountKeyRequestToJSON,
    GoogleCloudKmsConfigureKeyRequestFromJSON,
    GoogleCloudKmsConfigureKeyRequestToJSON,
    GoogleCloudKmsConfigureRequestFromJSON,
    GoogleCloudKmsConfigureRequestToJSON,
    GoogleCloudKmsDecryptRequestFromJSON,
    GoogleCloudKmsDecryptRequestToJSON,
    GoogleCloudKmsEncryptRequestFromJSON,
    GoogleCloudKmsEncryptRequestToJSON,
    GoogleCloudKmsReencryptRequestFromJSON,
    GoogleCloudKmsReencryptRequestToJSON,
    GoogleCloudKmsRegisterKeyRequestFromJSON,
    GoogleCloudKmsRegisterKeyRequestToJSON,
    GoogleCloudKmsSignRequestFromJSON,
    GoogleCloudKmsSignRequestToJSON,
    GoogleCloudKmsVerifyRequestFromJSON,
    GoogleCloudKmsVerifyRequestToJSON,
    GoogleCloudKmsWriteKeyRequestFromJSON,
    GoogleCloudKmsWriteKeyRequestToJSON,
    GoogleCloudWriteImpersonatedAccountRequestFromJSON,
    GoogleCloudWriteImpersonatedAccountRequestToJSON,
    GoogleCloudWriteRolesetRequestFromJSON,
    GoogleCloudWriteRolesetRequestToJSON,
    GoogleCloudWriteStaticAccountRequestFromJSON,
    GoogleCloudWriteStaticAccountRequestToJSON,
    KeyManagementDistributeKeyInKmsProviderRequestFromJSON,
    KeyManagementDistributeKeyInKmsProviderRequestToJSON,
    KeyManagementUpdateKeyRequestFromJSON,
    KeyManagementUpdateKeyRequestToJSON,
    KeyManagementWriteKmsProviderRequestFromJSON,
    KeyManagementWriteKmsProviderRequestToJSON,
    KmipConfigureRequestFromJSON,
    KmipConfigureRequestToJSON,
    KmipCreateScopeRequestFromJSON,
    KmipCreateScopeRequestToJSON,
    KmipGenerateClientCertificateRequestFromJSON,
    KmipGenerateClientCertificateRequestToJSON,
    KmipRevokeClientCertificateRequestFromJSON,
    KmipRevokeClientCertificateRequestToJSON,
    KmipSignClientCertificateRequestRequestFromJSON,
    KmipSignClientCertificateRequestRequestToJSON,
    KmipWriteRoleRequestFromJSON,
    KmipWriteRoleRequestToJSON,
    KubernetesConfigureRequestFromJSON,
    KubernetesConfigureRequestToJSON,
    KubernetesGenerateCredentialsRequestFromJSON,
    KubernetesGenerateCredentialsRequestToJSON,
    KubernetesWriteRoleRequestFromJSON,
    KubernetesWriteRoleRequestToJSON,
    KvV2ConfigureRequestFromJSON,
    KvV2ConfigureRequestToJSON,
    KvV2DeleteVersionsRequestFromJSON,
    KvV2DeleteVersionsRequestToJSON,
    KvV2DestroyVersionsRequestFromJSON,
    KvV2DestroyVersionsRequestToJSON,
    KvV2PatchMetadataPathRequestFromJSON,
    KvV2PatchMetadataPathRequestToJSON,
    KvV2PatchRequestFromJSON,
    KvV2PatchRequestToJSON,
    KvV2PatchResponseFromJSON,
    KvV2PatchResponseToJSON,
    KvV2ReadConfigurationResponseFromJSON,
    KvV2ReadConfigurationResponseToJSON,
    KvV2ReadMetadataResponseFromJSON,
    KvV2ReadMetadataResponseToJSON,
    KvV2ReadResponseFromJSON,
    KvV2ReadResponseToJSON,
    KvV2ReadSubkeysResponseFromJSON,
    KvV2ReadSubkeysResponseToJSON,
    KvV2UndeleteVersionsRequestFromJSON,
    KvV2UndeleteVersionsRequestToJSON,
    KvV2WriteMetadataRequestFromJSON,
    KvV2WriteMetadataRequestToJSON,
    KvV2WriteRequestFromJSON,
    KvV2WriteRequestToJSON,
    KvV2WriteResponseFromJSON,
    KvV2WriteResponseToJSON,
    LdapConfigureRequestFromJSON,
    LdapConfigureRequestToJSON,
    LdapLibraryCheckInRequestFromJSON,
    LdapLibraryCheckInRequestToJSON,
    LdapLibraryCheckOutRequestFromJSON,
    LdapLibraryCheckOutRequestToJSON,
    LdapLibraryConfigureRequestFromJSON,
    LdapLibraryConfigureRequestToJSON,
    LdapLibraryForceCheckInRequestFromJSON,
    LdapLibraryForceCheckInRequestToJSON,
    LdapRotateStaticRoleRequestFromJSON,
    LdapRotateStaticRoleRequestToJSON,
    LdapWriteDynamicRoleRequestFromJSON,
    LdapWriteDynamicRoleRequestToJSON,
    LdapWriteStaticRoleRequestFromJSON,
    LdapWriteStaticRoleRequestToJSON,
    MongoDbAtlasConfigureRequestFromJSON,
    MongoDbAtlasConfigureRequestToJSON,
    MongoDbAtlasWriteRoleRequestFromJSON,
    MongoDbAtlasWriteRoleRequestToJSON,
    NomadConfigureAccessRequestFromJSON,
    NomadConfigureAccessRequestToJSON,
    NomadConfigureLeaseRequestFromJSON,
    NomadConfigureLeaseRequestToJSON,
    NomadWriteRoleRequestFromJSON,
    NomadWriteRoleRequestToJSON,
    PkiConfigureAcmeRequestFromJSON,
    PkiConfigureAcmeRequestToJSON,
    PkiConfigureAutoTidyRequestFromJSON,
    PkiConfigureAutoTidyRequestToJSON,
    PkiConfigureAutoTidyResponseFromJSON,
    PkiConfigureAutoTidyResponseToJSON,
    PkiConfigureCaRequestFromJSON,
    PkiConfigureCaRequestToJSON,
    PkiConfigureCaResponseFromJSON,
    PkiConfigureCaResponseToJSON,
    PkiConfigureClusterRequestFromJSON,
    PkiConfigureClusterRequestToJSON,
    PkiConfigureClusterResponseFromJSON,
    PkiConfigureClusterResponseToJSON,
    PkiConfigureCmpRequestFromJSON,
    PkiConfigureCmpRequestToJSON,
    PkiConfigureCrlRequestFromJSON,
    PkiConfigureCrlRequestToJSON,
    PkiConfigureCrlResponseFromJSON,
    PkiConfigureCrlResponseToJSON,
    PkiConfigureEstRequestFromJSON,
    PkiConfigureEstRequestToJSON,
    PkiConfigureExternalPolicyRequestFromJSON,
    PkiConfigureExternalPolicyRequestToJSON,
    PkiConfigureExternalPolicyResponseFromJSON,
    PkiConfigureExternalPolicyResponseToJSON,
    PkiConfigureIssuersRequestFromJSON,
    PkiConfigureIssuersRequestToJSON,
    PkiConfigureIssuersResponseFromJSON,
    PkiConfigureIssuersResponseToJSON,
    PkiConfigureKeysRequestFromJSON,
    PkiConfigureKeysRequestToJSON,
    PkiConfigureKeysResponseFromJSON,
    PkiConfigureKeysResponseToJSON,
    PkiConfigureScepRequestFromJSON,
    PkiConfigureScepRequestToJSON,
    PkiConfigureUrlsRequestFromJSON,
    PkiConfigureUrlsRequestToJSON,
    PkiConfigureUrlsResponseFromJSON,
    PkiConfigureUrlsResponseToJSON,
    PkiCrossSignIntermediateRequestFromJSON,
    PkiCrossSignIntermediateRequestToJSON,
    PkiCrossSignIntermediateResponseFromJSON,
    PkiCrossSignIntermediateResponseToJSON,
    PkiGenerateEabKeyForIssuerAndRoleResponseFromJSON,
    PkiGenerateEabKeyForIssuerAndRoleResponseToJSON,
    PkiGenerateEabKeyForIssuerResponseFromJSON,
    PkiGenerateEabKeyForIssuerResponseToJSON,
    PkiGenerateEabKeyForRoleResponseFromJSON,
    PkiGenerateEabKeyForRoleResponseToJSON,
    PkiGenerateEabKeyResponseFromJSON,
    PkiGenerateEabKeyResponseToJSON,
    PkiGenerateExportedKeyRequestFromJSON,
    PkiGenerateExportedKeyRequestToJSON,
    PkiGenerateExportedKeyResponseFromJSON,
    PkiGenerateExportedKeyResponseToJSON,
    PkiGenerateIntermediateRequestFromJSON,
    PkiGenerateIntermediateRequestToJSON,
    PkiGenerateIntermediateResponseFromJSON,
    PkiGenerateIntermediateResponseToJSON,
    PkiGenerateInternalKeyRequestFromJSON,
    PkiGenerateInternalKeyRequestToJSON,
    PkiGenerateInternalKeyResponseFromJSON,
    PkiGenerateInternalKeyResponseToJSON,
    PkiGenerateKmsKeyRequestFromJSON,
    PkiGenerateKmsKeyRequestToJSON,
    PkiGenerateKmsKeyResponseFromJSON,
    PkiGenerateKmsKeyResponseToJSON,
    PkiGenerateRootRequestFromJSON,
    PkiGenerateRootRequestToJSON,
    PkiGenerateRootResponseFromJSON,
    PkiGenerateRootResponseToJSON,
    PkiImportKeyRequestFromJSON,
    PkiImportKeyRequestToJSON,
    PkiImportKeyResponseFromJSON,
    PkiImportKeyResponseToJSON,
    PkiIssueWithRoleRequestFromJSON,
    PkiIssueWithRoleRequestToJSON,
    PkiIssueWithRoleResponseFromJSON,
    PkiIssueWithRoleResponseToJSON,
    PkiIssuerIssueWithRoleRequestFromJSON,
    PkiIssuerIssueWithRoleRequestToJSON,
    PkiIssuerIssueWithRoleResponseFromJSON,
    PkiIssuerIssueWithRoleResponseToJSON,
    PkiIssuerReadCrlDeltaDerResponseFromJSON,
    PkiIssuerReadCrlDeltaDerResponseToJSON,
    PkiIssuerReadCrlDeltaPemResponseFromJSON,
    PkiIssuerReadCrlDeltaPemResponseToJSON,
    PkiIssuerReadCrlDeltaResponseFromJSON,
    PkiIssuerReadCrlDeltaResponseToJSON,
    PkiIssuerReadCrlDerResponseFromJSON,
    PkiIssuerReadCrlDerResponseToJSON,
    PkiIssuerReadCrlPemResponseFromJSON,
    PkiIssuerReadCrlPemResponseToJSON,
    PkiIssuerReadCrlResponseFromJSON,
    PkiIssuerReadCrlResponseToJSON,
    PkiIssuerReadUnifiedCrlDeltaDerResponseFromJSON,
    PkiIssuerReadUnifiedCrlDeltaDerResponseToJSON,
    PkiIssuerReadUnifiedCrlDeltaPemResponseFromJSON,
    PkiIssuerReadUnifiedCrlDeltaPemResponseToJSON,
    PkiIssuerReadUnifiedCrlDeltaResponseFromJSON,
    PkiIssuerReadUnifiedCrlDeltaResponseToJSON,
    PkiIssuerReadUnifiedCrlDerResponseFromJSON,
    PkiIssuerReadUnifiedCrlDerResponseToJSON,
    PkiIssuerReadUnifiedCrlPemResponseFromJSON,
    PkiIssuerReadUnifiedCrlPemResponseToJSON,
    PkiIssuerReadUnifiedCrlResponseFromJSON,
    PkiIssuerReadUnifiedCrlResponseToJSON,
    PkiIssuerResignCrlsRequestFromJSON,
    PkiIssuerResignCrlsRequestToJSON,
    PkiIssuerResignCrlsResponseFromJSON,
    PkiIssuerResignCrlsResponseToJSON,
    PkiIssuerSignIntermediateRequestFromJSON,
    PkiIssuerSignIntermediateRequestToJSON,
    PkiIssuerSignIntermediateResponseFromJSON,
    PkiIssuerSignIntermediateResponseToJSON,
    PkiIssuerSignRevocationListRequestFromJSON,
    PkiIssuerSignRevocationListRequestToJSON,
    PkiIssuerSignRevocationListResponseFromJSON,
    PkiIssuerSignRevocationListResponseToJSON,
    PkiIssuerSignSelfIssuedRequestFromJSON,
    PkiIssuerSignSelfIssuedRequestToJSON,
    PkiIssuerSignSelfIssuedResponseFromJSON,
    PkiIssuerSignSelfIssuedResponseToJSON,
    PkiIssuerSignVerbatimRequestFromJSON,
    PkiIssuerSignVerbatimRequestToJSON,
    PkiIssuerSignVerbatimResponseFromJSON,
    PkiIssuerSignVerbatimResponseToJSON,
    PkiIssuerSignVerbatimWithRoleRequestFromJSON,
    PkiIssuerSignVerbatimWithRoleRequestToJSON,
    PkiIssuerSignVerbatimWithRoleResponseFromJSON,
    PkiIssuerSignVerbatimWithRoleResponseToJSON,
    PkiIssuerSignWithRoleRequestFromJSON,
    PkiIssuerSignWithRoleRequestToJSON,
    PkiIssuerSignWithRoleResponseFromJSON,
    PkiIssuerSignWithRoleResponseToJSON,
    PkiIssuersGenerateIntermediateRequestFromJSON,
    PkiIssuersGenerateIntermediateRequestToJSON,
    PkiIssuersGenerateIntermediateResponseFromJSON,
    PkiIssuersGenerateIntermediateResponseToJSON,
    PkiIssuersGenerateRootRequestFromJSON,
    PkiIssuersGenerateRootRequestToJSON,
    PkiIssuersGenerateRootResponseFromJSON,
    PkiIssuersGenerateRootResponseToJSON,
    PkiIssuersImportBundleRequestFromJSON,
    PkiIssuersImportBundleRequestToJSON,
    PkiIssuersImportBundleResponseFromJSON,
    PkiIssuersImportBundleResponseToJSON,
    PkiIssuersImportCertRequestFromJSON,
    PkiIssuersImportCertRequestToJSON,
    PkiIssuersImportCertResponseFromJSON,
    PkiIssuersImportCertResponseToJSON,
    PkiListEabKeysResponseFromJSON,
    PkiListEabKeysResponseToJSON,
    PkiListIssuersResponseFromJSON,
    PkiListIssuersResponseToJSON,
    PkiListKeysResponseFromJSON,
    PkiListKeysResponseToJSON,
    PkiListUnifiedRevokedCertsResponseFromJSON,
    PkiListUnifiedRevokedCertsResponseToJSON,
    PkiPatchIssuerRequestFromJSON,
    PkiPatchIssuerRequestToJSON,
    PkiPatchIssuerResponseFromJSON,
    PkiPatchIssuerResponseToJSON,
    PkiPatchRoleRequestFromJSON,
    PkiPatchRoleRequestToJSON,
    PkiPatchRoleResponseFromJSON,
    PkiPatchRoleResponseToJSON,
    PkiReadAutoTidyConfigurationResponseFromJSON,
    PkiReadAutoTidyConfigurationResponseToJSON,
    PkiReadCaChainPemResponseFromJSON,
    PkiReadCaChainPemResponseToJSON,
    PkiReadCaDerResponseFromJSON,
    PkiReadCaDerResponseToJSON,
    PkiReadCaPemResponseFromJSON,
    PkiReadCaPemResponseToJSON,
    PkiReadCertCaChainResponseFromJSON,
    PkiReadCertCaChainResponseToJSON,
    PkiReadCertCrlResponseFromJSON,
    PkiReadCertCrlResponseToJSON,
    PkiReadCertDeltaCrlResponseFromJSON,
    PkiReadCertDeltaCrlResponseToJSON,
    PkiReadCertMetadataResponseFromJSON,
    PkiReadCertMetadataResponseToJSON,
    PkiReadCertRawDerResponseFromJSON,
    PkiReadCertRawDerResponseToJSON,
    PkiReadCertRawPemResponseFromJSON,
    PkiReadCertRawPemResponseToJSON,
    PkiReadCertResponseFromJSON,
    PkiReadCertResponseToJSON,
    PkiReadCertUnifiedCrlResponseFromJSON,
    PkiReadCertUnifiedCrlResponseToJSON,
    PkiReadCertUnifiedDeltaCrlResponseFromJSON,
    PkiReadCertUnifiedDeltaCrlResponseToJSON,
    PkiReadClusterConfigurationResponseFromJSON,
    PkiReadClusterConfigurationResponseToJSON,
    PkiReadCrlConfigurationResponseFromJSON,
    PkiReadCrlConfigurationResponseToJSON,
    PkiReadCrlDeltaPemResponseFromJSON,
    PkiReadCrlDeltaPemResponseToJSON,
    PkiReadCrlDeltaResponseFromJSON,
    PkiReadCrlDeltaResponseToJSON,
    PkiReadCrlDerResponseFromJSON,
    PkiReadCrlDerResponseToJSON,
    PkiReadCrlPemResponseFromJSON,
    PkiReadCrlPemResponseToJSON,
    PkiReadIssuerDerResponseFromJSON,
    PkiReadIssuerDerResponseToJSON,
    PkiReadIssuerJsonResponseFromJSON,
    PkiReadIssuerJsonResponseToJSON,
    PkiReadIssuerPemResponseFromJSON,
    PkiReadIssuerPemResponseToJSON,
    PkiReadIssuerResponseFromJSON,
    PkiReadIssuerResponseToJSON,
    PkiReadIssuersConfigurationResponseFromJSON,
    PkiReadIssuersConfigurationResponseToJSON,
    PkiReadKeyResponseFromJSON,
    PkiReadKeyResponseToJSON,
    PkiReadKeysConfigurationResponseFromJSON,
    PkiReadKeysConfigurationResponseToJSON,
    PkiReadRoleResponseFromJSON,
    PkiReadRoleResponseToJSON,
    PkiReadUrlsConfigurationResponseFromJSON,
    PkiReadUrlsConfigurationResponseToJSON,
    PkiReplaceRootRequestFromJSON,
    PkiReplaceRootRequestToJSON,
    PkiReplaceRootResponseFromJSON,
    PkiReplaceRootResponseToJSON,
    PkiRevokeIssuerResponseFromJSON,
    PkiRevokeIssuerResponseToJSON,
    PkiRevokeRequestFromJSON,
    PkiRevokeRequestToJSON,
    PkiRevokeResponseFromJSON,
    PkiRevokeResponseToJSON,
    PkiRevokeWithKeyRequestFromJSON,
    PkiRevokeWithKeyRequestToJSON,
    PkiRevokeWithKeyResponseFromJSON,
    PkiRevokeWithKeyResponseToJSON,
    PkiRootSignIntermediateRequestFromJSON,
    PkiRootSignIntermediateRequestToJSON,
    PkiRootSignIntermediateResponseFromJSON,
    PkiRootSignIntermediateResponseToJSON,
    PkiRootSignSelfIssuedRequestFromJSON,
    PkiRootSignSelfIssuedRequestToJSON,
    PkiRootSignSelfIssuedResponseFromJSON,
    PkiRootSignSelfIssuedResponseToJSON,
    PkiRotateCrlResponseFromJSON,
    PkiRotateCrlResponseToJSON,
    PkiRotateDeltaCrlResponseFromJSON,
    PkiRotateDeltaCrlResponseToJSON,
    PkiRotateRootRequestFromJSON,
    PkiRotateRootRequestToJSON,
    PkiRotateRootResponseFromJSON,
    PkiRotateRootResponseToJSON,
    PkiSetSignedIntermediateRequestFromJSON,
    PkiSetSignedIntermediateRequestToJSON,
    PkiSetSignedIntermediateResponseFromJSON,
    PkiSetSignedIntermediateResponseToJSON,
    PkiSignVerbatimRequestFromJSON,
    PkiSignVerbatimRequestToJSON,
    PkiSignVerbatimResponseFromJSON,
    PkiSignVerbatimResponseToJSON,
    PkiSignVerbatimWithRoleRequestFromJSON,
    PkiSignVerbatimWithRoleRequestToJSON,
    PkiSignVerbatimWithRoleResponseFromJSON,
    PkiSignVerbatimWithRoleResponseToJSON,
    PkiSignWithRoleRequestFromJSON,
    PkiSignWithRoleRequestToJSON,
    PkiSignWithRoleResponseFromJSON,
    PkiSignWithRoleResponseToJSON,
    PkiTidyCancelResponseFromJSON,
    PkiTidyCancelResponseToJSON,
    PkiTidyRequestFromJSON,
    PkiTidyRequestToJSON,
    PkiTidyStatusResponseFromJSON,
    PkiTidyStatusResponseToJSON,
    PkiWriteAcmeAccountKidRequestFromJSON,
    PkiWriteAcmeAccountKidRequestToJSON,
    PkiWriteAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteAcmeKeyIdRequestFromJSON,
    PkiWriteAcmeKeyIdRequestToJSON,
    PkiWriteAcmeNewAccountRequestFromJSON,
    PkiWriteAcmeNewAccountRequestToJSON,
    PkiWriteAcmeNewOrderRequestFromJSON,
    PkiWriteAcmeNewOrderRequestToJSON,
    PkiWriteAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteAcmeOrderOrderIdRequestFromJSON,
    PkiWriteAcmeOrderOrderIdRequestToJSON,
    PkiWriteAcmeOrdersRequestFromJSON,
    PkiWriteAcmeOrdersRequestToJSON,
    PkiWriteAcmeRevokeCertRequestFromJSON,
    PkiWriteAcmeRevokeCertRequestToJSON,
    PkiWriteExternalPolicyAcmeAccountKidRequestFromJSON,
    PkiWriteExternalPolicyAcmeAccountKidRequestToJSON,
    PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteExternalPolicyAcmeNewAccountRequestFromJSON,
    PkiWriteExternalPolicyAcmeNewAccountRequestToJSON,
    PkiWriteExternalPolicyAcmeNewOrderRequestFromJSON,
    PkiWriteExternalPolicyAcmeNewOrderRequestToJSON,
    PkiWriteExternalPolicyAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteExternalPolicyAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteExternalPolicyAcmeOrderOrderIdRequestFromJSON,
    PkiWriteExternalPolicyAcmeOrderOrderIdRequestToJSON,
    PkiWriteExternalPolicyAcmeOrdersRequestFromJSON,
    PkiWriteExternalPolicyAcmeOrdersRequestToJSON,
    PkiWriteExternalPolicyAcmeRevokeCertRequestFromJSON,
    PkiWriteExternalPolicyAcmeRevokeCertRequestToJSON,
    PkiWriteExternalPolicyIssuePolicyRequestFromJSON,
    PkiWriteExternalPolicyIssuePolicyRequestToJSON,
    PkiWriteExternalPolicyIssuePolicyResponseFromJSON,
    PkiWriteExternalPolicyIssuePolicyResponseToJSON,
    PkiWriteExternalPolicyIssueRequestFromJSON,
    PkiWriteExternalPolicyIssueRequestToJSON,
    PkiWriteExternalPolicyIssueResponseFromJSON,
    PkiWriteExternalPolicyIssueResponseToJSON,
    PkiWriteExternalPolicyPolicyAcmeAccountKidRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeAccountKidRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeNewAccountRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeNewAccountRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeNewOrderRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeNewOrderRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeOrdersRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeOrdersRequestToJSON,
    PkiWriteExternalPolicyPolicyAcmeRevokeCertRequestFromJSON,
    PkiWriteExternalPolicyPolicyAcmeRevokeCertRequestToJSON,
    PkiWriteExternalPolicySignIntermediatePolicyRequestFromJSON,
    PkiWriteExternalPolicySignIntermediatePolicyRequestToJSON,
    PkiWriteExternalPolicySignIntermediatePolicyResponseFromJSON,
    PkiWriteExternalPolicySignIntermediatePolicyResponseToJSON,
    PkiWriteExternalPolicySignIntermediateRequestFromJSON,
    PkiWriteExternalPolicySignIntermediateRequestToJSON,
    PkiWriteExternalPolicySignIntermediateResponseFromJSON,
    PkiWriteExternalPolicySignIntermediateResponseToJSON,
    PkiWriteExternalPolicySignPolicyRequestFromJSON,
    PkiWriteExternalPolicySignPolicyRequestToJSON,
    PkiWriteExternalPolicySignPolicyResponseFromJSON,
    PkiWriteExternalPolicySignPolicyResponseToJSON,
    PkiWriteExternalPolicySignRequestFromJSON,
    PkiWriteExternalPolicySignRequestToJSON,
    PkiWriteExternalPolicySignResponseFromJSON,
    PkiWriteExternalPolicySignResponseToJSON,
    PkiWriteIssuerIssuerRefAcmeAccountKidRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeAccountKidRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeNewAccountRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeNewAccountRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeNewOrderRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeNewOrderRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeOrdersRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeOrdersRequestToJSON,
    PkiWriteIssuerIssuerRefAcmeRevokeCertRequestFromJSON,
    PkiWriteIssuerIssuerRefAcmeRevokeCertRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponseFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponseToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssueRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssueRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssueResponseFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyIssueResponseToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponseFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponseToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponseFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponseToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponseFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponseToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignRequestFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignRequestToJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignResponseFromJSON,
    PkiWriteIssuerIssuerRefExternalPolicySignResponseToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequestToJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequestFromJSON,
    PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequestToJSON,
    PkiWriteIssuerRequestFromJSON,
    PkiWriteIssuerRequestToJSON,
    PkiWriteIssuerResponseFromJSON,
    PkiWriteIssuerResponseToJSON,
    PkiWriteKeyRequestFromJSON,
    PkiWriteKeyRequestToJSON,
    PkiWriteKeyResponseFromJSON,
    PkiWriteKeyResponseToJSON,
    PkiWriteRoleRequestFromJSON,
    PkiWriteRoleRequestToJSON,
    PkiWriteRoleResponseFromJSON,
    PkiWriteRoleResponseToJSON,
    PkiWriteRolesRoleAcmeAccountKidRequestFromJSON,
    PkiWriteRolesRoleAcmeAccountKidRequestToJSON,
    PkiWriteRolesRoleAcmeAuthorizationAuthIdRequestFromJSON,
    PkiWriteRolesRoleAcmeAuthorizationAuthIdRequestToJSON,
    PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequestFromJSON,
    PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON,
    PkiWriteRolesRoleAcmeNewAccountRequestFromJSON,
    PkiWriteRolesRoleAcmeNewAccountRequestToJSON,
    PkiWriteRolesRoleAcmeNewOrderRequestFromJSON,
    PkiWriteRolesRoleAcmeNewOrderRequestToJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdCertRequestFromJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdCertRequestToJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequestFromJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdRequestFromJSON,
    PkiWriteRolesRoleAcmeOrderOrderIdRequestToJSON,
    PkiWriteRolesRoleAcmeOrdersRequestFromJSON,
    PkiWriteRolesRoleAcmeOrdersRequestToJSON,
    PkiWriteRolesRoleAcmeRevokeCertRequestFromJSON,
    PkiWriteRolesRoleAcmeRevokeCertRequestToJSON,
    RabbitMqConfigureConnectionRequestFromJSON,
    RabbitMqConfigureConnectionRequestToJSON,
    RabbitMqConfigureLeaseRequestFromJSON,
    RabbitMqConfigureLeaseRequestToJSON,
    RabbitMqWriteRoleRequestFromJSON,
    RabbitMqWriteRoleRequestToJSON,
    SshConfigureCaRequestFromJSON,
    SshConfigureCaRequestToJSON,
    SshConfigureZeroAddressRequestFromJSON,
    SshConfigureZeroAddressRequestToJSON,
    SshGenerateCredentialsRequestFromJSON,
    SshGenerateCredentialsRequestToJSON,
    SshIssueCertificateRequestFromJSON,
    SshIssueCertificateRequestToJSON,
    SshListRolesByIpRequestFromJSON,
    SshListRolesByIpRequestToJSON,
    SshSignCertificateRequestFromJSON,
    SshSignCertificateRequestToJSON,
    SshVerifyOtpRequestFromJSON,
    SshVerifyOtpRequestToJSON,
    SshWriteRoleRequestFromJSON,
    SshWriteRoleRequestToJSON,
    StandardListResponseFromJSON,
    StandardListResponseToJSON,
    TerraformCloudConfigureRequestFromJSON,
    TerraformCloudConfigureRequestToJSON,
    TerraformCloudWriteRoleRequestFromJSON,
    TerraformCloudWriteRoleRequestToJSON,
    TotpCreateKeyRequestFromJSON,
    TotpCreateKeyRequestToJSON,
    TotpValidateCodeRequestFromJSON,
    TotpValidateCodeRequestToJSON,
    TransformApplyStoreSchemaRequestFromJSON,
    TransformApplyStoreSchemaRequestToJSON,
    TransformCheckTokenizedRequestFromJSON,
    TransformCheckTokenizedRequestToJSON,
    TransformConfigureCacheRequestFromJSON,
    TransformConfigureCacheRequestToJSON,
    TransformConfigureNamedEncryptionKeyRequestFromJSON,
    TransformConfigureNamedEncryptionKeyRequestToJSON,
    TransformCreateFpeTransformationWithImportedKeysRequestFromJSON,
    TransformCreateFpeTransformationWithImportedKeysRequestToJSON,
    TransformCreateTokenizationTransformationWithImportedKeysRequestFromJSON,
    TransformCreateTokenizationTransformationWithImportedKeysRequestToJSON,
    TransformDecodeRequestFromJSON,
    TransformDecodeRequestToJSON,
    TransformDecodeWithFormatRequestFromJSON,
    TransformDecodeWithFormatRequestToJSON,
    TransformEncodeRequestFromJSON,
    TransformEncodeRequestToJSON,
    TransformExportDecodedTokenizationTokensRequestFromJSON,
    TransformExportDecodedTokenizationTokensRequestToJSON,
    TransformImportKeyVersionIntoTokenizationTransformationRequestFromJSON,
    TransformImportKeyVersionIntoTokenizationTransformationRequestToJSON,
    TransformLookUpTokenRequestFromJSON,
    TransformLookUpTokenRequestToJSON,
    TransformRestoreTokenizationStateRequestFromJSON,
    TransformRestoreTokenizationStateRequestToJSON,
    TransformRetrieveTokenMetadataRequestFromJSON,
    TransformRetrieveTokenMetadataRequestToJSON,
    TransformSnapshotTokenizationStateRequestFromJSON,
    TransformSnapshotTokenizationStateRequestToJSON,
    TransformTrimKeyVersionsRequestFromJSON,
    TransformTrimKeyVersionsRequestToJSON,
    TransformValidateTokenRequestFromJSON,
    TransformValidateTokenRequestToJSON,
    TransformWriteAlphabetRequestFromJSON,
    TransformWriteAlphabetRequestToJSON,
    TransformWriteFpeTransformationRequestFromJSON,
    TransformWriteFpeTransformationRequestToJSON,
    TransformWriteMaskingTransformationRequestFromJSON,
    TransformWriteMaskingTransformationRequestToJSON,
    TransformWriteRoleRequestFromJSON,
    TransformWriteRoleRequestToJSON,
    TransformWriteStoreRequestFromJSON,
    TransformWriteStoreRequestToJSON,
    TransformWriteTemplateRequestFromJSON,
    TransformWriteTemplateRequestToJSON,
    TransformWriteTokenizationTransformationRequestFromJSON,
    TransformWriteTokenizationTransformationRequestToJSON,
    TransformWriteTransformationRequestFromJSON,
    TransformWriteTransformationRequestToJSON,
    TransitConfigureCacheRequestFromJSON,
    TransitConfigureCacheRequestToJSON,
    TransitConfigureKeyRequestFromJSON,
    TransitConfigureKeyRequestToJSON,
    TransitConfigureKeysRequestFromJSON,
    TransitConfigureKeysRequestToJSON,
    TransitCreateKeyRequestFromJSON,
    TransitCreateKeyRequestToJSON,
    TransitDecryptRequestFromJSON,
    TransitDecryptRequestToJSON,
    TransitEncryptRequestFromJSON,
    TransitEncryptRequestToJSON,
    TransitGenerateCmacRequestFromJSON,
    TransitGenerateCmacRequestToJSON,
    TransitGenerateCmacWithMacLengthRequestFromJSON,
    TransitGenerateCmacWithMacLengthRequestToJSON,
    TransitGenerateCsrForKeyRequestFromJSON,
    TransitGenerateCsrForKeyRequestToJSON,
    TransitGenerateDataKeyRequestFromJSON,
    TransitGenerateDataKeyRequestToJSON,
    TransitGenerateHmacRequestFromJSON,
    TransitGenerateHmacRequestToJSON,
    TransitGenerateHmacWithAlgorithmRequestFromJSON,
    TransitGenerateHmacWithAlgorithmRequestToJSON,
    TransitGenerateRandomRequestFromJSON,
    TransitGenerateRandomRequestToJSON,
    TransitGenerateRandomWithBytesRequestFromJSON,
    TransitGenerateRandomWithBytesRequestToJSON,
    TransitGenerateRandomWithSourceAndBytesRequestFromJSON,
    TransitGenerateRandomWithSourceAndBytesRequestToJSON,
    TransitGenerateRandomWithSourceRequestFromJSON,
    TransitGenerateRandomWithSourceRequestToJSON,
    TransitHashRequestFromJSON,
    TransitHashRequestToJSON,
    TransitHashWithAlgorithmRequestFromJSON,
    TransitHashWithAlgorithmRequestToJSON,
    TransitImportKeyRequestFromJSON,
    TransitImportKeyRequestToJSON,
    TransitImportKeyVersionRequestFromJSON,
    TransitImportKeyVersionRequestToJSON,
    TransitRestoreAndRenameKeyRequestFromJSON,
    TransitRestoreAndRenameKeyRequestToJSON,
    TransitRestoreKeyRequestFromJSON,
    TransitRestoreKeyRequestToJSON,
    TransitRewrapRequestFromJSON,
    TransitRewrapRequestToJSON,
    TransitRotateKeyRequestFromJSON,
    TransitRotateKeyRequestToJSON,
    TransitSetCertificateForKeyRequestFromJSON,
    TransitSetCertificateForKeyRequestToJSON,
    TransitSignRequestFromJSON,
    TransitSignRequestToJSON,
    TransitSignWithAlgorithmRequestFromJSON,
    TransitSignWithAlgorithmRequestToJSON,
    TransitTrimKeyRequestFromJSON,
    TransitTrimKeyRequestToJSON,
    TransitVerifyRequestFromJSON,
    TransitVerifyRequestToJSON,
    TransitVerifyWithAlgorithmRequestFromJSON,
    TransitVerifyWithAlgorithmRequestToJSON,
} from '../models/index';

export interface SecretsApiAliCloudConfigureOperationRequest {
    alicloud_mount_path: string;
    AliCloudConfigureRequest: AliCloudConfigureRequest;
}

export interface SecretsApiAliCloudDeleteConfigurationRequest {
    alicloud_mount_path: string;
}

export interface SecretsApiAliCloudDeleteRoleRequest {
    name: string;
    alicloud_mount_path: string;
}

export interface SecretsApiAliCloudGenerateCredentialsRequest {
    name: string;
    alicloud_mount_path: string;
}

export interface SecretsApiAliCloudListRolesRequest {
    alicloud_mount_path: string;
    list: AliCloudListRolesListEnum;
}

export interface SecretsApiAliCloudReadConfigurationRequest {
    alicloud_mount_path: string;
}

export interface SecretsApiAliCloudReadRoleRequest {
    name: string;
    alicloud_mount_path: string;
}

export interface SecretsApiAliCloudWriteRoleOperationRequest {
    name: string;
    alicloud_mount_path: string;
    AliCloudWriteRoleRequest: AliCloudWriteRoleRequest;
}

export interface SecretsApiAwsConfigureLeaseOperationRequest {
    aws_mount_path: string;
    AwsConfigureLeaseRequest: AwsConfigureLeaseRequest;
}

export interface SecretsApiAwsConfigureRootIamCredentialsOperationRequest {
    aws_mount_path: string;
    AwsConfigureRootIamCredentialsRequest: AwsConfigureRootIamCredentialsRequest;
}

export interface SecretsApiAwsDeleteRoleRequest {
    name: string;
    aws_mount_path: string;
}

export interface SecretsApiAwsDeleteStaticRolesNameRequest {
    name: string;
    aws_mount_path: string;
}

export interface SecretsApiAwsGenerateCredentialsRequest {
    name: string;
    aws_mount_path: string;
    role_arn?: string;
    role_session_name?: string;
    ttl?: string;
}

export interface SecretsApiAwsGenerateCredentialsWithParametersOperationRequest {
    name: string;
    aws_mount_path: string;
    AwsGenerateCredentialsWithParametersRequest: AwsGenerateCredentialsWithParametersRequest;
}

export interface SecretsApiAwsGenerateStsCredentialsRequest {
    name: string;
    aws_mount_path: string;
    role_arn?: string;
    role_session_name?: string;
    ttl?: string;
}

export interface SecretsApiAwsGenerateStsCredentialsWithParametersOperationRequest {
    name: string;
    aws_mount_path: string;
    AwsGenerateStsCredentialsWithParametersRequest: AwsGenerateStsCredentialsWithParametersRequest;
}

export interface SecretsApiAwsListRolesRequest {
    aws_mount_path: string;
    list: AwsListRolesListEnum;
}

export interface SecretsApiAwsListStaticRolesRequest {
    aws_mount_path: string;
    list: AwsListStaticRolesListEnum;
}

export interface SecretsApiAwsReadLeaseConfigurationRequest {
    aws_mount_path: string;
}

export interface SecretsApiAwsReadRoleRequest {
    name: string;
    aws_mount_path: string;
}

export interface SecretsApiAwsReadRootIamCredentialsConfigurationRequest {
    aws_mount_path: string;
}

export interface SecretsApiAwsReadStaticCredsNameRequest {
    name: string;
    aws_mount_path: string;
}

export interface SecretsApiAwsReadStaticRolesNameRequest {
    name: string;
    aws_mount_path: string;
}

export interface SecretsApiAwsRotateRootIamCredentialsRequest {
    aws_mount_path: string;
}

export interface SecretsApiAwsWriteRoleOperationRequest {
    name: string;
    aws_mount_path: string;
    AwsWriteRoleRequest: AwsWriteRoleRequest;
}

export interface SecretsApiAwsWriteStaticRolesNameOperationRequest {
    name: string;
    aws_mount_path: string;
    AwsWriteStaticRolesNameRequest: AwsWriteStaticRolesNameRequest;
}

export interface SecretsApiAzureConfigureOperationRequest {
    azure_mount_path: string;
    AzureConfigureRequest: AzureConfigureRequest;
}

export interface SecretsApiAzureDeleteConfigurationRequest {
    azure_mount_path: string;
}

export interface SecretsApiAzureDeleteRoleRequest {
    name: string;
    azure_mount_path: string;
}

export interface SecretsApiAzureListRolesRequest {
    azure_mount_path: string;
    list: AzureListRolesListEnum;
}

export interface SecretsApiAzureReadConfigurationRequest {
    azure_mount_path: string;
}

export interface SecretsApiAzureReadRoleRequest {
    name: string;
    azure_mount_path: string;
}

export interface SecretsApiAzureRequestServicePrincipalCredentialsRequest {
    role: string;
    azure_mount_path: string;
}

export interface SecretsApiAzureRotateRootRequest {
    azure_mount_path: string;
}

export interface SecretsApiAzureWriteRoleOperationRequest {
    name: string;
    azure_mount_path: string;
    AzureWriteRoleRequest: AzureWriteRoleRequest;
}

export interface SecretsApiConsulConfigureAccessOperationRequest {
    consul_mount_path: string;
    ConsulConfigureAccessRequest: ConsulConfigureAccessRequest;
}

export interface SecretsApiConsulDeleteRoleRequest {
    name: string;
    consul_mount_path: string;
}

export interface SecretsApiConsulGenerateCredentialsRequest {
    role: string;
    consul_mount_path: string;
}

export interface SecretsApiConsulListRolesRequest {
    consul_mount_path: string;
    list: ConsulListRolesListEnum;
}

export interface SecretsApiConsulReadAccessConfigurationRequest {
    consul_mount_path: string;
}

export interface SecretsApiConsulReadRoleRequest {
    name: string;
    consul_mount_path: string;
}

export interface SecretsApiConsulWriteRoleOperationRequest {
    name: string;
    consul_mount_path: string;
    ConsulWriteRoleRequest: ConsulWriteRoleRequest;
}

export interface SecretsApiCubbyholeDeleteRequest {
    path: string;
}

export interface SecretsApiCubbyholeListRequest {
    path: string;
    list: CubbyholeListListEnum;
}

export interface SecretsApiCubbyholeReadRequest {
    path: string;
}

export interface SecretsApiCubbyholeWriteRequest {
    path: string;
    request_body: { [key: string]: any; };
}

export interface SecretsApiDatabaseConfigureConnectionOperationRequest {
    name: string;
    database_mount_path: string;
    DatabaseConfigureConnectionRequest: DatabaseConfigureConnectionRequest;
}

export interface SecretsApiDatabaseDeleteConnectionConfigurationRequest {
    name: string;
    database_mount_path: string;
}

export interface SecretsApiDatabaseDeleteRoleRequest {
    name: string;
    database_mount_path: string;
}

export interface SecretsApiDatabaseDeleteStaticRoleRequest {
    name: string;
    database_mount_path: string;
}

export interface SecretsApiDatabaseGenerateCredentialsRequest {
    name: string;
    database_mount_path: string;
}

export interface SecretsApiDatabaseListConnectionsRequest {
    database_mount_path: string;
    list: DatabaseListConnectionsListEnum;
}

export interface SecretsApiDatabaseListRolesRequest {
    database_mount_path: string;
    list: DatabaseListRolesListEnum;
}

export interface SecretsApiDatabaseListStaticRolesRequest {
    database_mount_path: string;
    list: DatabaseListStaticRolesListEnum;
}

export interface SecretsApiDatabaseReadConnectionConfigurationRequest {
    name: string;
    database_mount_path: string;
}

export interface SecretsApiDatabaseReadRoleRequest {
    name: string;
    database_mount_path: string;
}

export interface SecretsApiDatabaseReadStaticRoleRequest {
    name: string;
    database_mount_path: string;
}

export interface SecretsApiDatabaseReadStaticRoleCredentialsRequest {
    name: string;
    database_mount_path: string;
}

export interface SecretsApiDatabaseReloadPluginRequest {
    plugin_name: string;
    database_mount_path: string;
}

export interface SecretsApiDatabaseResetConnectionRequest {
    name: string;
    database_mount_path: string;
}

export interface SecretsApiDatabaseRotateRootCredentialsRequest {
    name: string;
    database_mount_path: string;
}

export interface SecretsApiDatabaseRotateStaticRoleCredentialsRequest {
    name: string;
    database_mount_path: string;
}

export interface SecretsApiDatabaseWriteRoleOperationRequest {
    name: string;
    database_mount_path: string;
    DatabaseWriteRoleRequest: DatabaseWriteRoleRequest;
}

export interface SecretsApiDatabaseWriteStaticRoleOperationRequest {
    name: string;
    database_mount_path: string;
    DatabaseWriteStaticRoleRequest: DatabaseWriteStaticRoleRequest;
}

export interface SecretsApiGoogleCloudConfigureOperationRequest {
    gcp_mount_path: string;
    GoogleCloudConfigureRequest: GoogleCloudConfigureRequest;
}

export interface SecretsApiGoogleCloudDeleteImpersonatedAccountRequest {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudDeleteRolesetRequest {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudDeleteStaticAccountRequest {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudGenerateImpersonatedAccountAccessTokenRequest {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudGenerateImpersonatedAccountAccessToken2Request {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudGenerateRolesetAccessTokenRequest {
    roleset: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudGenerateRolesetAccessToken2Request {
    roleset: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudGenerateRolesetAccessToken3Request {
    roleset: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudGenerateRolesetAccessToken4Request {
    roleset: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudGenerateRolesetKeyOperationRequest {
    roleset: string;
    gcp_mount_path: string;
    GoogleCloudGenerateRolesetKeyRequest: GoogleCloudGenerateRolesetKeyRequest;
}

export interface SecretsApiGoogleCloudGenerateRolesetKey2Request {
    roleset: string;
    gcp_mount_path: string;
    key_algorithm?: string;
    key_type?: string;
    ttl?: string;
}

export interface SecretsApiGoogleCloudGenerateRolesetKey3OperationRequest {
    roleset: string;
    gcp_mount_path: string;
    GoogleCloudGenerateRolesetKey3Request: GoogleCloudGenerateRolesetKey3Request;
}

export interface SecretsApiGoogleCloudGenerateRolesetKey4Request {
    roleset: string;
    gcp_mount_path: string;
    key_algorithm?: string;
    key_type?: string;
    ttl?: string;
}

export interface SecretsApiGoogleCloudGenerateStaticAccountAccessTokenRequest {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudGenerateStaticAccountAccessToken2Request {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudGenerateStaticAccountKeyOperationRequest {
    name: string;
    gcp_mount_path: string;
    GoogleCloudGenerateStaticAccountKeyRequest: GoogleCloudGenerateStaticAccountKeyRequest;
}

export interface SecretsApiGoogleCloudGenerateStaticAccountKey2Request {
    name: string;
    gcp_mount_path: string;
    key_algorithm?: string;
    key_type?: string;
    ttl?: string;
}

export interface SecretsApiGoogleCloudKmsConfigureOperationRequest {
    gcpkms_mount_path: string;
    GoogleCloudKmsConfigureRequest: GoogleCloudKmsConfigureRequest;
}

export interface SecretsApiGoogleCloudKmsConfigureKeyOperationRequest {
    key: string;
    gcpkms_mount_path: string;
    GoogleCloudKmsConfigureKeyRequest: GoogleCloudKmsConfigureKeyRequest;
}

export interface SecretsApiGoogleCloudKmsDecryptOperationRequest {
    key: string;
    gcpkms_mount_path: string;
    GoogleCloudKmsDecryptRequest: GoogleCloudKmsDecryptRequest;
}

export interface SecretsApiGoogleCloudKmsDeleteConfigurationRequest {
    gcpkms_mount_path: string;
}

export interface SecretsApiGoogleCloudKmsDeleteKeyRequest {
    key: string;
    gcpkms_mount_path: string;
}

export interface SecretsApiGoogleCloudKmsDeregisterKeyRequest {
    key: string;
    gcpkms_mount_path: string;
}

export interface SecretsApiGoogleCloudKmsDeregisterKey2Request {
    key: string;
    gcpkms_mount_path: string;
}

export interface SecretsApiGoogleCloudKmsEncryptOperationRequest {
    key: string;
    gcpkms_mount_path: string;
    GoogleCloudKmsEncryptRequest: GoogleCloudKmsEncryptRequest;
}

export interface SecretsApiGoogleCloudKmsListKeysRequest {
    gcpkms_mount_path: string;
    list: GoogleCloudKmsListKeysListEnum;
}

export interface SecretsApiGoogleCloudKmsReadConfigurationRequest {
    gcpkms_mount_path: string;
}

export interface SecretsApiGoogleCloudKmsReadKeyRequest {
    key: string;
    gcpkms_mount_path: string;
}

export interface SecretsApiGoogleCloudKmsReadKeyConfigurationRequest {
    key: string;
    gcpkms_mount_path: string;
}

export interface SecretsApiGoogleCloudKmsReencryptOperationRequest {
    key: string;
    gcpkms_mount_path: string;
    GoogleCloudKmsReencryptRequest: GoogleCloudKmsReencryptRequest;
}

export interface SecretsApiGoogleCloudKmsRegisterKeyOperationRequest {
    key: string;
    gcpkms_mount_path: string;
    GoogleCloudKmsRegisterKeyRequest: GoogleCloudKmsRegisterKeyRequest;
}

export interface SecretsApiGoogleCloudKmsRetrievePublicKeyRequest {
    key: string;
    gcpkms_mount_path: string;
}

export interface SecretsApiGoogleCloudKmsRotateKeyRequest {
    key: string;
    gcpkms_mount_path: string;
}

export interface SecretsApiGoogleCloudKmsSignOperationRequest {
    key: string;
    gcpkms_mount_path: string;
    GoogleCloudKmsSignRequest: GoogleCloudKmsSignRequest;
}

export interface SecretsApiGoogleCloudKmsTrimKeyVersionsRequest {
    key: string;
    gcpkms_mount_path: string;
}

export interface SecretsApiGoogleCloudKmsTrimKeyVersions2Request {
    key: string;
    gcpkms_mount_path: string;
}

export interface SecretsApiGoogleCloudKmsVerifyOperationRequest {
    key: string;
    gcpkms_mount_path: string;
    GoogleCloudKmsVerifyRequest: GoogleCloudKmsVerifyRequest;
}

export interface SecretsApiGoogleCloudKmsWriteKeyOperationRequest {
    key: string;
    gcpkms_mount_path: string;
    GoogleCloudKmsWriteKeyRequest: GoogleCloudKmsWriteKeyRequest;
}

export interface SecretsApiGoogleCloudListImpersonatedAccountsRequest {
    gcp_mount_path: string;
    list: GoogleCloudListImpersonatedAccountsListEnum;
}

export interface SecretsApiGoogleCloudListImpersonatedAccounts2Request {
    gcp_mount_path: string;
    list: GoogleCloudListImpersonatedAccounts2ListEnum;
}

export interface SecretsApiGoogleCloudListRolesetsRequest {
    gcp_mount_path: string;
    list: GoogleCloudListRolesetsListEnum;
}

export interface SecretsApiGoogleCloudListRolesets2Request {
    gcp_mount_path: string;
    list: GoogleCloudListRolesets2ListEnum;
}

export interface SecretsApiGoogleCloudListStaticAccountsRequest {
    gcp_mount_path: string;
    list: GoogleCloudListStaticAccountsListEnum;
}

export interface SecretsApiGoogleCloudListStaticAccounts2Request {
    gcp_mount_path: string;
    list: GoogleCloudListStaticAccounts2ListEnum;
}

export interface SecretsApiGoogleCloudReadConfigurationRequest {
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudReadImpersonatedAccountRequest {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudReadRolesetRequest {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudReadStaticAccountRequest {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudRotateRolesetRequest {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudRotateRolesetKeyRequest {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudRotateRootCredentialsRequest {
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudRotateStaticAccountKeyRequest {
    name: string;
    gcp_mount_path: string;
}

export interface SecretsApiGoogleCloudWriteImpersonatedAccountOperationRequest {
    name: string;
    gcp_mount_path: string;
    GoogleCloudWriteImpersonatedAccountRequest: GoogleCloudWriteImpersonatedAccountRequest;
}

export interface SecretsApiGoogleCloudWriteRolesetOperationRequest {
    name: string;
    gcp_mount_path: string;
    GoogleCloudWriteRolesetRequest: GoogleCloudWriteRolesetRequest;
}

export interface SecretsApiGoogleCloudWriteStaticAccountOperationRequest {
    name: string;
    gcp_mount_path: string;
    GoogleCloudWriteStaticAccountRequest: GoogleCloudWriteStaticAccountRequest;
}

export interface SecretsApiKeyManagementDeleteKeyRequest {
    name: string;
    keymgmt_mount_path: string;
}

export interface SecretsApiKeyManagementDeleteKeyInKmsProviderRequest {
    key_name: string;
    name: string;
    keymgmt_mount_path: string;
}

export interface SecretsApiKeyManagementDeleteKmsProviderRequest {
    name: string;
    keymgmt_mount_path: string;
}

export interface SecretsApiKeyManagementDistributeKeyInKmsProviderOperationRequest {
    key_name: string;
    name: string;
    keymgmt_mount_path: string;
    KeyManagementDistributeKeyInKmsProviderRequest: KeyManagementDistributeKeyInKmsProviderRequest;
}

export interface SecretsApiKeyManagementListKeysRequest {
    keymgmt_mount_path: string;
    list: KeyManagementListKeysListEnum;
}

export interface SecretsApiKeyManagementListKeysInKmsProviderRequest {
    name: string;
    keymgmt_mount_path: string;
    list: KeyManagementListKeysInKmsProviderListEnum;
}

export interface SecretsApiKeyManagementListKmsProvidersRequest {
    keymgmt_mount_path: string;
    list: KeyManagementListKmsProvidersListEnum;
}

export interface SecretsApiKeyManagementListKmsProvidersForKeyRequest {
    name: string;
    keymgmt_mount_path: string;
    list: KeyManagementListKmsProvidersForKeyListEnum;
}

export interface SecretsApiKeyManagementReadKeyRequest {
    name: string;
    keymgmt_mount_path: string;
}

export interface SecretsApiKeyManagementReadKeyInKmsProviderRequest {
    key_name: string;
    name: string;
    keymgmt_mount_path: string;
}

export interface SecretsApiKeyManagementReadKmsProviderRequest {
    name: string;
    keymgmt_mount_path: string;
}

export interface SecretsApiKeyManagementRotateKeyRequest {
    name: string;
    keymgmt_mount_path: string;
}

export interface SecretsApiKeyManagementUpdateKeyOperationRequest {
    name: string;
    keymgmt_mount_path: string;
    KeyManagementUpdateKeyRequest: KeyManagementUpdateKeyRequest;
}

export interface SecretsApiKeyManagementWriteKmsProviderOperationRequest {
    name: string;
    keymgmt_mount_path: string;
    KeyManagementWriteKmsProviderRequest: KeyManagementWriteKmsProviderRequest;
}

export interface SecretsApiKmipConfigureOperationRequest {
    kmip_mount_path: string;
    KmipConfigureRequest: KmipConfigureRequest;
}

export interface SecretsApiKmipCreateScopeOperationRequest {
    scope: string;
    kmip_mount_path: string;
    KmipCreateScopeRequest: KmipCreateScopeRequest;
}

export interface SecretsApiKmipDeleteRoleRequest {
    role: string;
    scope: string;
    kmip_mount_path: string;
}

export interface SecretsApiKmipDeleteScopeRequest {
    scope: string;
    kmip_mount_path: string;
    force?: boolean;
}

export interface SecretsApiKmipGenerateClientCertificateOperationRequest {
    role: string;
    scope: string;
    kmip_mount_path: string;
    KmipGenerateClientCertificateRequest: KmipGenerateClientCertificateRequest;
}

export interface SecretsApiKmipListClientCertificatesRequest {
    role: string;
    scope: string;
    kmip_mount_path: string;
    list: KmipListClientCertificatesListEnum;
}

export interface SecretsApiKmipListRolesRequest {
    scope: string;
    kmip_mount_path: string;
    list: KmipListRolesListEnum;
}

export interface SecretsApiKmipListScopesRequest {
    kmip_mount_path: string;
    list: KmipListScopesListEnum;
}

export interface SecretsApiKmipReadCaPemRequest {
    kmip_mount_path: string;
}

export interface SecretsApiKmipReadConfigurationRequest {
    kmip_mount_path: string;
}

export interface SecretsApiKmipReadRoleRequest {
    role: string;
    scope: string;
    kmip_mount_path: string;
}

export interface SecretsApiKmipRetrieveClientCertificateRequest {
    role: string;
    scope: string;
    kmip_mount_path: string;
}

export interface SecretsApiKmipRevokeClientCertificateOperationRequest {
    role: string;
    scope: string;
    kmip_mount_path: string;
    KmipRevokeClientCertificateRequest: KmipRevokeClientCertificateRequest;
}

export interface SecretsApiKmipSignClientCertificateRequestOperationRequest {
    role: string;
    scope: string;
    kmip_mount_path: string;
    KmipSignClientCertificateRequestRequest: KmipSignClientCertificateRequestRequest;
}

export interface SecretsApiKmipWriteRoleOperationRequest {
    role: string;
    scope: string;
    kmip_mount_path: string;
    KmipWriteRoleRequest: KmipWriteRoleRequest;
}

export interface SecretsApiKubernetesCheckConfigurationRequest {
    kubernetes_mount_path: string;
}

export interface SecretsApiKubernetesConfigureOperationRequest {
    kubernetes_mount_path: string;
    KubernetesConfigureRequest: KubernetesConfigureRequest;
}

export interface SecretsApiKubernetesDeleteConfigurationRequest {
    kubernetes_mount_path: string;
}

export interface SecretsApiKubernetesDeleteRoleRequest {
    name: string;
    kubernetes_mount_path: string;
}

export interface SecretsApiKubernetesGenerateCredentialsOperationRequest {
    name: string;
    kubernetes_mount_path: string;
    KubernetesGenerateCredentialsRequest: KubernetesGenerateCredentialsRequest;
}

export interface SecretsApiKubernetesListRolesRequest {
    kubernetes_mount_path: string;
    list: KubernetesListRolesListEnum;
}

export interface SecretsApiKubernetesReadConfigurationRequest {
    kubernetes_mount_path: string;
}

export interface SecretsApiKubernetesReadRoleRequest {
    name: string;
    kubernetes_mount_path: string;
}

export interface SecretsApiKubernetesWriteRoleOperationRequest {
    name: string;
    kubernetes_mount_path: string;
    KubernetesWriteRoleRequest: KubernetesWriteRoleRequest;
}

export interface SecretsApiKvV1DeleteRequest {
    path: string;
    kv_v1_mount_path: string;
}

export interface SecretsApiKvV1ListRequest {
    path: string;
    kv_v1_mount_path: string;
    list: KvV1ListListEnum;
}

export interface SecretsApiKvV1ReadRequest {
    path: string;
    kv_v1_mount_path: string;
}

export interface SecretsApiKvV1WriteRequest {
    path: string;
    kv_v1_mount_path: string;
    request_body: { [key: string]: any; };
}

export interface SecretsApiKvV2ConfigureOperationRequest {
    kv_v2_mount_path: string;
    KvV2ConfigureRequest: KvV2ConfigureRequest;
}

export interface SecretsApiKvV2DeleteRequest {
    path: string;
    kv_v2_mount_path: string;
}

export interface SecretsApiKvV2DeleteMetadataAndAllVersionsRequest {
    path: string;
    kv_v2_mount_path: string;
}

export interface SecretsApiKvV2DeleteVersionsOperationRequest {
    path: string;
    kv_v2_mount_path: string;
    KvV2DeleteVersionsRequest: KvV2DeleteVersionsRequest;
}

export interface SecretsApiKvV2DestroyVersionsOperationRequest {
    path: string;
    kv_v2_mount_path: string;
    KvV2DestroyVersionsRequest: KvV2DestroyVersionsRequest;
}

export interface SecretsApiKvV2ListRequest {
    path: string;
    kv_v2_mount_path: string;
    list: KvV2ListListEnum;
}

export interface SecretsApiKvV2PatchOperationRequest {
    path: string;
    kv_v2_mount_path: string;
    KvV2PatchRequest: KvV2PatchRequest;
}

export interface SecretsApiKvV2PatchMetadataPathOperationRequest {
    path: string;
    kv_v2_mount_path: string;
    KvV2PatchMetadataPathRequest: KvV2PatchMetadataPathRequest;
}

export interface SecretsApiKvV2ReadRequest {
    path: string;
    kv_v2_mount_path: string;
}

export interface SecretsApiKvV2ReadConfigurationRequest {
    kv_v2_mount_path: string;
}

export interface SecretsApiKvV2ReadMetadataRequest {
    path: string;
    kv_v2_mount_path: string;
}

export interface SecretsApiKvV2ReadSubkeysRequest {
    path: string;
    kv_v2_mount_path: string;
}

export interface SecretsApiKvV2UndeleteVersionsOperationRequest {
    path: string;
    kv_v2_mount_path: string;
    KvV2UndeleteVersionsRequest: KvV2UndeleteVersionsRequest;
}

export interface SecretsApiKvV2WriteOperationRequest {
    path: string;
    kv_v2_mount_path: string;
    KvV2WriteRequest: KvV2WriteRequest;
}

export interface SecretsApiKvV2WriteMetadataOperationRequest {
    path: string;
    kv_v2_mount_path: string;
    KvV2WriteMetadataRequest: KvV2WriteMetadataRequest;
}

export interface SecretsApiLdapConfigureOperationRequest {
    ldap_mount_path: string;
    LdapConfigureRequest: LdapConfigureRequest;
}

export interface SecretsApiLdapDeleteConfigurationRequest {
    ldap_mount_path: string;
}

export interface SecretsApiLdapDeleteDynamicRoleRequest {
    name: string;
    ldap_mount_path: string;
}

export interface SecretsApiLdapDeleteStaticRoleRequest {
    name: string;
    ldap_mount_path: string;
}

export interface SecretsApiLdapLibraryCheckInOperationRequest {
    name: string;
    ldap_mount_path: string;
    LdapLibraryCheckInRequest: LdapLibraryCheckInRequest;
}

export interface SecretsApiLdapLibraryCheckOutOperationRequest {
    name: string;
    ldap_mount_path: string;
    LdapLibraryCheckOutRequest: LdapLibraryCheckOutRequest;
}

export interface SecretsApiLdapLibraryCheckStatusRequest {
    name: string;
    ldap_mount_path: string;
}

export interface SecretsApiLdapLibraryConfigureOperationRequest {
    name: string;
    ldap_mount_path: string;
    LdapLibraryConfigureRequest: LdapLibraryConfigureRequest;
}

export interface SecretsApiLdapLibraryDeleteRequest {
    name: string;
    ldap_mount_path: string;
}

export interface SecretsApiLdapLibraryForceCheckInOperationRequest {
    name: string;
    ldap_mount_path: string;
    LdapLibraryForceCheckInRequest: LdapLibraryForceCheckInRequest;
}

export interface SecretsApiLdapLibraryListRequest {
    ldap_mount_path: string;
    list: LdapLibraryListListEnum;
}

export interface SecretsApiLdapLibraryListLibraryPathRequest {
    path: string;
    ldap_mount_path: string;
    list: LdapLibraryListLibraryPathListEnum;
}

export interface SecretsApiLdapLibraryListLibraryPath0Request {
    path: string;
    ldap_mount_path: string;
    list: LdapLibraryListLibraryPath0ListEnum;
}

export interface SecretsApiLdapLibraryReadRequest {
    name: string;
    ldap_mount_path: string;
}

export interface SecretsApiLdapListDynamicRolesRequest {
    ldap_mount_path: string;
    list: LdapListDynamicRolesListEnum;
}

export interface SecretsApiLdapListRolePathRequest {
    path: string;
    ldap_mount_path: string;
    list: LdapListRolePathListEnum;
}

export interface SecretsApiLdapListRolePath0Request {
    path: string;
    ldap_mount_path: string;
    list: LdapListRolePath0ListEnum;
}

export interface SecretsApiLdapListStaticRolePathRequest {
    path: string;
    ldap_mount_path: string;
    list: LdapListStaticRolePathListEnum;
}

export interface SecretsApiLdapListStaticRolePath0Request {
    path: string;
    ldap_mount_path: string;
    list: LdapListStaticRolePath0ListEnum;
}

export interface SecretsApiLdapListStaticRolesRequest {
    ldap_mount_path: string;
    list: LdapListStaticRolesListEnum;
}

export interface SecretsApiLdapReadConfigurationRequest {
    ldap_mount_path: string;
}

export interface SecretsApiLdapReadDynamicRoleRequest {
    name: string;
    ldap_mount_path: string;
}

export interface SecretsApiLdapReadStaticRoleRequest {
    name: string;
    ldap_mount_path: string;
}

export interface SecretsApiLdapRequestDynamicRoleCredentialsRequest {
    name: string;
    ldap_mount_path: string;
}

export interface SecretsApiLdapRequestStaticRoleCredentialsRequest {
    name: string;
    ldap_mount_path: string;
}

export interface SecretsApiLdapRotateRootCredentialsRequest {
    ldap_mount_path: string;
}

export interface SecretsApiLdapRotateStaticRoleOperationRequest {
    name: string;
    ldap_mount_path: string;
    LdapRotateStaticRoleRequest: LdapRotateStaticRoleRequest;
}

export interface SecretsApiLdapWriteDynamicRoleOperationRequest {
    name: string;
    ldap_mount_path: string;
    LdapWriteDynamicRoleRequest: LdapWriteDynamicRoleRequest;
}

export interface SecretsApiLdapWriteStaticRoleOperationRequest {
    name: string;
    ldap_mount_path: string;
    LdapWriteStaticRoleRequest: LdapWriteStaticRoleRequest;
}

export interface SecretsApiMongoDbAtlasConfigureOperationRequest {
    mongodbatlas_mount_path: string;
    MongoDbAtlasConfigureRequest: MongoDbAtlasConfigureRequest;
}

export interface SecretsApiMongoDbAtlasDeleteRoleRequest {
    name: string;
    mongodbatlas_mount_path: string;
}

export interface SecretsApiMongoDbAtlasGenerateCredentialsRequest {
    name: string;
    mongodbatlas_mount_path: string;
}

export interface SecretsApiMongoDbAtlasGenerateCredentials2Request {
    name: string;
    mongodbatlas_mount_path: string;
}

export interface SecretsApiMongoDbAtlasListRolesRequest {
    mongodbatlas_mount_path: string;
    list: MongoDbAtlasListRolesListEnum;
}

export interface SecretsApiMongoDbAtlasReadConfigurationRequest {
    mongodbatlas_mount_path: string;
}

export interface SecretsApiMongoDbAtlasReadRoleRequest {
    name: string;
    mongodbatlas_mount_path: string;
}

export interface SecretsApiMongoDbAtlasWriteRoleOperationRequest {
    name: string;
    mongodbatlas_mount_path: string;
    MongoDbAtlasWriteRoleRequest: MongoDbAtlasWriteRoleRequest;
}

export interface SecretsApiNomadConfigureAccessOperationRequest {
    nomad_mount_path: string;
    NomadConfigureAccessRequest: NomadConfigureAccessRequest;
}

export interface SecretsApiNomadConfigureLeaseOperationRequest {
    nomad_mount_path: string;
    NomadConfigureLeaseRequest: NomadConfigureLeaseRequest;
}

export interface SecretsApiNomadDeleteAccessConfigurationRequest {
    nomad_mount_path: string;
}

export interface SecretsApiNomadDeleteLeaseConfigurationRequest {
    nomad_mount_path: string;
}

export interface SecretsApiNomadDeleteRoleRequest {
    name: string;
    nomad_mount_path: string;
}

export interface SecretsApiNomadGenerateCredentialsRequest {
    name: string;
    nomad_mount_path: string;
}

export interface SecretsApiNomadListRolesRequest {
    nomad_mount_path: string;
    list: NomadListRolesListEnum;
}

export interface SecretsApiNomadReadAccessConfigurationRequest {
    nomad_mount_path: string;
}

export interface SecretsApiNomadReadLeaseConfigurationRequest {
    nomad_mount_path: string;
}

export interface SecretsApiNomadReadRoleRequest {
    name: string;
    nomad_mount_path: string;
}

export interface SecretsApiNomadWriteRoleOperationRequest {
    name: string;
    nomad_mount_path: string;
    NomadWriteRoleRequest: NomadWriteRoleRequest;
}

export interface SecretsApiPkiConfigureAcmeOperationRequest {
    pki_mount_path: string;
    PkiConfigureAcmeRequest: PkiConfigureAcmeRequest;
}

export interface SecretsApiPkiConfigureAutoTidyOperationRequest {
    pki_mount_path: string;
    PkiConfigureAutoTidyRequest: PkiConfigureAutoTidyRequest;
}

export interface SecretsApiPkiConfigureCaOperationRequest {
    pki_mount_path: string;
    PkiConfigureCaRequest: PkiConfigureCaRequest;
}

export interface SecretsApiPkiConfigureClusterOperationRequest {
    pki_mount_path: string;
    PkiConfigureClusterRequest: PkiConfigureClusterRequest;
}

export interface SecretsApiPkiConfigureCmpOperationRequest {
    pki_mount_path: string;
    PkiConfigureCmpRequest: PkiConfigureCmpRequest;
}

export interface SecretsApiPkiConfigureCrlOperationRequest {
    pki_mount_path: string;
    PkiConfigureCrlRequest: PkiConfigureCrlRequest;
}

export interface SecretsApiPkiConfigureEstOperationRequest {
    pki_mount_path: string;
    PkiConfigureEstRequest: PkiConfigureEstRequest;
}

export interface SecretsApiPkiConfigureExternalPolicyRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiConfigureExternalPolicy0Request {
    pki_mount_path: string;
    PkiConfigureExternalPolicyRequest: PkiConfigureExternalPolicyRequest;
}

export interface SecretsApiPkiConfigureIssuersOperationRequest {
    pki_mount_path: string;
    PkiConfigureIssuersRequest: PkiConfigureIssuersRequest;
}

export interface SecretsApiPkiConfigureKeysOperationRequest {
    pki_mount_path: string;
    PkiConfigureKeysRequest: PkiConfigureKeysRequest;
}

export interface SecretsApiPkiConfigureScepOperationRequest {
    pki_mount_path: string;
    PkiConfigureScepRequest: PkiConfigureScepRequest;
}

export interface SecretsApiPkiConfigureUrlsOperationRequest {
    pki_mount_path: string;
    PkiConfigureUrlsRequest: PkiConfigureUrlsRequest;
}

export interface SecretsApiPkiCrossSignIntermediateOperationRequest {
    pki_mount_path: string;
    PkiCrossSignIntermediateRequest: PkiCrossSignIntermediateRequest;
}

export interface SecretsApiPkiDeleteEabKeyRequest {
    key_id: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiDeleteIssuerRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiDeleteKeyRequest {
    key_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiDeleteRoleRequest {
    name: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiDeleteRootRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiGenerateEabKeyRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiGenerateEabKeyForIssuerRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiGenerateEabKeyForIssuerAndRoleRequest {
    issuer_ref: string;
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiGenerateEabKeyForIssuer0Request {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiGenerateEabKeyForIssuer1Request {
    issuer_ref: string;
    policy: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiGenerateEabKeyForRoleRequest {
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiGenerateEabKey0Request {
    pki_mount_path: string;
}

export interface SecretsApiPkiGenerateEabKey1Request {
    policy: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiGenerateExportedKeyOperationRequest {
    pki_mount_path: string;
    PkiGenerateExportedKeyRequest: PkiGenerateExportedKeyRequest;
}

export interface SecretsApiPkiGenerateIntermediateOperationRequest {
    exported: PkiGenerateIntermediateExportedEnum;
    pki_mount_path: string;
    PkiGenerateIntermediateRequest: PkiGenerateIntermediateRequest;
}

export interface SecretsApiPkiGenerateInternalKeyOperationRequest {
    pki_mount_path: string;
    PkiGenerateInternalKeyRequest: PkiGenerateInternalKeyRequest;
}

export interface SecretsApiPkiGenerateKmsKeyOperationRequest {
    pki_mount_path: string;
    PkiGenerateKmsKeyRequest: PkiGenerateKmsKeyRequest;
}

export interface SecretsApiPkiGenerateRootOperationRequest {
    exported: PkiGenerateRootExportedEnum;
    pki_mount_path: string;
    PkiGenerateRootRequest: PkiGenerateRootRequest;
}

export interface SecretsApiPkiImportKeyOperationRequest {
    pki_mount_path: string;
    PkiImportKeyRequest: PkiImportKeyRequest;
}

export interface SecretsApiPkiIssueWithRoleOperationRequest {
    role: string;
    pki_mount_path: string;
    PkiIssueWithRoleRequest: PkiIssueWithRoleRequest;
}

export interface SecretsApiPkiIssuerIssueWithRoleOperationRequest {
    issuer_ref: string;
    role: string;
    pki_mount_path: string;
    PkiIssuerIssueWithRoleRequest: PkiIssuerIssueWithRoleRequest;
}

export interface SecretsApiPkiIssuerReadCrlRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiIssuerReadCrlDeltaRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiIssuerReadCrlDeltaDerRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiIssuerReadCrlDeltaPemRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiIssuerReadCrlDerRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiIssuerReadCrlPemRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiIssuerReadUnifiedCrlRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiIssuerReadUnifiedCrlDeltaRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiIssuerReadUnifiedCrlDeltaDerRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiIssuerReadUnifiedCrlDeltaPemRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiIssuerReadUnifiedCrlDerRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiIssuerReadUnifiedCrlPemRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiIssuerResignCrlsOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiIssuerResignCrlsRequest: PkiIssuerResignCrlsRequest;
}

export interface SecretsApiPkiIssuerSignIntermediateOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiIssuerSignIntermediateRequest: PkiIssuerSignIntermediateRequest;
}

export interface SecretsApiPkiIssuerSignRevocationListOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiIssuerSignRevocationListRequest: PkiIssuerSignRevocationListRequest;
}

export interface SecretsApiPkiIssuerSignSelfIssuedOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiIssuerSignSelfIssuedRequest: PkiIssuerSignSelfIssuedRequest;
}

export interface SecretsApiPkiIssuerSignVerbatimOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiIssuerSignVerbatimRequest: PkiIssuerSignVerbatimRequest;
}

export interface SecretsApiPkiIssuerSignVerbatimWithRoleOperationRequest {
    issuer_ref: string;
    role: string;
    pki_mount_path: string;
    PkiIssuerSignVerbatimWithRoleRequest: PkiIssuerSignVerbatimWithRoleRequest;
}

export interface SecretsApiPkiIssuerSignWithRoleOperationRequest {
    issuer_ref: string;
    role: string;
    pki_mount_path: string;
    PkiIssuerSignWithRoleRequest: PkiIssuerSignWithRoleRequest;
}

export interface SecretsApiPkiIssuersGenerateIntermediateOperationRequest {
    exported: PkiIssuersGenerateIntermediateExportedEnum;
    pki_mount_path: string;
    PkiIssuersGenerateIntermediateRequest: PkiIssuersGenerateIntermediateRequest;
}

export interface SecretsApiPkiIssuersGenerateRootOperationRequest {
    exported: PkiIssuersGenerateRootExportedEnum;
    pki_mount_path: string;
    PkiIssuersGenerateRootRequest: PkiIssuersGenerateRootRequest;
}

export interface SecretsApiPkiIssuersImportBundleOperationRequest {
    pki_mount_path: string;
    PkiIssuersImportBundleRequest: PkiIssuersImportBundleRequest;
}

export interface SecretsApiPkiIssuersImportCertOperationRequest {
    pki_mount_path: string;
    PkiIssuersImportCertRequest: PkiIssuersImportCertRequest;
}

export interface SecretsApiPkiListAcmeAccountKeysRequest {
    pki_mount_path: string;
    list: PkiListAcmeAccountKeysListEnum;
}

export interface SecretsApiPkiListCertMetadataRequest {
    pki_mount_path: string;
    list: PkiListCertMetadataListEnum;
}

export interface SecretsApiPkiListCertsRequest {
    pki_mount_path: string;
    list: PkiListCertsListEnum;
}

export interface SecretsApiPkiListCertsRevocationQueueRequest {
    pki_mount_path: string;
    list: PkiListCertsRevocationQueueListEnum;
}

export interface SecretsApiPkiListEabKeysRequest {
    pki_mount_path: string;
    list: PkiListEabKeysListEnum;
}

export interface SecretsApiPkiListIssuersRequest {
    pki_mount_path: string;
    list: PkiListIssuersListEnum;
}

export interface SecretsApiPkiListKeysRequest {
    pki_mount_path: string;
    list: PkiListKeysListEnum;
}

export interface SecretsApiPkiListRevokedCertsRequest {
    pki_mount_path: string;
    list: PkiListRevokedCertsListEnum;
}

export interface SecretsApiPkiListRolesRequest {
    pki_mount_path: string;
    list: PkiListRolesListEnum;
}

export interface SecretsApiPkiListUnifiedRevokedCertsRequest {
    pki_mount_path: string;
    list: PkiListUnifiedRevokedCertsListEnum;
}

export interface SecretsApiPkiPatchIssuerOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiPatchIssuerRequest: PkiPatchIssuerRequest;
}

export interface SecretsApiPkiPatchRoleOperationRequest {
    name: string;
    pki_mount_path: string;
    PkiPatchRoleRequest: PkiPatchRoleRequest;
}

export interface SecretsApiPkiQueryOcspRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiQueryOcspWithGetReqRequest {
    req: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiQueryUnifiedOcspRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiQueryUnifiedOcspWithGetReqRequest {
    req: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadAcmeConfigurationRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadAcmeDirectoryRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadAcmeKeyIdRequest {
    keyid: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadAcmeNewNonceRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadAutoTidyConfigurationRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCaChainPemRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCaDerRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCaPemRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCertRequest {
    serial: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCertCaChainRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCertCrlRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCertDeltaCrlRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCertMetadataRequest {
    serial: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCertRawDerRequest {
    serial: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCertRawPemRequest {
    serial: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCertUnifiedCrlRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCertUnifiedDeltaCrlRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadClusterConfigurationRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCmpv2ConfigurationRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCrlConfigurationRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCrlDeltaRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCrlDeltaPemRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCrlDerRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadCrlPemRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadEstCacertsRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadEstConfigurationRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadExternalPolicyAcmeDirectoryRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadExternalPolicyAcmeNewNonceRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadExternalPolicyPolicyAcmeDirectoryRequest {
    policy: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadExternalPolicyPolicyAcmeNewNonceRequest {
    policy: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuerRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuerDerRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefAcmeDirectoryRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefAcmeNewNonceRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefExternalPolicyAcmeDirectoryRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefExternalPolicyAcmeNewNonceRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectoryRequest {
    issuer_ref: string;
    policy: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonceRequest {
    issuer_ref: string;
    policy: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRequest {
    issuer_ref: string;
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRequest {
    issuer_ref: string;
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuerJsonRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuerPemRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadIssuersConfigurationRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadKeyRequest {
    key_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadKeysConfigurationRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadRoleRequest {
    name: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadRolesRoleAcmeDirectoryRequest {
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadRolesRoleAcmeNewNonceRequest {
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadRolesRoleEstCacertsRequest {
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadRolesRoleScepRequest {
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadRolesRoleScepPkiclientExeRequest {
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiReadScepRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadScepConfigurationRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadScepPkiclientExeRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadUnifiedCrlDeltaRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadUnifiedCrlDeltaPemRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadUnifiedCrlDerRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadUnifiedCrlPemRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReadUrlsConfigurationRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiReplaceRootOperationRequest {
    pki_mount_path: string;
    PkiReplaceRootRequest: PkiReplaceRootRequest;
}

export interface SecretsApiPkiRevokeOperationRequest {
    pki_mount_path: string;
    PkiRevokeRequest: PkiRevokeRequest;
}

export interface SecretsApiPkiRevokeIssuerRequest {
    issuer_ref: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiRevokeWithKeyOperationRequest {
    pki_mount_path: string;
    PkiRevokeWithKeyRequest: PkiRevokeWithKeyRequest;
}

export interface SecretsApiPkiRootSignIntermediateOperationRequest {
    pki_mount_path: string;
    PkiRootSignIntermediateRequest: PkiRootSignIntermediateRequest;
}

export interface SecretsApiPkiRootSignSelfIssuedOperationRequest {
    pki_mount_path: string;
    PkiRootSignSelfIssuedRequest: PkiRootSignSelfIssuedRequest;
}

export interface SecretsApiPkiRotateCrlRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiRotateDeltaCrlRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiRotateRootOperationRequest {
    exported: PkiRotateRootExportedEnum;
    pki_mount_path: string;
    PkiRotateRootRequest: PkiRotateRootRequest;
}

export interface SecretsApiPkiSetSignedIntermediateOperationRequest {
    pki_mount_path: string;
    PkiSetSignedIntermediateRequest: PkiSetSignedIntermediateRequest;
}

export interface SecretsApiPkiSignVerbatimOperationRequest {
    pki_mount_path: string;
    PkiSignVerbatimRequest: PkiSignVerbatimRequest;
}

export interface SecretsApiPkiSignVerbatimWithRoleOperationRequest {
    role: string;
    pki_mount_path: string;
    PkiSignVerbatimWithRoleRequest: PkiSignVerbatimWithRoleRequest;
}

export interface SecretsApiPkiSignWithRoleOperationRequest {
    role: string;
    pki_mount_path: string;
    PkiSignWithRoleRequest: PkiSignWithRoleRequest;
}

export interface SecretsApiPkiTidyOperationRequest {
    pki_mount_path: string;
    PkiTidyRequest: PkiTidyRequest;
}

export interface SecretsApiPkiTidyCancelRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiTidyStatusRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiWriteAcmeAccountKidOperationRequest {
    kid: string;
    pki_mount_path: string;
    PkiWriteAcmeAccountKidRequest: PkiWriteAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteAcmeAuthorizationAuthIdOperationRequest {
    auth_id: string;
    pki_mount_path: string;
    PkiWriteAcmeAuthorizationAuthIdRequest: PkiWriteAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteAcmeChallengeAuthIdChallengeTypeOperationRequest {
    auth_id: string;
    challenge_type: string;
    pki_mount_path: string;
    PkiWriteAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteAcmeKeyIdOperationRequest {
    keyid: string;
    pki_mount_path: string;
    PkiWriteAcmeKeyIdRequest: PkiWriteAcmeKeyIdRequest;
}

export interface SecretsApiPkiWriteAcmeNewAccountOperationRequest {
    pki_mount_path: string;
    PkiWriteAcmeNewAccountRequest: PkiWriteAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteAcmeNewOrderOperationRequest {
    pki_mount_path: string;
    PkiWriteAcmeNewOrderRequest: PkiWriteAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteAcmeOrderOrderIdOperationRequest {
    order_id: string;
    pki_mount_path: string;
    PkiWriteAcmeOrderOrderIdRequest: PkiWriteAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteAcmeOrderOrderIdCertOperationRequest {
    order_id: string;
    pki_mount_path: string;
    PkiWriteAcmeOrderOrderIdCertRequest: PkiWriteAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteAcmeOrderOrderIdFinalizeOperationRequest {
    order_id: string;
    pki_mount_path: string;
    PkiWriteAcmeOrderOrderIdFinalizeRequest: PkiWriteAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteAcmeOrdersOperationRequest {
    pki_mount_path: string;
    PkiWriteAcmeOrdersRequest: PkiWriteAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteAcmeRevokeCertOperationRequest {
    pki_mount_path: string;
    PkiWriteAcmeRevokeCertRequest: PkiWriteAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteCmpRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiWriteEstSimpleenrollRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiWriteEstSimplereenrollRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeAccountKidOperationRequest {
    kid: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyAcmeAccountKidRequest: PkiWriteExternalPolicyAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeAuthorizationAuthIdOperationRequest {
    auth_id: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest: PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest {
    auth_id: string;
    challenge_type: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeNewAccountOperationRequest {
    pki_mount_path: string;
    PkiWriteExternalPolicyAcmeNewAccountRequest: PkiWriteExternalPolicyAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeNewOrderOperationRequest {
    pki_mount_path: string;
    PkiWriteExternalPolicyAcmeNewOrderRequest: PkiWriteExternalPolicyAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeOrderOrderIdOperationRequest {
    order_id: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyAcmeOrderOrderIdRequest: PkiWriteExternalPolicyAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeOrderOrderIdCertOperationRequest {
    order_id: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest: PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeOrderOrderIdFinalizeOperationRequest {
    order_id: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeOrdersOperationRequest {
    pki_mount_path: string;
    PkiWriteExternalPolicyAcmeOrdersRequest: PkiWriteExternalPolicyAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteExternalPolicyAcmeRevokeCertOperationRequest {
    pki_mount_path: string;
    PkiWriteExternalPolicyAcmeRevokeCertRequest: PkiWriteExternalPolicyAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteExternalPolicyIssueOperationRequest {
    pki_mount_path: string;
    PkiWriteExternalPolicyIssueRequest: PkiWriteExternalPolicyIssueRequest;
}

export interface SecretsApiPkiWriteExternalPolicyIssuePolicyOperationRequest {
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyIssuePolicyRequest: PkiWriteExternalPolicyIssuePolicyRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeAccountKidOperationRequest {
    kid: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyPolicyAcmeAccountKidRequest: PkiWriteExternalPolicyPolicyAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdOperationRequest {
    auth_id: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest {
    auth_id: string;
    challenge_type: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeNewAccountOperationRequest {
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyPolicyAcmeNewAccountRequest: PkiWriteExternalPolicyPolicyAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeNewOrderOperationRequest {
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyPolicyAcmeNewOrderRequest: PkiWriteExternalPolicyPolicyAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeOrderOrderIdOperationRequest {
    order_id: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertOperationRequest {
    order_id: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeOperationRequest {
    order_id: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeOrdersOperationRequest {
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyPolicyAcmeOrdersRequest: PkiWriteExternalPolicyPolicyAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteExternalPolicyPolicyAcmeRevokeCertOperationRequest {
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest: PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteExternalPolicySignOperationRequest {
    pki_mount_path: string;
    PkiWriteExternalPolicySignRequest: PkiWriteExternalPolicySignRequest;
}

export interface SecretsApiPkiWriteExternalPolicySignIntermediateOperationRequest {
    pki_mount_path: string;
    PkiWriteExternalPolicySignIntermediateRequest: PkiWriteExternalPolicySignIntermediateRequest;
}

export interface SecretsApiPkiWriteExternalPolicySignIntermediatePolicyOperationRequest {
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicySignIntermediatePolicyRequest: PkiWriteExternalPolicySignIntermediatePolicyRequest;
}

export interface SecretsApiPkiWriteExternalPolicySignPolicyOperationRequest {
    policy: string;
    pki_mount_path: string;
    PkiWriteExternalPolicySignPolicyRequest: PkiWriteExternalPolicySignPolicyRequest;
}

export interface SecretsApiPkiWriteIssuerOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerRequest: PkiWriteIssuerRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeAccountKidOperationRequest {
    issuer_ref: string;
    kid: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefAcmeAccountKidRequest: PkiWriteIssuerIssuerRefAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdOperationRequest {
    auth_id: string;
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeOperationRequest {
    auth_id: string;
    challenge_type: string;
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeNewAccountOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefAcmeNewAccountRequest: PkiWriteIssuerIssuerRefAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeNewOrderOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefAcmeNewOrderRequest: PkiWriteIssuerIssuerRefAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeOrderOrderIdOperationRequest {
    issuer_ref: string;
    order_id: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeOrderOrderIdCertOperationRequest {
    issuer_ref: string;
    order_id: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeOperationRequest {
    issuer_ref: string;
    order_id: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeOrdersOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefAcmeOrdersRequest: PkiWriteIssuerIssuerRefAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefAcmeRevokeCertOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidOperationRequest {
    issuer_ref: string;
    kid: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdOperationRequest {
    auth_id: string;
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest {
    auth_id: string;
    challenge_type: string;
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdOperationRequest {
    issuer_ref: string;
    order_id: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertOperationRequest {
    issuer_ref: string;
    order_id: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeOperationRequest {
    issuer_ref: string;
    order_id: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyIssueOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyIssueRequest: PkiWriteIssuerIssuerRefExternalPolicyIssueRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyIssuePolicyOperationRequest {
    issuer_ref: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest: PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidOperationRequest {
    issuer_ref: string;
    kid: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdOperationRequest {
    auth_id: string;
    issuer_ref: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest {
    auth_id: string;
    challenge_type: string;
    issuer_ref: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountOperationRequest {
    issuer_ref: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderOperationRequest {
    issuer_ref: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdOperationRequest {
    issuer_ref: string;
    order_id: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertOperationRequest {
    issuer_ref: string;
    order_id: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeOperationRequest {
    issuer_ref: string;
    order_id: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersOperationRequest {
    issuer_ref: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertOperationRequest {
    issuer_ref: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicySignRequest: PkiWriteIssuerIssuerRefExternalPolicySignRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignIntermediateOperationRequest {
    issuer_ref: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest: PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyOperationRequest {
    issuer_ref: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest: PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignPolicyOperationRequest {
    issuer_ref: string;
    policy: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest: PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidOperationRequest {
    issuer_ref: string;
    kid: string;
    role: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdOperationRequest {
    auth_id: string;
    issuer_ref: string;
    role: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest {
    auth_id: string;
    challenge_type: string;
    issuer_ref: string;
    role: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountOperationRequest {
    issuer_ref: string;
    role: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderOperationRequest {
    issuer_ref: string;
    role: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdOperationRequest {
    issuer_ref: string;
    order_id: string;
    role: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertOperationRequest {
    issuer_ref: string;
    order_id: string;
    role: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeOperationRequest {
    issuer_ref: string;
    order_id: string;
    role: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrdersOperationRequest {
    issuer_ref: string;
    role: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertOperationRequest {
    issuer_ref: string;
    role: string;
    pki_mount_path: string;
    PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteKeyOperationRequest {
    key_ref: string;
    pki_mount_path: string;
    PkiWriteKeyRequest: PkiWriteKeyRequest;
}

export interface SecretsApiPkiWriteRoleOperationRequest {
    name: string;
    pki_mount_path: string;
    PkiWriteRoleRequest: PkiWriteRoleRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeAccountKidOperationRequest {
    kid: string;
    role: string;
    pki_mount_path: string;
    PkiWriteRolesRoleAcmeAccountKidRequest: PkiWriteRolesRoleAcmeAccountKidRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeAuthorizationAuthIdOperationRequest {
    auth_id: string;
    role: string;
    pki_mount_path: string;
    PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest: PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest {
    auth_id: string;
    challenge_type: string;
    role: string;
    pki_mount_path: string;
    PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeNewAccountOperationRequest {
    role: string;
    pki_mount_path: string;
    PkiWriteRolesRoleAcmeNewAccountRequest: PkiWriteRolesRoleAcmeNewAccountRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeNewOrderOperationRequest {
    role: string;
    pki_mount_path: string;
    PkiWriteRolesRoleAcmeNewOrderRequest: PkiWriteRolesRoleAcmeNewOrderRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeOrderOrderIdOperationRequest {
    order_id: string;
    role: string;
    pki_mount_path: string;
    PkiWriteRolesRoleAcmeOrderOrderIdRequest: PkiWriteRolesRoleAcmeOrderOrderIdRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeOrderOrderIdCertOperationRequest {
    order_id: string;
    role: string;
    pki_mount_path: string;
    PkiWriteRolesRoleAcmeOrderOrderIdCertRequest: PkiWriteRolesRoleAcmeOrderOrderIdCertRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeOrderOrderIdFinalizeOperationRequest {
    order_id: string;
    role: string;
    pki_mount_path: string;
    PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest: PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeOrdersOperationRequest {
    role: string;
    pki_mount_path: string;
    PkiWriteRolesRoleAcmeOrdersRequest: PkiWriteRolesRoleAcmeOrdersRequest;
}

export interface SecretsApiPkiWriteRolesRoleAcmeRevokeCertOperationRequest {
    role: string;
    pki_mount_path: string;
    PkiWriteRolesRoleAcmeRevokeCertRequest: PkiWriteRolesRoleAcmeRevokeCertRequest;
}

export interface SecretsApiPkiWriteRolesRoleCmpRequest {
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiWriteRolesRoleEstSimpleenrollRequest {
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiWriteRolesRoleEstSimplereenrollRequest {
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiWriteRolesRoleScepRequest {
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiWriteRolesRoleScepPkiclientExeRequest {
    role: string;
    pki_mount_path: string;
}

export interface SecretsApiPkiWriteScepRequest {
    pki_mount_path: string;
}

export interface SecretsApiPkiWriteScepPkiclientExeRequest {
    pki_mount_path: string;
}

export interface SecretsApiRabbitMqConfigureConnectionOperationRequest {
    rabbitmq_mount_path: string;
    RabbitMqConfigureConnectionRequest: RabbitMqConfigureConnectionRequest;
}

export interface SecretsApiRabbitMqConfigureLeaseOperationRequest {
    rabbitmq_mount_path: string;
    RabbitMqConfigureLeaseRequest: RabbitMqConfigureLeaseRequest;
}

export interface SecretsApiRabbitMqDeleteRoleRequest {
    name: string;
    rabbitmq_mount_path: string;
}

export interface SecretsApiRabbitMqListRolesRequest {
    rabbitmq_mount_path: string;
    list: RabbitMqListRolesListEnum;
}

export interface SecretsApiRabbitMqReadLeaseConfigurationRequest {
    rabbitmq_mount_path: string;
}

export interface SecretsApiRabbitMqReadRoleRequest {
    name: string;
    rabbitmq_mount_path: string;
}

export interface SecretsApiRabbitMqRequestCredentialsRequest {
    name: string;
    rabbitmq_mount_path: string;
}

export interface SecretsApiRabbitMqWriteRoleOperationRequest {
    name: string;
    rabbitmq_mount_path: string;
    RabbitMqWriteRoleRequest: RabbitMqWriteRoleRequest;
}

export interface SecretsApiSshConfigureCaOperationRequest {
    ssh_mount_path: string;
    SshConfigureCaRequest: SshConfigureCaRequest;
}

export interface SecretsApiSshConfigureZeroAddressOperationRequest {
    ssh_mount_path: string;
    SshConfigureZeroAddressRequest: SshConfigureZeroAddressRequest;
}

export interface SecretsApiSshDeleteCaConfigurationRequest {
    ssh_mount_path: string;
}

export interface SecretsApiSshDeleteRoleRequest {
    role: string;
    ssh_mount_path: string;
}

export interface SecretsApiSshDeleteZeroAddressConfigurationRequest {
    ssh_mount_path: string;
}

export interface SecretsApiSshGenerateCredentialsOperationRequest {
    role: string;
    ssh_mount_path: string;
    SshGenerateCredentialsRequest: SshGenerateCredentialsRequest;
}

export interface SecretsApiSshIssueCertificateOperationRequest {
    role: string;
    ssh_mount_path: string;
    SshIssueCertificateRequest: SshIssueCertificateRequest;
}

export interface SecretsApiSshListRolesRequest {
    ssh_mount_path: string;
    list: SshListRolesListEnum;
}

export interface SecretsApiSshListRolesByIpOperationRequest {
    ssh_mount_path: string;
    SshListRolesByIpRequest: SshListRolesByIpRequest;
}

export interface SecretsApiSshReadCaConfigurationRequest {
    ssh_mount_path: string;
}

export interface SecretsApiSshReadPublicKeyRequest {
    ssh_mount_path: string;
}

export interface SecretsApiSshReadRoleRequest {
    role: string;
    ssh_mount_path: string;
}

export interface SecretsApiSshReadZeroAddressConfigurationRequest {
    ssh_mount_path: string;
}

export interface SecretsApiSshSignCertificateOperationRequest {
    role: string;
    ssh_mount_path: string;
    SshSignCertificateRequest: SshSignCertificateRequest;
}

export interface SecretsApiSshTidyDynamicHostKeysRequest {
    ssh_mount_path: string;
}

export interface SecretsApiSshVerifyOtpOperationRequest {
    ssh_mount_path: string;
    SshVerifyOtpRequest: SshVerifyOtpRequest;
}

export interface SecretsApiSshWriteRoleOperationRequest {
    role: string;
    ssh_mount_path: string;
    SshWriteRoleRequest: SshWriteRoleRequest;
}

export interface SecretsApiTerraformCloudConfigureOperationRequest {
    terraform_mount_path: string;
    TerraformCloudConfigureRequest: TerraformCloudConfigureRequest;
}

export interface SecretsApiTerraformCloudDeleteConfigurationRequest {
    terraform_mount_path: string;
}

export interface SecretsApiTerraformCloudDeleteRoleRequest {
    name: string;
    terraform_mount_path: string;
}

export interface SecretsApiTerraformCloudGenerateCredentialsRequest {
    name: string;
    terraform_mount_path: string;
}

export interface SecretsApiTerraformCloudGenerateCredentials2Request {
    name: string;
    terraform_mount_path: string;
}

export interface SecretsApiTerraformCloudListRolesRequest {
    terraform_mount_path: string;
    list: TerraformCloudListRolesListEnum;
}

export interface SecretsApiTerraformCloudReadConfigurationRequest {
    terraform_mount_path: string;
}

export interface SecretsApiTerraformCloudReadRoleRequest {
    name: string;
    terraform_mount_path: string;
}

export interface SecretsApiTerraformCloudRotateRoleRequest {
    name: string;
    terraform_mount_path: string;
}

export interface SecretsApiTerraformCloudWriteRoleOperationRequest {
    name: string;
    terraform_mount_path: string;
    TerraformCloudWriteRoleRequest: TerraformCloudWriteRoleRequest;
}

export interface SecretsApiTotpCreateKeyOperationRequest {
    name: string;
    totp_mount_path: string;
    TotpCreateKeyRequest: TotpCreateKeyRequest;
}

export interface SecretsApiTotpDeleteKeyRequest {
    name: string;
    totp_mount_path: string;
}

export interface SecretsApiTotpGenerateCodeRequest {
    name: string;
    totp_mount_path: string;
}

export interface SecretsApiTotpListKeysRequest {
    totp_mount_path: string;
    list: TotpListKeysListEnum;
}

export interface SecretsApiTotpReadKeyRequest {
    name: string;
    totp_mount_path: string;
}

export interface SecretsApiTotpValidateCodeOperationRequest {
    name: string;
    totp_mount_path: string;
    TotpValidateCodeRequest: TotpValidateCodeRequest;
}

export interface SecretsApiTransformApplyStoreSchemaOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformApplyStoreSchemaRequest: TransformApplyStoreSchemaRequest;
}

export interface SecretsApiTransformCheckTokenizedOperationRequest {
    role_name: string;
    transform_mount_path: string;
    TransformCheckTokenizedRequest: TransformCheckTokenizedRequest;
}

export interface SecretsApiTransformCheckTokenized0Request {
    role_name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformConfigureCacheOperationRequest {
    transform_mount_path: string;
    TransformConfigureCacheRequest: TransformConfigureCacheRequest;
}

export interface SecretsApiTransformConfigureNamedEncryptionKeyOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformConfigureNamedEncryptionKeyRequest: TransformConfigureNamedEncryptionKeyRequest;
}

export interface SecretsApiTransformCreateFpeTransformationWithImportedKeysOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformCreateFpeTransformationWithImportedKeysRequest: TransformCreateFpeTransformationWithImportedKeysRequest;
}

export interface SecretsApiTransformCreateTokenizationTransformationWithImportedKeysOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformCreateTokenizationTransformationWithImportedKeysRequest: TransformCreateTokenizationTransformationWithImportedKeysRequest;
}

export interface SecretsApiTransformDecodeOperationRequest {
    role_name: string;
    transform_mount_path: string;
    TransformDecodeRequest: TransformDecodeRequest;
}

export interface SecretsApiTransformDecodeWithFormatOperationRequest {
    decode_format: string;
    role_name: string;
    transform_mount_path: string;
    TransformDecodeWithFormatRequest: TransformDecodeWithFormatRequest;
}

export interface SecretsApiTransformDeleteAlphabetRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformDeleteFpeTransformationRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformDeleteMaskingTransformationRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformDeleteRoleRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformDeleteStoreRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformDeleteTemplateRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformDeleteTokenizationTransformationRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformDeleteTransformationRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformEncodeOperationRequest {
    role_name: string;
    transform_mount_path: string;
    TransformEncodeRequest: TransformEncodeRequest;
}

export interface SecretsApiTransformExportDecodedTokenizationTokensOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformExportDecodedTokenizationTokensRequest: TransformExportDecodedTokenizationTokensRequest;
}

export interface SecretsApiTransformImportKeyVersionIntoTokenizationTransformationOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformImportKeyVersionIntoTokenizationTransformationRequest: TransformImportKeyVersionIntoTokenizationTransformationRequest;
}

export interface SecretsApiTransformListAlphabetsRequest {
    transform_mount_path: string;
    list: TransformListAlphabetsListEnum;
}

export interface SecretsApiTransformListFpeTransformationsRequest {
    transform_mount_path: string;
    list: TransformListFpeTransformationsListEnum;
}

export interface SecretsApiTransformListMaskingTransformationsRequest {
    transform_mount_path: string;
    list: TransformListMaskingTransformationsListEnum;
}

export interface SecretsApiTransformListRolesRequest {
    transform_mount_path: string;
    list: TransformListRolesListEnum;
}

export interface SecretsApiTransformListStoresRequest {
    transform_mount_path: string;
    list: TransformListStoresListEnum;
}

export interface SecretsApiTransformListTemplatesRequest {
    transform_mount_path: string;
    list: TransformListTemplatesListEnum;
}

export interface SecretsApiTransformListTokenizationKeysRequest {
    transform_mount_path: string;
    list: TransformListTokenizationKeysListEnum;
}

export interface SecretsApiTransformListTokenizationTransformationsRequest {
    transform_mount_path: string;
    list: TransformListTokenizationTransformationsListEnum;
}

export interface SecretsApiTransformListTransformationsRequest {
    transform_mount_path: string;
    list: TransformListTransformationsListEnum;
}

export interface SecretsApiTransformLookUpTokenOperationRequest {
    role_name: string;
    transform_mount_path: string;
    TransformLookUpTokenRequest: TransformLookUpTokenRequest;
}

export interface SecretsApiTransformLookUpToken0Request {
    role_name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformReadAlphabetRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformReadCacheConfigurationRequest {
    transform_mount_path: string;
}

export interface SecretsApiTransformReadFpeTransformationRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformReadMaskingTransformationRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformReadRoleRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformReadStoreRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformReadTemplateRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformReadTokenizationKeyRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformReadTokenizationTransformationRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformReadTransformationRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformRestoreTokenizationStateOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformRestoreTokenizationStateRequest: TransformRestoreTokenizationStateRequest;
}

export interface SecretsApiTransformRetrieveTokenMetadataOperationRequest {
    role_name: string;
    transform_mount_path: string;
    TransformRetrieveTokenMetadataRequest: TransformRetrieveTokenMetadataRequest;
}

export interface SecretsApiTransformRetrieveWrappingKeyRequest {
    transform_mount_path: string;
}

export interface SecretsApiTransformRotateTokenizationKeyRequest {
    name: string;
    transform_mount_path: string;
}

export interface SecretsApiTransformSnapshotTokenizationStateOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformSnapshotTokenizationStateRequest: TransformSnapshotTokenizationStateRequest;
}

export interface SecretsApiTransformTrimKeyVersionsOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformTrimKeyVersionsRequest: TransformTrimKeyVersionsRequest;
}

export interface SecretsApiTransformValidateTokenOperationRequest {
    role_name: string;
    transform_mount_path: string;
    TransformValidateTokenRequest: TransformValidateTokenRequest;
}

export interface SecretsApiTransformWriteAlphabetOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformWriteAlphabetRequest: TransformWriteAlphabetRequest;
}

export interface SecretsApiTransformWriteFpeTransformationOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformWriteFpeTransformationRequest: TransformWriteFpeTransformationRequest;
}

export interface SecretsApiTransformWriteMaskingTransformationOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformWriteMaskingTransformationRequest: TransformWriteMaskingTransformationRequest;
}

export interface SecretsApiTransformWriteRoleOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformWriteRoleRequest: TransformWriteRoleRequest;
}

export interface SecretsApiTransformWriteStoreOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformWriteStoreRequest: TransformWriteStoreRequest;
}

export interface SecretsApiTransformWriteTemplateOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformWriteTemplateRequest: TransformWriteTemplateRequest;
}

export interface SecretsApiTransformWriteTokenizationTransformationOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformWriteTokenizationTransformationRequest: TransformWriteTokenizationTransformationRequest;
}

export interface SecretsApiTransformWriteTransformationOperationRequest {
    name: string;
    transform_mount_path: string;
    TransformWriteTransformationRequest: TransformWriteTransformationRequest;
}

export interface SecretsApiTransitBackUpKeyRequest {
    name: string;
    transit_mount_path: string;
}

export interface SecretsApiTransitByokKeyRequest {
    destination: string;
    source: string;
    transit_mount_path: string;
}

export interface SecretsApiTransitByokKeyVersionRequest {
    destination: string;
    source: string;
    version: string;
    transit_mount_path: string;
}

export interface SecretsApiTransitConfigureCacheOperationRequest {
    transit_mount_path: string;
    TransitConfigureCacheRequest: TransitConfigureCacheRequest;
}

export interface SecretsApiTransitConfigureKeyOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitConfigureKeyRequest: TransitConfigureKeyRequest;
}

export interface SecretsApiTransitConfigureKeysOperationRequest {
    transit_mount_path: string;
    TransitConfigureKeysRequest: TransitConfigureKeysRequest;
}

export interface SecretsApiTransitCreateKeyOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitCreateKeyRequest: TransitCreateKeyRequest;
}

export interface SecretsApiTransitDecryptOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitDecryptRequest: TransitDecryptRequest;
}

export interface SecretsApiTransitDeleteKeyRequest {
    name: string;
    transit_mount_path: string;
}

export interface SecretsApiTransitEncryptOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitEncryptRequest: TransitEncryptRequest;
}

export interface SecretsApiTransitExportKeyRequest {
    name: string;
    type: string;
    transit_mount_path: string;
}

export interface SecretsApiTransitExportKeyVersionRequest {
    name: string;
    type: string;
    version: string;
    transit_mount_path: string;
}

export interface SecretsApiTransitGenerateCmacOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitGenerateCmacRequest: TransitGenerateCmacRequest;
}

export interface SecretsApiTransitGenerateCmacWithMacLengthOperationRequest {
    name: string;
    url_mac_length: string;
    transit_mount_path: string;
    TransitGenerateCmacWithMacLengthRequest: TransitGenerateCmacWithMacLengthRequest;
}

export interface SecretsApiTransitGenerateCsrForKeyOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitGenerateCsrForKeyRequest: TransitGenerateCsrForKeyRequest;
}

export interface SecretsApiTransitGenerateDataKeyOperationRequest {
    name: string;
    plaintext: string;
    transit_mount_path: string;
    TransitGenerateDataKeyRequest: TransitGenerateDataKeyRequest;
}

export interface SecretsApiTransitGenerateHmacOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitGenerateHmacRequest: TransitGenerateHmacRequest;
}

export interface SecretsApiTransitGenerateHmacWithAlgorithmOperationRequest {
    name: string;
    urlalgorithm: string;
    transit_mount_path: string;
    TransitGenerateHmacWithAlgorithmRequest: TransitGenerateHmacWithAlgorithmRequest;
}

export interface SecretsApiTransitGenerateRandomOperationRequest {
    transit_mount_path: string;
    TransitGenerateRandomRequest: TransitGenerateRandomRequest;
}

export interface SecretsApiTransitGenerateRandomWithBytesOperationRequest {
    urlbytes: string;
    transit_mount_path: string;
    TransitGenerateRandomWithBytesRequest: TransitGenerateRandomWithBytesRequest;
}

export interface SecretsApiTransitGenerateRandomWithSourceOperationRequest {
    source: string;
    transit_mount_path: string;
    TransitGenerateRandomWithSourceRequest: TransitGenerateRandomWithSourceRequest;
}

export interface SecretsApiTransitGenerateRandomWithSourceAndBytesOperationRequest {
    source: string;
    urlbytes: string;
    transit_mount_path: string;
    TransitGenerateRandomWithSourceAndBytesRequest: TransitGenerateRandomWithSourceAndBytesRequest;
}

export interface SecretsApiTransitHashOperationRequest {
    transit_mount_path: string;
    TransitHashRequest: TransitHashRequest;
}

export interface SecretsApiTransitHashWithAlgorithmOperationRequest {
    urlalgorithm: string;
    transit_mount_path: string;
    TransitHashWithAlgorithmRequest: TransitHashWithAlgorithmRequest;
}

export interface SecretsApiTransitImportKeyOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitImportKeyRequest: TransitImportKeyRequest;
}

export interface SecretsApiTransitImportKeyVersionOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitImportKeyVersionRequest: TransitImportKeyVersionRequest;
}

export interface SecretsApiTransitListKeysRequest {
    transit_mount_path: string;
    list: TransitListKeysListEnum;
}

export interface SecretsApiTransitReadCacheConfigurationRequest {
    transit_mount_path: string;
}

export interface SecretsApiTransitReadKeyRequest {
    name: string;
    transit_mount_path: string;
}

export interface SecretsApiTransitReadKeysConfigurationRequest {
    transit_mount_path: string;
}

export interface SecretsApiTransitReadWrappingKeyRequest {
    transit_mount_path: string;
}

export interface SecretsApiTransitRestoreAndRenameKeyOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitRestoreAndRenameKeyRequest: TransitRestoreAndRenameKeyRequest;
}

export interface SecretsApiTransitRestoreKeyOperationRequest {
    transit_mount_path: string;
    TransitRestoreKeyRequest: TransitRestoreKeyRequest;
}

export interface SecretsApiTransitRewrapOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitRewrapRequest: TransitRewrapRequest;
}

export interface SecretsApiTransitRotateKeyOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitRotateKeyRequest: TransitRotateKeyRequest;
}

export interface SecretsApiTransitSetCertificateForKeyOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitSetCertificateForKeyRequest: TransitSetCertificateForKeyRequest;
}

export interface SecretsApiTransitSignOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitSignRequest: TransitSignRequest;
}

export interface SecretsApiTransitSignWithAlgorithmOperationRequest {
    name: string;
    urlalgorithm: string;
    transit_mount_path: string;
    TransitSignWithAlgorithmRequest: TransitSignWithAlgorithmRequest;
}

export interface SecretsApiTransitTrimKeyOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitTrimKeyRequest: TransitTrimKeyRequest;
}

export interface SecretsApiTransitVerifyOperationRequest {
    name: string;
    transit_mount_path: string;
    TransitVerifyRequest: TransitVerifyRequest;
}

export interface SecretsApiTransitVerifyWithAlgorithmOperationRequest {
    name: string;
    urlalgorithm: string;
    transit_mount_path: string;
    TransitVerifyWithAlgorithmRequest: TransitVerifyWithAlgorithmRequest;
}

/**
 * 
 */
export class SecretsApi extends runtime.BaseAPI {

    /**
     */
    async aliCloudConfigureRaw(requestParameters: SecretsApiAliCloudConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['alicloud_mount_path'] == null) {
            throw new runtime.RequiredError(
                'alicloud_mount_path',
                'Required parameter "alicloud_mount_path" was null or undefined when calling aliCloudConfigure().'
            );
        }

        if (requestParameters['AliCloudConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'AliCloudConfigureRequest',
                'Required parameter "AliCloudConfigureRequest" was null or undefined when calling aliCloudConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{alicloud_mount_path}/config`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloud_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliCloudConfigureRequestToJSON(requestParameters['AliCloudConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliCloudConfigure(alicloud_mount_path: string, AliCloudConfigureRequest: AliCloudConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudConfigureRaw({ alicloud_mount_path: alicloud_mount_path, AliCloudConfigureRequest: AliCloudConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async aliCloudDeleteConfigurationRaw(requestParameters: SecretsApiAliCloudDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['alicloud_mount_path'] == null) {
            throw new runtime.RequiredError(
                'alicloud_mount_path',
                'Required parameter "alicloud_mount_path" was null or undefined when calling aliCloudDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/config`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloud_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliCloudDeleteConfiguration(alicloud_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudDeleteConfigurationRaw({ alicloud_mount_path: alicloud_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudDeleteRoleRaw(requestParameters: SecretsApiAliCloudDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling aliCloudDeleteRole().'
            );
        }

        if (requestParameters['alicloud_mount_path'] == null) {
            throw new runtime.RequiredError(
                'alicloud_mount_path',
                'Required parameter "alicloud_mount_path" was null or undefined when calling aliCloudDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloud_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudDeleteRole(name: string, alicloud_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudDeleteRoleRaw({ name: name, alicloud_mount_path: alicloud_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Generate an API key or STS credential using the given role\'s configuration.\'
     */
    async aliCloudGenerateCredentialsRaw(requestParameters: SecretsApiAliCloudGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling aliCloudGenerateCredentials().'
            );
        }

        if (requestParameters['alicloud_mount_path'] == null) {
            throw new runtime.RequiredError(
                'alicloud_mount_path',
                'Required parameter "alicloud_mount_path" was null or undefined when calling aliCloudGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloud_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate an API key or STS credential using the given role\'s configuration.\'
     */
    async aliCloudGenerateCredentials(name: string, alicloud_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudGenerateCredentialsRaw({ name: name, alicloud_mount_path: alicloud_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * List the existing roles in this backend.
     */
    async aliCloudListRolesRaw(requestParameters: SecretsApiAliCloudListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['alicloud_mount_path'] == null) {
            throw new runtime.RequiredError(
                'alicloud_mount_path',
                'Required parameter "alicloud_mount_path" was null or undefined when calling aliCloudListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling aliCloudListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/role/`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloud_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List the existing roles in this backend.
     */
    async aliCloudListRoles(alicloud_mount_path: string, list: AliCloudListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.aliCloudListRolesRaw({ alicloud_mount_path: alicloud_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async aliCloudReadConfigurationRaw(requestParameters: SecretsApiAliCloudReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['alicloud_mount_path'] == null) {
            throw new runtime.RequiredError(
                'alicloud_mount_path',
                'Required parameter "alicloud_mount_path" was null or undefined when calling aliCloudReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/config`.replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloud_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliCloudReadConfiguration(alicloud_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudReadConfigurationRaw({ alicloud_mount_path: alicloud_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudReadRoleRaw(requestParameters: SecretsApiAliCloudReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling aliCloudReadRole().'
            );
        }

        if (requestParameters['alicloud_mount_path'] == null) {
            throw new runtime.RequiredError(
                'alicloud_mount_path',
                'Required parameter "alicloud_mount_path" was null or undefined when calling aliCloudReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{alicloud_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloud_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudReadRole(name: string, alicloud_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudReadRoleRaw({ name: name, alicloud_mount_path: alicloud_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudWriteRoleRaw(requestParameters: SecretsApiAliCloudWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling aliCloudWriteRole().'
            );
        }

        if (requestParameters['alicloud_mount_path'] == null) {
            throw new runtime.RequiredError(
                'alicloud_mount_path',
                'Required parameter "alicloud_mount_path" was null or undefined when calling aliCloudWriteRole().'
            );
        }

        if (requestParameters['AliCloudWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'AliCloudWriteRoleRequest',
                'Required parameter "AliCloudWriteRoleRequest" was null or undefined when calling aliCloudWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{alicloud_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"alicloud_mount_path"}}`, encodeURIComponent(String(requestParameters['alicloud_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliCloudWriteRoleRequestToJSON(requestParameters['AliCloudWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference policies and roles that API keys or STS credentials can be made for.
     */
    async aliCloudWriteRole(name: string, alicloud_mount_path: string, AliCloudWriteRoleRequest: AliCloudWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliCloudWriteRoleRaw({ name: name, alicloud_mount_path: alicloud_mount_path, AliCloudWriteRoleRequest: AliCloudWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsConfigureLeaseRaw(requestParameters: SecretsApiAwsConfigureLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsConfigureLease().'
            );
        }

        if (requestParameters['AwsConfigureLeaseRequest'] == null) {
            throw new runtime.RequiredError(
                'AwsConfigureLeaseRequest',
                'Required parameter "AwsConfigureLeaseRequest" was null or undefined when calling awsConfigureLease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/config/lease`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureLeaseRequestToJSON(requestParameters['AwsConfigureLeaseRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureLease(aws_mount_path: string, AwsConfigureLeaseRequest: AwsConfigureLeaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsConfigureLeaseRaw({ aws_mount_path: aws_mount_path, AwsConfigureLeaseRequest: AwsConfigureLeaseRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsConfigureRootIamCredentialsRaw(requestParameters: SecretsApiAwsConfigureRootIamCredentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsConfigureRootIamCredentials().'
            );
        }

        if (requestParameters['AwsConfigureRootIamCredentialsRequest'] == null) {
            throw new runtime.RequiredError(
                'AwsConfigureRootIamCredentialsRequest',
                'Required parameter "AwsConfigureRootIamCredentialsRequest" was null or undefined when calling awsConfigureRootIamCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/config/root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsConfigureRootIamCredentialsRequestToJSON(requestParameters['AwsConfigureRootIamCredentialsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsConfigureRootIamCredentials(aws_mount_path: string, AwsConfigureRootIamCredentialsRequest: AwsConfigureRootIamCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsConfigureRootIamCredentialsRaw({ aws_mount_path: aws_mount_path, AwsConfigureRootIamCredentialsRequest: AwsConfigureRootIamCredentialsRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsDeleteRoleRaw(requestParameters: SecretsApiAwsDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsDeleteRole().'
            );
        }

        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsDeleteRole(name: string, aws_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteRoleRaw({ name: name, aws_mount_path: aws_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsDeleteStaticRolesNameRaw(requestParameters: SecretsApiAwsDeleteStaticRolesNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsDeleteStaticRolesName().'
            );
        }

        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsDeleteStaticRolesName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsDeleteStaticRolesName(name: string, aws_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsDeleteStaticRolesNameRaw({ name: name, aws_mount_path: aws_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsGenerateCredentialsRaw(requestParameters: SecretsApiAwsGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsGenerateCredentials().'
            );
        }

        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['role_arn'] != null) {
            queryParameters['role_arn'] = requestParameters['role_arn'];
        }

        if (requestParameters['role_session_name'] != null) {
            queryParameters['role_session_name'] = requestParameters['role_session_name'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsGenerateCredentials(name: string, aws_mount_path: string, role_arn?: string, role_session_name?: string, ttl?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsGenerateCredentialsRaw({ name: name, aws_mount_path: aws_mount_path, role_arn: role_arn, role_session_name: role_session_name, ttl: ttl }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsGenerateCredentialsWithParametersRaw(requestParameters: SecretsApiAwsGenerateCredentialsWithParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsGenerateCredentialsWithParameters().'
            );
        }

        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsGenerateCredentialsWithParameters().'
            );
        }

        if (requestParameters['AwsGenerateCredentialsWithParametersRequest'] == null) {
            throw new runtime.RequiredError(
                'AwsGenerateCredentialsWithParametersRequest',
                'Required parameter "AwsGenerateCredentialsWithParametersRequest" was null or undefined when calling awsGenerateCredentialsWithParameters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsGenerateCredentialsWithParametersRequestToJSON(requestParameters['AwsGenerateCredentialsWithParametersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsGenerateCredentialsWithParameters(name: string, aws_mount_path: string, AwsGenerateCredentialsWithParametersRequest: AwsGenerateCredentialsWithParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsGenerateCredentialsWithParametersRaw({ name: name, aws_mount_path: aws_mount_path, AwsGenerateCredentialsWithParametersRequest: AwsGenerateCredentialsWithParametersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsGenerateStsCredentialsRaw(requestParameters: SecretsApiAwsGenerateStsCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsGenerateStsCredentials().'
            );
        }

        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsGenerateStsCredentials().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['role_arn'] != null) {
            queryParameters['role_arn'] = requestParameters['role_arn'];
        }

        if (requestParameters['role_session_name'] != null) {
            queryParameters['role_session_name'] = requestParameters['role_session_name'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/sts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsGenerateStsCredentials(name: string, aws_mount_path: string, role_arn?: string, role_session_name?: string, ttl?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsGenerateStsCredentialsRaw({ name: name, aws_mount_path: aws_mount_path, role_arn: role_arn, role_session_name: role_session_name, ttl: ttl }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsGenerateStsCredentialsWithParametersRaw(requestParameters: SecretsApiAwsGenerateStsCredentialsWithParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsGenerateStsCredentialsWithParameters().'
            );
        }

        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsGenerateStsCredentialsWithParameters().'
            );
        }

        if (requestParameters['AwsGenerateStsCredentialsWithParametersRequest'] == null) {
            throw new runtime.RequiredError(
                'AwsGenerateStsCredentialsWithParametersRequest',
                'Required parameter "AwsGenerateStsCredentialsWithParametersRequest" was null or undefined when calling awsGenerateStsCredentialsWithParameters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/sts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsGenerateStsCredentialsWithParametersRequestToJSON(requestParameters['AwsGenerateStsCredentialsWithParametersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsGenerateStsCredentialsWithParameters(name: string, aws_mount_path: string, AwsGenerateStsCredentialsWithParametersRequest: AwsGenerateStsCredentialsWithParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsGenerateStsCredentialsWithParametersRaw({ name: name, aws_mount_path: aws_mount_path, AwsGenerateStsCredentialsWithParametersRequest: AwsGenerateStsCredentialsWithParametersRequest }, initOverrides);
        return await response.value();
    }

    /**
     * List the existing roles in this backend
     */
    async awsListRolesRaw(requestParameters: SecretsApiAwsListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/roles/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List the existing roles in this backend
     */
    async awsListRoles(aws_mount_path: string, list: AwsListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListRolesRaw({ aws_mount_path: aws_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsListStaticRolesRaw(requestParameters: SecretsApiAwsListStaticRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsListStaticRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling awsListStaticRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/static-roles/`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsListStaticRoles(aws_mount_path: string, list: AwsListStaticRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.awsListStaticRolesRaw({ aws_mount_path: aws_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadLeaseConfigurationRaw(requestParameters: SecretsApiAwsReadLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsReadLeaseConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/config/lease`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadLeaseConfiguration(aws_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadLeaseConfigurationRaw({ aws_mount_path: aws_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsReadRoleRaw(requestParameters: SecretsApiAwsReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsReadRole().'
            );
        }

        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsReadRole(name: string, aws_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadRoleRaw({ name: name, aws_mount_path: aws_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadRootIamCredentialsConfigurationRaw(requestParameters: SecretsApiAwsReadRootIamCredentialsConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsReadRootIamCredentialsConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/config/root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsReadRootIamCredentialsConfiguration(aws_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsReadRootIamCredentialsConfigurationRaw({ aws_mount_path: aws_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadStaticCredsNameRaw(requestParameters: SecretsApiAwsReadStaticCredsNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwsReadStaticCredsNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsReadStaticCredsName().'
            );
        }

        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsReadStaticCredsName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/static-creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwsReadStaticCredsNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsReadStaticCredsName(name: string, aws_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwsReadStaticCredsNameResponse> {
        const response = await this.awsReadStaticCredsNameRaw({ name: name, aws_mount_path: aws_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsReadStaticRolesNameRaw(requestParameters: SecretsApiAwsReadStaticRolesNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwsReadStaticRolesNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsReadStaticRolesName().'
            );
        }

        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsReadStaticRolesName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwsReadStaticRolesNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsReadStaticRolesName(name: string, aws_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwsReadStaticRolesNameResponse> {
        const response = await this.awsReadStaticRolesNameRaw({ name: name, aws_mount_path: aws_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsRotateRootIamCredentialsRaw(requestParameters: SecretsApiAwsRotateRootIamCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsRotateRootIamCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{aws_mount_path}/config/rotate-root`.replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awsRotateRootIamCredentials(aws_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsRotateRootIamCredentialsRaw({ aws_mount_path: aws_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsWriteRoleRaw(requestParameters: SecretsApiAwsWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsWriteRole().'
            );
        }

        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsWriteRole().'
            );
        }

        if (requestParameters['AwsWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'AwsWriteRoleRequest',
                'Required parameter "AwsWriteRoleRequest" was null or undefined when calling awsWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsWriteRoleRequestToJSON(requestParameters['AwsWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, write and reference IAM policies that access keys can be made for.
     */
    async awsWriteRole(name: string, aws_mount_path: string, AwsWriteRoleRequest: AwsWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.awsWriteRoleRaw({ name: name, aws_mount_path: aws_mount_path, AwsWriteRoleRequest: AwsWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async awsWriteStaticRolesNameRaw(requestParameters: SecretsApiAwsWriteStaticRolesNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwsWriteStaticRolesNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling awsWriteStaticRolesName().'
            );
        }

        if (requestParameters['aws_mount_path'] == null) {
            throw new runtime.RequiredError(
                'aws_mount_path',
                'Required parameter "aws_mount_path" was null or undefined when calling awsWriteStaticRolesName().'
            );
        }

        if (requestParameters['AwsWriteStaticRolesNameRequest'] == null) {
            throw new runtime.RequiredError(
                'AwsWriteStaticRolesNameRequest',
                'Required parameter "AwsWriteStaticRolesNameRequest" was null or undefined when calling awsWriteStaticRolesName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{aws_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"aws_mount_path"}}`, encodeURIComponent(String(requestParameters['aws_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwsWriteStaticRolesNameRequestToJSON(requestParameters['AwsWriteStaticRolesNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwsWriteStaticRolesNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async awsWriteStaticRolesName(name: string, aws_mount_path: string, AwsWriteStaticRolesNameRequest: AwsWriteStaticRolesNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwsWriteStaticRolesNameResponse> {
        const response = await this.awsWriteStaticRolesNameRaw({ name: name, aws_mount_path: aws_mount_path, AwsWriteStaticRolesNameRequest: AwsWriteStaticRolesNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureConfigureRaw(requestParameters: SecretsApiAzureConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azure_mount_path'] == null) {
            throw new runtime.RequiredError(
                'azure_mount_path',
                'Required parameter "azure_mount_path" was null or undefined when calling azureConfigure().'
            );
        }

        if (requestParameters['AzureConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'AzureConfigureRequest',
                'Required parameter "AzureConfigureRequest" was null or undefined when calling azureConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azure_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AzureConfigureRequestToJSON(requestParameters['AzureConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureConfigure(azure_mount_path: string, AzureConfigureRequest: AzureConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureConfigureRaw({ azure_mount_path: azure_mount_path, AzureConfigureRequest: AzureConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureDeleteConfigurationRaw(requestParameters: SecretsApiAzureDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azure_mount_path'] == null) {
            throw new runtime.RequiredError(
                'azure_mount_path',
                'Required parameter "azure_mount_path" was null or undefined when calling azureDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azure_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureDeleteConfiguration(azure_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureDeleteConfigurationRaw({ azure_mount_path: azure_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureDeleteRoleRaw(requestParameters: SecretsApiAzureDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureDeleteRole().'
            );
        }

        if (requestParameters['azure_mount_path'] == null) {
            throw new runtime.RequiredError(
                'azure_mount_path',
                'Required parameter "azure_mount_path" was null or undefined when calling azureDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azure_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureDeleteRole(name: string, azure_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureDeleteRoleRaw({ name: name, azure_mount_path: azure_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * List existing roles.
     */
    async azureListRolesRaw(requestParameters: SecretsApiAzureListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['azure_mount_path'] == null) {
            throw new runtime.RequiredError(
                'azure_mount_path',
                'Required parameter "azure_mount_path" was null or undefined when calling azureListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling azureListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/roles/`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azure_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List existing roles.
     */
    async azureListRoles(azure_mount_path: string, list: AzureListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.azureListRolesRaw({ azure_mount_path: azure_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureReadConfigurationRaw(requestParameters: SecretsApiAzureReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azure_mount_path'] == null) {
            throw new runtime.RequiredError(
                'azure_mount_path',
                'Required parameter "azure_mount_path" was null or undefined when calling azureReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/config`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azure_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureReadConfiguration(azure_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureReadConfigurationRaw({ azure_mount_path: azure_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureReadRoleRaw(requestParameters: SecretsApiAzureReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureReadRole().'
            );
        }

        if (requestParameters['azure_mount_path'] == null) {
            throw new runtime.RequiredError(
                'azure_mount_path',
                'Required parameter "azure_mount_path" was null or undefined when calling azureReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azure_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureReadRole(name: string, azure_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureReadRoleRaw({ name: name, azure_mount_path: azure_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureRequestServicePrincipalCredentialsRaw(requestParameters: SecretsApiAzureRequestServicePrincipalCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling azureRequestServicePrincipalCredentials().'
            );
        }

        if (requestParameters['azure_mount_path'] == null) {
            throw new runtime.RequiredError(
                'azure_mount_path',
                'Required parameter "azure_mount_path" was null or undefined when calling azureRequestServicePrincipalCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/creds/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azure_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureRequestServicePrincipalCredentials(role: string, azure_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureRequestServicePrincipalCredentialsRaw({ role: role, azure_mount_path: azure_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async azureRotateRootRaw(requestParameters: SecretsApiAzureRotateRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['azure_mount_path'] == null) {
            throw new runtime.RequiredError(
                'azure_mount_path',
                'Required parameter "azure_mount_path" was null or undefined when calling azureRotateRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{azure_mount_path}/rotate-root`.replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azure_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async azureRotateRoot(azure_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureRotateRootRaw({ azure_mount_path: azure_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureWriteRoleRaw(requestParameters: SecretsApiAzureWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling azureWriteRole().'
            );
        }

        if (requestParameters['azure_mount_path'] == null) {
            throw new runtime.RequiredError(
                'azure_mount_path',
                'Required parameter "azure_mount_path" was null or undefined when calling azureWriteRole().'
            );
        }

        if (requestParameters['AzureWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'AzureWriteRoleRequest',
                'Required parameter "AzureWriteRoleRequest" was null or undefined when calling azureWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{azure_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"azure_mount_path"}}`, encodeURIComponent(String(requestParameters['azure_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AzureWriteRoleRequestToJSON(requestParameters['AzureWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the Vault roles used to generate Azure credentials.
     */
    async azureWriteRole(name: string, azure_mount_path: string, AzureWriteRoleRequest: AzureWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.azureWriteRoleRaw({ name: name, azure_mount_path: azure_mount_path, AzureWriteRoleRequest: AzureWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulConfigureAccessRaw(requestParameters: SecretsApiConsulConfigureAccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['consul_mount_path'] == null) {
            throw new runtime.RequiredError(
                'consul_mount_path',
                'Required parameter "consul_mount_path" was null or undefined when calling consulConfigureAccess().'
            );
        }

        if (requestParameters['ConsulConfigureAccessRequest'] == null) {
            throw new runtime.RequiredError(
                'ConsulConfigureAccessRequest',
                'Required parameter "ConsulConfigureAccessRequest" was null or undefined when calling consulConfigureAccess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{consul_mount_path}/config/access`.replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consul_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsulConfigureAccessRequestToJSON(requestParameters['ConsulConfigureAccessRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulConfigureAccess(consul_mount_path: string, ConsulConfigureAccessRequest: ConsulConfigureAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.consulConfigureAccessRaw({ consul_mount_path: consul_mount_path, ConsulConfigureAccessRequest: ConsulConfigureAccessRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulDeleteRoleRaw(requestParameters: SecretsApiConsulDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling consulDeleteRole().'
            );
        }

        if (requestParameters['consul_mount_path'] == null) {
            throw new runtime.RequiredError(
                'consul_mount_path',
                'Required parameter "consul_mount_path" was null or undefined when calling consulDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consul_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulDeleteRole(name: string, consul_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.consulDeleteRoleRaw({ name: name, consul_mount_path: consul_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulGenerateCredentialsRaw(requestParameters: SecretsApiConsulGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling consulGenerateCredentials().'
            );
        }

        if (requestParameters['consul_mount_path'] == null) {
            throw new runtime.RequiredError(
                'consul_mount_path',
                'Required parameter "consul_mount_path" was null or undefined when calling consulGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/creds/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consul_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulGenerateCredentials(role: string, consul_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.consulGenerateCredentialsRaw({ role: role, consul_mount_path: consul_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulListRolesRaw(requestParameters: SecretsApiConsulListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['consul_mount_path'] == null) {
            throw new runtime.RequiredError(
                'consul_mount_path',
                'Required parameter "consul_mount_path" was null or undefined when calling consulListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling consulListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/roles/`.replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consul_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async consulListRoles(consul_mount_path: string, list: ConsulListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.consulListRolesRaw({ consul_mount_path: consul_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulReadAccessConfigurationRaw(requestParameters: SecretsApiConsulReadAccessConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['consul_mount_path'] == null) {
            throw new runtime.RequiredError(
                'consul_mount_path',
                'Required parameter "consul_mount_path" was null or undefined when calling consulReadAccessConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/config/access`.replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consul_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulReadAccessConfiguration(consul_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.consulReadAccessConfigurationRaw({ consul_mount_path: consul_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulReadRoleRaw(requestParameters: SecretsApiConsulReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling consulReadRole().'
            );
        }

        if (requestParameters['consul_mount_path'] == null) {
            throw new runtime.RequiredError(
                'consul_mount_path',
                'Required parameter "consul_mount_path" was null or undefined when calling consulReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{consul_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consul_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulReadRole(name: string, consul_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.consulReadRoleRaw({ name: name, consul_mount_path: consul_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async consulWriteRoleRaw(requestParameters: SecretsApiConsulWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling consulWriteRole().'
            );
        }

        if (requestParameters['consul_mount_path'] == null) {
            throw new runtime.RequiredError(
                'consul_mount_path',
                'Required parameter "consul_mount_path" was null or undefined when calling consulWriteRole().'
            );
        }

        if (requestParameters['ConsulWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'ConsulWriteRoleRequest',
                'Required parameter "ConsulWriteRoleRequest" was null or undefined when calling consulWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{consul_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"consul_mount_path"}}`, encodeURIComponent(String(requestParameters['consul_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsulWriteRoleRequestToJSON(requestParameters['ConsulWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async consulWriteRole(name: string, consul_mount_path: string, ConsulWriteRoleRequest: ConsulWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.consulWriteRoleRaw({ name: name, consul_mount_path: consul_mount_path, ConsulWriteRoleRequest: ConsulWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the secret at the specified location.
     */
    async cubbyholeDeleteRaw(requestParameters: SecretsApiCubbyholeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling cubbyholeDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cubbyhole/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the secret at the specified location.
     */
    async cubbyholeDelete(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cubbyholeDeleteRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * Folders are suffixed with /. The input must be a folder; list on a file will not return a value. The values themselves are not accessible via this command.
     * List secret entries at the specified location.
     */
    async cubbyholeListRaw(requestParameters: SecretsApiCubbyholeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling cubbyholeList().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling cubbyholeList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cubbyhole/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Folders are suffixed with /. The input must be a folder; list on a file will not return a value. The values themselves are not accessible via this command.
     * List secret entries at the specified location.
     */
    async cubbyholeList(path: string, list: CubbyholeListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.cubbyholeListRaw({ path: path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the secret at the specified location.
     */
    async cubbyholeReadRaw(requestParameters: SecretsApiCubbyholeReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling cubbyholeRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cubbyhole/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the secret at the specified location.
     */
    async cubbyholeRead(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cubbyholeReadRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * Store a secret at the specified location.
     */
    async cubbyholeWriteRaw(requestParameters: SecretsApiCubbyholeWriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling cubbyholeWrite().'
            );
        }

        if (requestParameters['request_body'] == null) {
            throw new runtime.RequiredError(
                'request_body',
                'Required parameter "request_body" was null or undefined when calling cubbyholeWrite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cubbyhole/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['request_body'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Store a secret at the specified location.
     */
    async cubbyholeWrite(path: string, request_body: { [key: string]: any; }, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.cubbyholeWriteRaw({ path: path, request_body: request_body }, initOverrides);
        return await response.value();
    }

    /**
     */
    async databaseConfigureConnectionRaw(requestParameters: SecretsApiDatabaseConfigureConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseConfigureConnection().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseConfigureConnection().'
            );
        }

        if (requestParameters['DatabaseConfigureConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'DatabaseConfigureConnectionRequest',
                'Required parameter "DatabaseConfigureConnectionRequest" was null or undefined when calling databaseConfigureConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{database_mount_path}/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DatabaseConfigureConnectionRequestToJSON(requestParameters['DatabaseConfigureConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseConfigureConnection(name: string, database_mount_path: string, DatabaseConfigureConnectionRequest: DatabaseConfigureConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseConfigureConnectionRaw({ name: name, database_mount_path: database_mount_path, DatabaseConfigureConnectionRequest: DatabaseConfigureConnectionRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async databaseDeleteConnectionConfigurationRaw(requestParameters: SecretsApiDatabaseDeleteConnectionConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseDeleteConnectionConfiguration().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseDeleteConnectionConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseDeleteConnectionConfiguration(name: string, database_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseDeleteConnectionConfigurationRaw({ name: name, database_mount_path: database_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseDeleteRoleRaw(requestParameters: SecretsApiDatabaseDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseDeleteRole().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseDeleteRole(name: string, database_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseDeleteRoleRaw({ name: name, database_mount_path: database_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseDeleteStaticRoleRaw(requestParameters: SecretsApiDatabaseDeleteStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseDeleteStaticRole().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseDeleteStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseDeleteStaticRole(name: string, database_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseDeleteStaticRoleRaw({ name: name, database_mount_path: database_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Request database credentials for a certain role.
     */
    async databaseGenerateCredentialsRaw(requestParameters: SecretsApiDatabaseGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseGenerateCredentials().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request database credentials for a certain role.
     */
    async databaseGenerateCredentials(name: string, database_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseGenerateCredentialsRaw({ name: name, database_mount_path: database_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Configure connection details to a database plugin.
     */
    async databaseListConnectionsRaw(requestParameters: SecretsApiDatabaseListConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseListConnections().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling databaseListConnections().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/config/`.replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Configure connection details to a database plugin.
     */
    async databaseListConnections(database_mount_path: string, list: DatabaseListConnectionsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.databaseListConnectionsRaw({ database_mount_path: database_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseListRolesRaw(requestParameters: SecretsApiDatabaseListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling databaseListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/roles/`.replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseListRoles(database_mount_path: string, list: DatabaseListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.databaseListRolesRaw({ database_mount_path: database_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseListStaticRolesRaw(requestParameters: SecretsApiDatabaseListStaticRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseListStaticRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling databaseListStaticRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/static-roles/`.replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseListStaticRoles(database_mount_path: string, list: DatabaseListStaticRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.databaseListStaticRolesRaw({ database_mount_path: database_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async databaseReadConnectionConfigurationRaw(requestParameters: SecretsApiDatabaseReadConnectionConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseReadConnectionConfiguration().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseReadConnectionConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseReadConnectionConfiguration(name: string, database_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseReadConnectionConfigurationRaw({ name: name, database_mount_path: database_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseReadRoleRaw(requestParameters: SecretsApiDatabaseReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseReadRole().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseReadRole(name: string, database_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseReadRoleRaw({ name: name, database_mount_path: database_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseReadStaticRoleRaw(requestParameters: SecretsApiDatabaseReadStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseReadStaticRole().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseReadStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseReadStaticRole(name: string, database_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseReadStaticRoleRaw({ name: name, database_mount_path: database_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Request database credentials for a certain static role. These credentials are rotated periodically.
     */
    async databaseReadStaticRoleCredentialsRaw(requestParameters: SecretsApiDatabaseReadStaticRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseReadStaticRoleCredentials().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseReadStaticRoleCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/static-creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request database credentials for a certain static role. These credentials are rotated periodically.
     */
    async databaseReadStaticRoleCredentials(name: string, database_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseReadStaticRoleCredentialsRaw({ name: name, database_mount_path: database_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Reloads all connections using a named database plugin.
     */
    async databaseReloadPluginRaw(requestParameters: SecretsApiDatabaseReloadPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['plugin_name'] == null) {
            throw new runtime.RequiredError(
                'plugin_name',
                'Required parameter "plugin_name" was null or undefined when calling databaseReloadPlugin().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseReloadPlugin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/reload/{plugin_name}`.replace(`{${"plugin_name"}}`, encodeURIComponent(String(requestParameters['plugin_name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reloads all connections using a named database plugin.
     */
    async databaseReloadPlugin(plugin_name: string, database_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseReloadPluginRaw({ plugin_name: plugin_name, database_mount_path: database_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Resets a database plugin.
     */
    async databaseResetConnectionRaw(requestParameters: SecretsApiDatabaseResetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseResetConnection().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseResetConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/reset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets a database plugin.
     */
    async databaseResetConnection(name: string, database_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseResetConnectionRaw({ name: name, database_mount_path: database_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async databaseRotateRootCredentialsRaw(requestParameters: SecretsApiDatabaseRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseRotateRootCredentials().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/rotate-root/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseRotateRootCredentials(name: string, database_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseRotateRootCredentialsRaw({ name: name, database_mount_path: database_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async databaseRotateStaticRoleCredentialsRaw(requestParameters: SecretsApiDatabaseRotateStaticRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseRotateStaticRoleCredentials().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseRotateStaticRoleCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{database_mount_path}/rotate-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async databaseRotateStaticRoleCredentials(name: string, database_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseRotateStaticRoleCredentialsRaw({ name: name, database_mount_path: database_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseWriteRoleRaw(requestParameters: SecretsApiDatabaseWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseWriteRole().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseWriteRole().'
            );
        }

        if (requestParameters['DatabaseWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'DatabaseWriteRoleRequest',
                'Required parameter "DatabaseWriteRoleRequest" was null or undefined when calling databaseWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{database_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DatabaseWriteRoleRequestToJSON(requestParameters['DatabaseWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async databaseWriteRole(name: string, database_mount_path: string, DatabaseWriteRoleRequest: DatabaseWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseWriteRoleRaw({ name: name, database_mount_path: database_mount_path, DatabaseWriteRoleRequest: DatabaseWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseWriteStaticRoleRaw(requestParameters: SecretsApiDatabaseWriteStaticRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling databaseWriteStaticRole().'
            );
        }

        if (requestParameters['database_mount_path'] == null) {
            throw new runtime.RequiredError(
                'database_mount_path',
                'Required parameter "database_mount_path" was null or undefined when calling databaseWriteStaticRole().'
            );
        }

        if (requestParameters['DatabaseWriteStaticRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'DatabaseWriteStaticRoleRequest',
                'Required parameter "DatabaseWriteStaticRoleRequest" was null or undefined when calling databaseWriteStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{database_mount_path}/static-roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"database_mount_path"}}`, encodeURIComponent(String(requestParameters['database_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DatabaseWriteStaticRoleRequestToJSON(requestParameters['DatabaseWriteStaticRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the static roles that can be created with this backend.
     */
    async databaseWriteStaticRole(name: string, database_mount_path: string, DatabaseWriteStaticRoleRequest: DatabaseWriteStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.databaseWriteStaticRoleRaw({ name: name, database_mount_path: database_mount_path, DatabaseWriteStaticRoleRequest: DatabaseWriteStaticRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudConfigureRaw(requestParameters: SecretsApiGoogleCloudConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudConfigure().'
            );
        }

        if (requestParameters['GoogleCloudConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudConfigureRequest',
                'Required parameter "GoogleCloudConfigureRequest" was null or undefined when calling googleCloudConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/config`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudConfigureRequestToJSON(requestParameters['GoogleCloudConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudConfigure(gcp_mount_path: string, GoogleCloudConfigureRequest: GoogleCloudConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudConfigureRaw({ gcp_mount_path: gcp_mount_path, GoogleCloudConfigureRequest: GoogleCloudConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudDeleteImpersonatedAccountRaw(requestParameters: SecretsApiGoogleCloudDeleteImpersonatedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudDeleteImpersonatedAccount().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudDeleteImpersonatedAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudDeleteImpersonatedAccount(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudDeleteImpersonatedAccountRaw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudDeleteRolesetRaw(requestParameters: SecretsApiGoogleCloudDeleteRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudDeleteRoleset().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudDeleteRoleset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudDeleteRoleset(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudDeleteRolesetRaw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudDeleteStaticAccountRaw(requestParameters: SecretsApiGoogleCloudDeleteStaticAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudDeleteStaticAccount().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudDeleteStaticAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudDeleteStaticAccount(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudDeleteStaticAccountRaw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateImpersonatedAccountAccessTokenRaw(requestParameters: SecretsApiGoogleCloudGenerateImpersonatedAccountAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateImpersonatedAccountAccessToken(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateImpersonatedAccountAccessTokenRaw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateImpersonatedAccountAccessToken2Raw(requestParameters: SecretsApiGoogleCloudGenerateImpersonatedAccountAccessToken2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken2().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateImpersonatedAccountAccessToken2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateImpersonatedAccountAccessToken2(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateImpersonatedAccountAccessToken2Raw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetAccessTokenRaw(requestParameters: SecretsApiGoogleCloudGenerateRolesetAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateRolesetAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{roleset}/token`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken(roleset: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetAccessTokenRaw({ roleset: roleset, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken2Raw(requestParameters: SecretsApiGoogleCloudGenerateRolesetAccessToken2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken2().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateRolesetAccessToken2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{roleset}/token`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken2(roleset: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetAccessToken2Raw({ roleset: roleset, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken3Raw(requestParameters: SecretsApiGoogleCloudGenerateRolesetAccessToken3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken3().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateRolesetAccessToken3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/token/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken3(roleset: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetAccessToken3Raw({ roleset: roleset, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken4Raw(requestParameters: SecretsApiGoogleCloudGenerateRolesetAccessToken4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetAccessToken4().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateRolesetAccessToken4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/token/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetAccessToken4(roleset: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetAccessToken4Raw({ roleset: roleset, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetKeyRaw(requestParameters: SecretsApiGoogleCloudGenerateRolesetKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateRolesetKey().'
            );
        }

        if (requestParameters['GoogleCloudGenerateRolesetKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudGenerateRolesetKeyRequest',
                'Required parameter "GoogleCloudGenerateRolesetKeyRequest" was null or undefined when calling googleCloudGenerateRolesetKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{roleset}/key`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudGenerateRolesetKeyRequestToJSON(requestParameters['GoogleCloudGenerateRolesetKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetKey(roleset: string, gcp_mount_path: string, GoogleCloudGenerateRolesetKeyRequest: GoogleCloudGenerateRolesetKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetKeyRaw({ roleset: roleset, gcp_mount_path: gcp_mount_path, GoogleCloudGenerateRolesetKeyRequest: GoogleCloudGenerateRolesetKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetKey2Raw(requestParameters: SecretsApiGoogleCloudGenerateRolesetKey2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey2().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateRolesetKey2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['key_algorithm'] != null) {
            queryParameters['key_algorithm'] = requestParameters['key_algorithm'];
        }

        if (requestParameters['key_type'] != null) {
            queryParameters['key_type'] = requestParameters['key_type'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{roleset}/key`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetKey2(roleset: string, gcp_mount_path: string, key_algorithm?: string, key_type?: string, ttl?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetKey2Raw({ roleset: roleset, gcp_mount_path: gcp_mount_path, key_algorithm: key_algorithm, key_type: key_type, ttl: ttl }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetKey3Raw(requestParameters: SecretsApiGoogleCloudGenerateRolesetKey3OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey3().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateRolesetKey3().'
            );
        }

        if (requestParameters['GoogleCloudGenerateRolesetKey3Request'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudGenerateRolesetKey3Request',
                'Required parameter "GoogleCloudGenerateRolesetKey3Request" was null or undefined when calling googleCloudGenerateRolesetKey3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/key/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudGenerateRolesetKey3RequestToJSON(requestParameters['GoogleCloudGenerateRolesetKey3Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetKey3(roleset: string, gcp_mount_path: string, GoogleCloudGenerateRolesetKey3Request: GoogleCloudGenerateRolesetKey3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetKey3Raw({ roleset: roleset, gcp_mount_path: gcp_mount_path, GoogleCloudGenerateRolesetKey3Request: GoogleCloudGenerateRolesetKey3Request }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateRolesetKey4Raw(requestParameters: SecretsApiGoogleCloudGenerateRolesetKey4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['roleset'] == null) {
            throw new runtime.RequiredError(
                'roleset',
                'Required parameter "roleset" was null or undefined when calling googleCloudGenerateRolesetKey4().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateRolesetKey4().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['key_algorithm'] != null) {
            queryParameters['key_algorithm'] = requestParameters['key_algorithm'];
        }

        if (requestParameters['key_type'] != null) {
            queryParameters['key_type'] = requestParameters['key_type'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/key/{roleset}`.replace(`{${"roleset"}}`, encodeURIComponent(String(requestParameters['roleset']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateRolesetKey4(roleset: string, gcp_mount_path: string, key_algorithm?: string, key_type?: string, ttl?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateRolesetKey4Raw({ roleset: roleset, gcp_mount_path: gcp_mount_path, key_algorithm: key_algorithm, key_type: key_type, ttl: ttl }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateStaticAccountAccessTokenRaw(requestParameters: SecretsApiGoogleCloudGenerateStaticAccountAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateStaticAccountAccessToken(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateStaticAccountAccessTokenRaw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateStaticAccountAccessToken2Raw(requestParameters: SecretsApiGoogleCloudGenerateStaticAccountAccessToken2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken2().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateStaticAccountAccessToken2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateStaticAccountAccessToken2(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateStaticAccountAccessToken2Raw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateStaticAccountKeyRaw(requestParameters: SecretsApiGoogleCloudGenerateStaticAccountKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountKey().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateStaticAccountKey().'
            );
        }

        if (requestParameters['GoogleCloudGenerateStaticAccountKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudGenerateStaticAccountKeyRequest',
                'Required parameter "GoogleCloudGenerateStaticAccountKeyRequest" was null or undefined when calling googleCloudGenerateStaticAccountKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudGenerateStaticAccountKeyRequestToJSON(requestParameters['GoogleCloudGenerateStaticAccountKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateStaticAccountKey(name: string, gcp_mount_path: string, GoogleCloudGenerateStaticAccountKeyRequest: GoogleCloudGenerateStaticAccountKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateStaticAccountKeyRaw({ name: name, gcp_mount_path: gcp_mount_path, GoogleCloudGenerateStaticAccountKeyRequest: GoogleCloudGenerateStaticAccountKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudGenerateStaticAccountKey2Raw(requestParameters: SecretsApiGoogleCloudGenerateStaticAccountKey2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudGenerateStaticAccountKey2().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudGenerateStaticAccountKey2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['key_algorithm'] != null) {
            queryParameters['key_algorithm'] = requestParameters['key_algorithm'];
        }

        if (requestParameters['key_type'] != null) {
            queryParameters['key_type'] = requestParameters['key_type'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudGenerateStaticAccountKey2(name: string, gcp_mount_path: string, key_algorithm?: string, key_type?: string, ttl?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudGenerateStaticAccountKey2Raw({ name: name, gcp_mount_path: gcp_mount_path, key_algorithm: key_algorithm, key_type: key_type, ttl: ttl }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsConfigureRaw(requestParameters: SecretsApiGoogleCloudKmsConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsConfigure().'
            );
        }

        if (requestParameters['GoogleCloudKmsConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudKmsConfigureRequest',
                'Required parameter "GoogleCloudKmsConfigureRequest" was null or undefined when calling googleCloudKmsConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/config`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsConfigureRequestToJSON(requestParameters['GoogleCloudKmsConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsConfigure(gcpkms_mount_path: string, GoogleCloudKmsConfigureRequest: GoogleCloudKmsConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsConfigureRaw({ gcpkms_mount_path: gcpkms_mount_path, GoogleCloudKmsConfigureRequest: GoogleCloudKmsConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsConfigureKeyRaw(requestParameters: SecretsApiGoogleCloudKmsConfigureKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsConfigureKey().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsConfigureKey().'
            );
        }

        if (requestParameters['GoogleCloudKmsConfigureKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudKmsConfigureKeyRequest',
                'Required parameter "GoogleCloudKmsConfigureKeyRequest" was null or undefined when calling googleCloudKmsConfigureKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/config/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsConfigureKeyRequestToJSON(requestParameters['GoogleCloudKmsConfigureKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsConfigureKey(key: string, gcpkms_mount_path: string, GoogleCloudKmsConfigureKeyRequest: GoogleCloudKmsConfigureKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsConfigureKeyRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path, GoogleCloudKmsConfigureKeyRequest: GoogleCloudKmsConfigureKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Decrypt a ciphertext value using a named key
     */
    async googleCloudKmsDecryptRaw(requestParameters: SecretsApiGoogleCloudKmsDecryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsDecrypt().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsDecrypt().'
            );
        }

        if (requestParameters['GoogleCloudKmsDecryptRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudKmsDecryptRequest',
                'Required parameter "GoogleCloudKmsDecryptRequest" was null or undefined when calling googleCloudKmsDecrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/decrypt/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsDecryptRequestToJSON(requestParameters['GoogleCloudKmsDecryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decrypt a ciphertext value using a named key
     */
    async googleCloudKmsDecrypt(key: string, gcpkms_mount_path: string, GoogleCloudKmsDecryptRequest: GoogleCloudKmsDecryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsDecryptRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path, GoogleCloudKmsDecryptRequest: GoogleCloudKmsDecryptRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsDeleteConfigurationRaw(requestParameters: SecretsApiGoogleCloudKmsDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/config`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsDeleteConfiguration(gcpkms_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsDeleteConfigurationRaw({ gcpkms_mount_path: gcpkms_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsDeleteKeyRaw(requestParameters: SecretsApiGoogleCloudKmsDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsDeleteKey().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsDeleteKey(key: string, gcpkms_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsDeleteKeyRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsDeregisterKeyRaw(requestParameters: SecretsApiGoogleCloudKmsDeregisterKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsDeregisterKey().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsDeregisterKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/deregister/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsDeregisterKey(key: string, gcpkms_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsDeregisterKeyRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsDeregisterKey2Raw(requestParameters: SecretsApiGoogleCloudKmsDeregisterKey2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsDeregisterKey2().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsDeregisterKey2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/deregister/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsDeregisterKey2(key: string, gcpkms_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsDeregisterKey2Raw({ key: key, gcpkms_mount_path: gcpkms_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Encrypt a plaintext value using a named key
     */
    async googleCloudKmsEncryptRaw(requestParameters: SecretsApiGoogleCloudKmsEncryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsEncrypt().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsEncrypt().'
            );
        }

        if (requestParameters['GoogleCloudKmsEncryptRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudKmsEncryptRequest',
                'Required parameter "GoogleCloudKmsEncryptRequest" was null or undefined when calling googleCloudKmsEncrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/encrypt/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsEncryptRequestToJSON(requestParameters['GoogleCloudKmsEncryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Encrypt a plaintext value using a named key
     */
    async googleCloudKmsEncrypt(key: string, gcpkms_mount_path: string, GoogleCloudKmsEncryptRequest: GoogleCloudKmsEncryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsEncryptRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path, GoogleCloudKmsEncryptRequest: GoogleCloudKmsEncryptRequest }, initOverrides);
        return await response.value();
    }

    /**
     * List named keys
     */
    async googleCloudKmsListKeysRaw(requestParameters: SecretsApiGoogleCloudKmsListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudKmsListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List named keys
     */
    async googleCloudKmsListKeys(gcpkms_mount_path: string, list: GoogleCloudKmsListKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudKmsListKeysRaw({ gcpkms_mount_path: gcpkms_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsReadConfigurationRaw(requestParameters: SecretsApiGoogleCloudKmsReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/config`.replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsReadConfiguration(gcpkms_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsReadConfigurationRaw({ gcpkms_mount_path: gcpkms_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsReadKeyRaw(requestParameters: SecretsApiGoogleCloudKmsReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsReadKey().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsReadKey(key: string, gcpkms_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsReadKeyRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsReadKeyConfigurationRaw(requestParameters: SecretsApiGoogleCloudKmsReadKeyConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsReadKeyConfiguration().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsReadKeyConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/config/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsReadKeyConfiguration(key: string, gcpkms_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsReadKeyConfigurationRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Re-encrypt existing ciphertext data to a new version
     */
    async googleCloudKmsReencryptRaw(requestParameters: SecretsApiGoogleCloudKmsReencryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsReencrypt().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsReencrypt().'
            );
        }

        if (requestParameters['GoogleCloudKmsReencryptRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudKmsReencryptRequest',
                'Required parameter "GoogleCloudKmsReencryptRequest" was null or undefined when calling googleCloudKmsReencrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/reencrypt/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsReencryptRequestToJSON(requestParameters['GoogleCloudKmsReencryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Re-encrypt existing ciphertext data to a new version
     */
    async googleCloudKmsReencrypt(key: string, gcpkms_mount_path: string, GoogleCloudKmsReencryptRequest: GoogleCloudKmsReencryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsReencryptRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path, GoogleCloudKmsReencryptRequest: GoogleCloudKmsReencryptRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Register an existing crypto key in Google Cloud KMS
     */
    async googleCloudKmsRegisterKeyRaw(requestParameters: SecretsApiGoogleCloudKmsRegisterKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsRegisterKey().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsRegisterKey().'
            );
        }

        if (requestParameters['GoogleCloudKmsRegisterKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudKmsRegisterKeyRequest',
                'Required parameter "GoogleCloudKmsRegisterKeyRequest" was null or undefined when calling googleCloudKmsRegisterKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/register/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsRegisterKeyRequestToJSON(requestParameters['GoogleCloudKmsRegisterKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register an existing crypto key in Google Cloud KMS
     */
    async googleCloudKmsRegisterKey(key: string, gcpkms_mount_path: string, GoogleCloudKmsRegisterKeyRequest: GoogleCloudKmsRegisterKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsRegisterKeyRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path, GoogleCloudKmsRegisterKeyRequest: GoogleCloudKmsRegisterKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the public key associated with the named key
     */
    async googleCloudKmsRetrievePublicKeyRaw(requestParameters: SecretsApiGoogleCloudKmsRetrievePublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsRetrievePublicKey().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsRetrievePublicKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/pubkey/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the public key associated with the named key
     */
    async googleCloudKmsRetrievePublicKey(key: string, gcpkms_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsRetrievePublicKeyRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Rotate a crypto key to a new primary version
     */
    async googleCloudKmsRotateKeyRaw(requestParameters: SecretsApiGoogleCloudKmsRotateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsRotateKey().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsRotateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/rotate/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rotate a crypto key to a new primary version
     */
    async googleCloudKmsRotateKey(key: string, gcpkms_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsRotateKeyRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Signs a message or digest using a named key
     */
    async googleCloudKmsSignRaw(requestParameters: SecretsApiGoogleCloudKmsSignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsSign().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsSign().'
            );
        }

        if (requestParameters['GoogleCloudKmsSignRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudKmsSignRequest',
                'Required parameter "GoogleCloudKmsSignRequest" was null or undefined when calling googleCloudKmsSign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/sign/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsSignRequestToJSON(requestParameters['GoogleCloudKmsSignRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Signs a message or digest using a named key
     */
    async googleCloudKmsSign(key: string, gcpkms_mount_path: string, GoogleCloudKmsSignRequest: GoogleCloudKmsSignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsSignRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path, GoogleCloudKmsSignRequest: GoogleCloudKmsSignRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsTrimKeyVersionsRaw(requestParameters: SecretsApiGoogleCloudKmsTrimKeyVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsTrimKeyVersions().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsTrimKeyVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/trim/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsTrimKeyVersions(key: string, gcpkms_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsTrimKeyVersionsRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudKmsTrimKeyVersions2Raw(requestParameters: SecretsApiGoogleCloudKmsTrimKeyVersions2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsTrimKeyVersions2().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsTrimKeyVersions2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/trim/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudKmsTrimKeyVersions2(key: string, gcpkms_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsTrimKeyVersions2Raw({ key: key, gcpkms_mount_path: gcpkms_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Verify a signature using a named key
     */
    async googleCloudKmsVerifyRaw(requestParameters: SecretsApiGoogleCloudKmsVerifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsVerify().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsVerify().'
            );
        }

        if (requestParameters['GoogleCloudKmsVerifyRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudKmsVerifyRequest',
                'Required parameter "GoogleCloudKmsVerifyRequest" was null or undefined when calling googleCloudKmsVerify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/verify/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsVerifyRequestToJSON(requestParameters['GoogleCloudKmsVerifyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify a signature using a named key
     */
    async googleCloudKmsVerify(key: string, gcpkms_mount_path: string, GoogleCloudKmsVerifyRequest: GoogleCloudKmsVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsVerifyRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path, GoogleCloudKmsVerifyRequest: GoogleCloudKmsVerifyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsWriteKeyRaw(requestParameters: SecretsApiGoogleCloudKmsWriteKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling googleCloudKmsWriteKey().'
            );
        }

        if (requestParameters['gcpkms_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcpkms_mount_path',
                'Required parameter "gcpkms_mount_path" was null or undefined when calling googleCloudKmsWriteKey().'
            );
        }

        if (requestParameters['GoogleCloudKmsWriteKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudKmsWriteKeyRequest',
                'Required parameter "GoogleCloudKmsWriteKeyRequest" was null or undefined when calling googleCloudKmsWriteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcpkms_mount_path}/keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"gcpkms_mount_path"}}`, encodeURIComponent(String(requestParameters['gcpkms_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudKmsWriteKeyRequestToJSON(requestParameters['GoogleCloudKmsWriteKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Interact with crypto keys in Vault and Google Cloud KMS
     */
    async googleCloudKmsWriteKey(key: string, gcpkms_mount_path: string, GoogleCloudKmsWriteKeyRequest: GoogleCloudKmsWriteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudKmsWriteKeyRaw({ key: key, gcpkms_mount_path: gcpkms_mount_path, GoogleCloudKmsWriteKeyRequest: GoogleCloudKmsWriteKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListImpersonatedAccountsRaw(requestParameters: SecretsApiGoogleCloudListImpersonatedAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudListImpersonatedAccounts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListImpersonatedAccounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListImpersonatedAccounts(gcp_mount_path: string, list: GoogleCloudListImpersonatedAccountsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListImpersonatedAccountsRaw({ gcp_mount_path: gcp_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListImpersonatedAccounts2Raw(requestParameters: SecretsApiGoogleCloudListImpersonatedAccounts2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudListImpersonatedAccounts2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListImpersonatedAccounts2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-accounts/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListImpersonatedAccounts2(gcp_mount_path: string, list: GoogleCloudListImpersonatedAccounts2ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListImpersonatedAccounts2Raw({ gcp_mount_path: gcp_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListRolesetsRaw(requestParameters: SecretsApiGoogleCloudListRolesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudListRolesets().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListRolesets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListRolesets(gcp_mount_path: string, list: GoogleCloudListRolesetsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListRolesetsRaw({ gcp_mount_path: gcp_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListRolesets2Raw(requestParameters: SecretsApiGoogleCloudListRolesets2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudListRolesets2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListRolesets2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/rolesets/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListRolesets2(gcp_mount_path: string, list: GoogleCloudListRolesets2ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListRolesets2Raw({ gcp_mount_path: gcp_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListStaticAccountsRaw(requestParameters: SecretsApiGoogleCloudListStaticAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudListStaticAccounts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListStaticAccounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListStaticAccounts(gcp_mount_path: string, list: GoogleCloudListStaticAccountsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListStaticAccountsRaw({ gcp_mount_path: gcp_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudListStaticAccounts2Raw(requestParameters: SecretsApiGoogleCloudListStaticAccounts2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudListStaticAccounts2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling googleCloudListStaticAccounts2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-accounts/`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async googleCloudListStaticAccounts2(gcp_mount_path: string, list: GoogleCloudListStaticAccounts2ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.googleCloudListStaticAccounts2Raw({ gcp_mount_path: gcp_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudReadConfigurationRaw(requestParameters: SecretsApiGoogleCloudReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/config`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadConfiguration(gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudReadConfigurationRaw({ gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudReadImpersonatedAccountRaw(requestParameters: SecretsApiGoogleCloudReadImpersonatedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudReadImpersonatedAccount().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudReadImpersonatedAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadImpersonatedAccount(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudReadImpersonatedAccountRaw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudReadRolesetRaw(requestParameters: SecretsApiGoogleCloudReadRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudReadRoleset().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudReadRoleset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadRoleset(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudReadRolesetRaw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudReadStaticAccountRaw(requestParameters: SecretsApiGoogleCloudReadStaticAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudReadStaticAccount().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudReadStaticAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudReadStaticAccount(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudReadStaticAccountRaw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudRotateRolesetRaw(requestParameters: SecretsApiGoogleCloudRotateRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudRotateRoleset().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudRotateRoleset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateRoleset(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudRotateRolesetRaw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudRotateRolesetKeyRaw(requestParameters: SecretsApiGoogleCloudRotateRolesetKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudRotateRolesetKey().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudRotateRolesetKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}/rotate-key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateRolesetKey(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudRotateRolesetKeyRaw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudRotateRootCredentialsRaw(requestParameters: SecretsApiGoogleCloudRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/config/rotate-root`.replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateRootCredentials(gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudRotateRootCredentialsRaw({ gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudRotateStaticAccountKeyRaw(requestParameters: SecretsApiGoogleCloudRotateStaticAccountKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudRotateStaticAccountKey().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudRotateStaticAccountKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}/rotate-key`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudRotateStaticAccountKey(name: string, gcp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudRotateStaticAccountKeyRaw({ name: name, gcp_mount_path: gcp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudWriteImpersonatedAccountRaw(requestParameters: SecretsApiGoogleCloudWriteImpersonatedAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudWriteImpersonatedAccount().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudWriteImpersonatedAccount().'
            );
        }

        if (requestParameters['GoogleCloudWriteImpersonatedAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudWriteImpersonatedAccountRequest',
                'Required parameter "GoogleCloudWriteImpersonatedAccountRequest" was null or undefined when calling googleCloudWriteImpersonatedAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/impersonated-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudWriteImpersonatedAccountRequestToJSON(requestParameters['GoogleCloudWriteImpersonatedAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudWriteImpersonatedAccount(name: string, gcp_mount_path: string, GoogleCloudWriteImpersonatedAccountRequest: GoogleCloudWriteImpersonatedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudWriteImpersonatedAccountRaw({ name: name, gcp_mount_path: gcp_mount_path, GoogleCloudWriteImpersonatedAccountRequest: GoogleCloudWriteImpersonatedAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudWriteRolesetRaw(requestParameters: SecretsApiGoogleCloudWriteRolesetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudWriteRoleset().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudWriteRoleset().'
            );
        }

        if (requestParameters['GoogleCloudWriteRolesetRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudWriteRolesetRequest',
                'Required parameter "GoogleCloudWriteRolesetRequest" was null or undefined when calling googleCloudWriteRoleset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/roleset/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudWriteRolesetRequestToJSON(requestParameters['GoogleCloudWriteRolesetRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudWriteRoleset(name: string, gcp_mount_path: string, GoogleCloudWriteRolesetRequest: GoogleCloudWriteRolesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudWriteRolesetRaw({ name: name, gcp_mount_path: gcp_mount_path, GoogleCloudWriteRolesetRequest: GoogleCloudWriteRolesetRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async googleCloudWriteStaticAccountRaw(requestParameters: SecretsApiGoogleCloudWriteStaticAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling googleCloudWriteStaticAccount().'
            );
        }

        if (requestParameters['gcp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'gcp_mount_path',
                'Required parameter "gcp_mount_path" was null or undefined when calling googleCloudWriteStaticAccount().'
            );
        }

        if (requestParameters['GoogleCloudWriteStaticAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'GoogleCloudWriteStaticAccountRequest',
                'Required parameter "GoogleCloudWriteStaticAccountRequest" was null or undefined when calling googleCloudWriteStaticAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{gcp_mount_path}/static-account/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"gcp_mount_path"}}`, encodeURIComponent(String(requestParameters['gcp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleCloudWriteStaticAccountRequestToJSON(requestParameters['GoogleCloudWriteStaticAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleCloudWriteStaticAccount(name: string, gcp_mount_path: string, GoogleCloudWriteStaticAccountRequest: GoogleCloudWriteStaticAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.googleCloudWriteStaticAccountRaw({ name: name, gcp_mount_path: gcp_mount_path, GoogleCloudWriteStaticAccountRequest: GoogleCloudWriteStaticAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementDeleteKeyRaw(requestParameters: SecretsApiKeyManagementDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling keyManagementDeleteKey().'
            );
        }

        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{keymgmt_mount_path}/key/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async keyManagementDeleteKey(name: string, keymgmt_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.keyManagementDeleteKeyRaw({ name: name, keymgmt_mount_path: keymgmt_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementDeleteKeyInKmsProviderRaw(requestParameters: SecretsApiKeyManagementDeleteKeyInKmsProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key_name'] == null) {
            throw new runtime.RequiredError(
                'key_name',
                'Required parameter "key_name" was null or undefined when calling keyManagementDeleteKeyInKmsProvider().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling keyManagementDeleteKeyInKmsProvider().'
            );
        }

        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementDeleteKeyInKmsProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{keymgmt_mount_path}/kms/{name}/key/{key_name}`.replace(`{${"key_name"}}`, encodeURIComponent(String(requestParameters['key_name']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async keyManagementDeleteKeyInKmsProvider(key_name: string, name: string, keymgmt_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.keyManagementDeleteKeyInKmsProviderRaw({ key_name: key_name, name: name, keymgmt_mount_path: keymgmt_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementDeleteKmsProviderRaw(requestParameters: SecretsApiKeyManagementDeleteKmsProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling keyManagementDeleteKmsProvider().'
            );
        }

        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementDeleteKmsProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{keymgmt_mount_path}/kms/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async keyManagementDeleteKmsProvider(name: string, keymgmt_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.keyManagementDeleteKmsProviderRaw({ name: name, keymgmt_mount_path: keymgmt_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementDistributeKeyInKmsProviderRaw(requestParameters: SecretsApiKeyManagementDistributeKeyInKmsProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key_name'] == null) {
            throw new runtime.RequiredError(
                'key_name',
                'Required parameter "key_name" was null or undefined when calling keyManagementDistributeKeyInKmsProvider().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling keyManagementDistributeKeyInKmsProvider().'
            );
        }

        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementDistributeKeyInKmsProvider().'
            );
        }

        if (requestParameters['KeyManagementDistributeKeyInKmsProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'KeyManagementDistributeKeyInKmsProviderRequest',
                'Required parameter "KeyManagementDistributeKeyInKmsProviderRequest" was null or undefined when calling keyManagementDistributeKeyInKmsProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{keymgmt_mount_path}/kms/{name}/key/{key_name}`.replace(`{${"key_name"}}`, encodeURIComponent(String(requestParameters['key_name']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KeyManagementDistributeKeyInKmsProviderRequestToJSON(requestParameters['KeyManagementDistributeKeyInKmsProviderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async keyManagementDistributeKeyInKmsProvider(key_name: string, name: string, keymgmt_mount_path: string, KeyManagementDistributeKeyInKmsProviderRequest: KeyManagementDistributeKeyInKmsProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.keyManagementDistributeKeyInKmsProviderRaw({ key_name: key_name, name: name, keymgmt_mount_path: keymgmt_mount_path, KeyManagementDistributeKeyInKmsProviderRequest: KeyManagementDistributeKeyInKmsProviderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementListKeysRaw(requestParameters: SecretsApiKeyManagementListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling keyManagementListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{keymgmt_mount_path}/key/`.replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async keyManagementListKeys(keymgmt_mount_path: string, list: KeyManagementListKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.keyManagementListKeysRaw({ keymgmt_mount_path: keymgmt_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementListKeysInKmsProviderRaw(requestParameters: SecretsApiKeyManagementListKeysInKmsProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling keyManagementListKeysInKmsProvider().'
            );
        }

        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementListKeysInKmsProvider().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling keyManagementListKeysInKmsProvider().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{keymgmt_mount_path}/kms/{name}/key/`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async keyManagementListKeysInKmsProvider(name: string, keymgmt_mount_path: string, list: KeyManagementListKeysInKmsProviderListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.keyManagementListKeysInKmsProviderRaw({ name: name, keymgmt_mount_path: keymgmt_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementListKmsProvidersRaw(requestParameters: SecretsApiKeyManagementListKmsProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementListKmsProviders().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling keyManagementListKmsProviders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{keymgmt_mount_path}/kms/`.replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async keyManagementListKmsProviders(keymgmt_mount_path: string, list: KeyManagementListKmsProvidersListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.keyManagementListKmsProvidersRaw({ keymgmt_mount_path: keymgmt_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementListKmsProvidersForKeyRaw(requestParameters: SecretsApiKeyManagementListKmsProvidersForKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling keyManagementListKmsProvidersForKey().'
            );
        }

        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementListKmsProvidersForKey().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling keyManagementListKmsProvidersForKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{keymgmt_mount_path}/key/{name}/kms/`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async keyManagementListKmsProvidersForKey(name: string, keymgmt_mount_path: string, list: KeyManagementListKmsProvidersForKeyListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.keyManagementListKmsProvidersForKeyRaw({ name: name, keymgmt_mount_path: keymgmt_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementReadKeyRaw(requestParameters: SecretsApiKeyManagementReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling keyManagementReadKey().'
            );
        }

        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{keymgmt_mount_path}/key/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async keyManagementReadKey(name: string, keymgmt_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.keyManagementReadKeyRaw({ name: name, keymgmt_mount_path: keymgmt_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementReadKeyInKmsProviderRaw(requestParameters: SecretsApiKeyManagementReadKeyInKmsProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key_name'] == null) {
            throw new runtime.RequiredError(
                'key_name',
                'Required parameter "key_name" was null or undefined when calling keyManagementReadKeyInKmsProvider().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling keyManagementReadKeyInKmsProvider().'
            );
        }

        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementReadKeyInKmsProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{keymgmt_mount_path}/kms/{name}/key/{key_name}`.replace(`{${"key_name"}}`, encodeURIComponent(String(requestParameters['key_name']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async keyManagementReadKeyInKmsProvider(key_name: string, name: string, keymgmt_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.keyManagementReadKeyInKmsProviderRaw({ key_name: key_name, name: name, keymgmt_mount_path: keymgmt_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementReadKmsProviderRaw(requestParameters: SecretsApiKeyManagementReadKmsProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling keyManagementReadKmsProvider().'
            );
        }

        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementReadKmsProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{keymgmt_mount_path}/kms/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async keyManagementReadKmsProvider(name: string, keymgmt_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.keyManagementReadKmsProviderRaw({ name: name, keymgmt_mount_path: keymgmt_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementRotateKeyRaw(requestParameters: SecretsApiKeyManagementRotateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling keyManagementRotateKey().'
            );
        }

        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementRotateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{keymgmt_mount_path}/key/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async keyManagementRotateKey(name: string, keymgmt_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.keyManagementRotateKeyRaw({ name: name, keymgmt_mount_path: keymgmt_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementUpdateKeyRaw(requestParameters: SecretsApiKeyManagementUpdateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling keyManagementUpdateKey().'
            );
        }

        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementUpdateKey().'
            );
        }

        if (requestParameters['KeyManagementUpdateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'KeyManagementUpdateKeyRequest',
                'Required parameter "KeyManagementUpdateKeyRequest" was null or undefined when calling keyManagementUpdateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{keymgmt_mount_path}/key/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KeyManagementUpdateKeyRequestToJSON(requestParameters['KeyManagementUpdateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async keyManagementUpdateKey(name: string, keymgmt_mount_path: string, KeyManagementUpdateKeyRequest: KeyManagementUpdateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.keyManagementUpdateKeyRaw({ name: name, keymgmt_mount_path: keymgmt_mount_path, KeyManagementUpdateKeyRequest: KeyManagementUpdateKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async keyManagementWriteKmsProviderRaw(requestParameters: SecretsApiKeyManagementWriteKmsProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling keyManagementWriteKmsProvider().'
            );
        }

        if (requestParameters['keymgmt_mount_path'] == null) {
            throw new runtime.RequiredError(
                'keymgmt_mount_path',
                'Required parameter "keymgmt_mount_path" was null or undefined when calling keyManagementWriteKmsProvider().'
            );
        }

        if (requestParameters['KeyManagementWriteKmsProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'KeyManagementWriteKmsProviderRequest',
                'Required parameter "KeyManagementWriteKmsProviderRequest" was null or undefined when calling keyManagementWriteKmsProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{keymgmt_mount_path}/kms/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"keymgmt_mount_path"}}`, encodeURIComponent(String(requestParameters['keymgmt_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KeyManagementWriteKmsProviderRequestToJSON(requestParameters['KeyManagementWriteKmsProviderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async keyManagementWriteKmsProvider(name: string, keymgmt_mount_path: string, KeyManagementWriteKmsProviderRequest: KeyManagementWriteKmsProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.keyManagementWriteKmsProviderRaw({ name: name, keymgmt_mount_path: keymgmt_mount_path, KeyManagementWriteKmsProviderRequest: KeyManagementWriteKmsProviderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kmipConfigureRaw(requestParameters: SecretsApiKmipConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipConfigure().'
            );
        }

        if (requestParameters['KmipConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'KmipConfigureRequest',
                'Required parameter "KmipConfigureRequest" was null or undefined when calling kmipConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kmip_mount_path}/config`.replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KmipConfigureRequestToJSON(requestParameters['KmipConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kmipConfigure(kmip_mount_path: string, KmipConfigureRequest: KmipConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kmipConfigureRaw({ kmip_mount_path: kmip_mount_path, KmipConfigureRequest: KmipConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new scope
     * Create a new scope
     */
    async kmipCreateScopeRaw(requestParameters: SecretsApiKmipCreateScopeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling kmipCreateScope().'
            );
        }

        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipCreateScope().'
            );
        }

        if (requestParameters['KmipCreateScopeRequest'] == null) {
            throw new runtime.RequiredError(
                'KmipCreateScopeRequest',
                'Required parameter "KmipCreateScopeRequest" was null or undefined when calling kmipCreateScope().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kmip_mount_path}/scope/{scope}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))).replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KmipCreateScopeRequestToJSON(requestParameters['KmipCreateScopeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new scope
     * Create a new scope
     */
    async kmipCreateScope(scope: string, kmip_mount_path: string, KmipCreateScopeRequest: KmipCreateScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kmipCreateScopeRaw({ scope: scope, kmip_mount_path: kmip_mount_path, KmipCreateScopeRequest: KmipCreateScopeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * A role is required to authenticate with this Backend. The role binds   to a KMIP client via the client certificate\'s serial number\'.   A role is contained within a scope, which restricts the objects   that a particular role may access.
     * Delete an existing role.
     */
    async kmipDeleteRoleRaw(requestParameters: SecretsApiKmipDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling kmipDeleteRole().'
            );
        }

        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling kmipDeleteRole().'
            );
        }

        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kmip_mount_path}/scope/{scope}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))).replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A role is required to authenticate with this Backend. The role binds   to a KMIP client via the client certificate\'s serial number\'.   A role is contained within a scope, which restricts the objects   that a particular role may access.
     * Delete an existing role.
     */
    async kmipDeleteRole(role: string, scope: string, kmip_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kmipDeleteRoleRaw({ role: role, scope: scope, kmip_mount_path: kmip_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing scope
     * Delete an existing scope.
     */
    async kmipDeleteScopeRaw(requestParameters: SecretsApiKmipDeleteScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling kmipDeleteScope().'
            );
        }

        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipDeleteScope().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kmip_mount_path}/scope/{scope}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))).replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing scope
     * Delete an existing scope.
     */
    async kmipDeleteScope(scope: string, kmip_mount_path: string, force?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kmipDeleteScopeRaw({ scope: scope, kmip_mount_path: kmip_mount_path, force: force }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kmipGenerateClientCertificateRaw(requestParameters: SecretsApiKmipGenerateClientCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling kmipGenerateClientCertificate().'
            );
        }

        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling kmipGenerateClientCertificate().'
            );
        }

        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipGenerateClientCertificate().'
            );
        }

        if (requestParameters['KmipGenerateClientCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'KmipGenerateClientCertificateRequest',
                'Required parameter "KmipGenerateClientCertificateRequest" was null or undefined when calling kmipGenerateClientCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kmip_mount_path}/scope/{scope}/role/{role}/credential/generate`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))).replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KmipGenerateClientCertificateRequestToJSON(requestParameters['KmipGenerateClientCertificateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kmipGenerateClientCertificate(role: string, scope: string, kmip_mount_path: string, KmipGenerateClientCertificateRequest: KmipGenerateClientCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kmipGenerateClientCertificateRaw({ role: role, scope: scope, kmip_mount_path: kmip_mount_path, KmipGenerateClientCertificateRequest: KmipGenerateClientCertificateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kmipListClientCertificatesRaw(requestParameters: SecretsApiKmipListClientCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling kmipListClientCertificates().'
            );
        }

        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling kmipListClientCertificates().'
            );
        }

        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipListClientCertificates().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kmipListClientCertificates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kmip_mount_path}/scope/{scope}/role/{role}/credential/`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))).replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kmipListClientCertificates(role: string, scope: string, kmip_mount_path: string, list: KmipListClientCertificatesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kmipListClientCertificatesRaw({ role: role, scope: scope, kmip_mount_path: kmip_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kmipListRolesRaw(requestParameters: SecretsApiKmipListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling kmipListRoles().'
            );
        }

        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kmipListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kmip_mount_path}/scope/{scope}/role/`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))).replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kmipListRoles(scope: string, kmip_mount_path: string, list: KmipListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kmipListRolesRaw({ scope: scope, kmip_mount_path: kmip_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kmipListScopesRaw(requestParameters: SecretsApiKmipListScopesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipListScopes().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kmipListScopes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kmip_mount_path}/scope/`.replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kmipListScopes(kmip_mount_path: string, list: KmipListScopesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kmipListScopesRaw({ kmip_mount_path: kmip_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kmipReadCaPemRaw(requestParameters: SecretsApiKmipReadCaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipReadCaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kmip_mount_path}/ca`.replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kmipReadCaPem(kmip_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kmipReadCaPemRaw({ kmip_mount_path: kmip_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kmipReadConfigurationRaw(requestParameters: SecretsApiKmipReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kmip_mount_path}/config`.replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kmipReadConfiguration(kmip_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kmipReadConfigurationRaw({ kmip_mount_path: kmip_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Read an existing role.
     */
    async kmipReadRoleRaw(requestParameters: SecretsApiKmipReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling kmipReadRole().'
            );
        }

        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling kmipReadRole().'
            );
        }

        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kmip_mount_path}/scope/{scope}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))).replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read an existing role.
     */
    async kmipReadRole(role: string, scope: string, kmip_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kmipReadRoleRaw({ role: role, scope: scope, kmip_mount_path: kmip_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kmipRetrieveClientCertificateRaw(requestParameters: SecretsApiKmipRetrieveClientCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling kmipRetrieveClientCertificate().'
            );
        }

        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling kmipRetrieveClientCertificate().'
            );
        }

        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipRetrieveClientCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kmip_mount_path}/scope/{scope}/role/{role}/credential/lookup`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))).replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kmipRetrieveClientCertificate(role: string, scope: string, kmip_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kmipRetrieveClientCertificateRaw({ role: role, scope: scope, kmip_mount_path: kmip_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kmipRevokeClientCertificateRaw(requestParameters: SecretsApiKmipRevokeClientCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling kmipRevokeClientCertificate().'
            );
        }

        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling kmipRevokeClientCertificate().'
            );
        }

        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipRevokeClientCertificate().'
            );
        }

        if (requestParameters['KmipRevokeClientCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'KmipRevokeClientCertificateRequest',
                'Required parameter "KmipRevokeClientCertificateRequest" was null or undefined when calling kmipRevokeClientCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kmip_mount_path}/scope/{scope}/role/{role}/credential/revoke`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))).replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KmipRevokeClientCertificateRequestToJSON(requestParameters['KmipRevokeClientCertificateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kmipRevokeClientCertificate(role: string, scope: string, kmip_mount_path: string, KmipRevokeClientCertificateRequest: KmipRevokeClientCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kmipRevokeClientCertificateRaw({ role: role, scope: scope, kmip_mount_path: kmip_mount_path, KmipRevokeClientCertificateRequest: KmipRevokeClientCertificateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kmipSignClientCertificateRequestRaw(requestParameters: SecretsApiKmipSignClientCertificateRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling kmipSignClientCertificateRequest().'
            );
        }

        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling kmipSignClientCertificateRequest().'
            );
        }

        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipSignClientCertificateRequest().'
            );
        }

        if (requestParameters['KmipSignClientCertificateRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'KmipSignClientCertificateRequestRequest',
                'Required parameter "KmipSignClientCertificateRequestRequest" was null or undefined when calling kmipSignClientCertificateRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kmip_mount_path}/scope/{scope}/role/{role}/credential/sign`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))).replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KmipSignClientCertificateRequestRequestToJSON(requestParameters['KmipSignClientCertificateRequestRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kmipSignClientCertificateRequest(role: string, scope: string, kmip_mount_path: string, KmipSignClientCertificateRequestRequest: KmipSignClientCertificateRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kmipSignClientCertificateRequestRaw({ role: role, scope: scope, kmip_mount_path: kmip_mount_path, KmipSignClientCertificateRequestRequest: KmipSignClientCertificateRequestRequest }, initOverrides);
        return await response.value();
    }

    /**
     * A role is required to authenticate with this Backend. The role binds   to a KMIP client via the client certificate\'s serial number\'.   A role is contained within a scope, which restricts the objects   that a particular role may access.
     * Register an role with the Backend.
     */
    async kmipWriteRoleRaw(requestParameters: SecretsApiKmipWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling kmipWriteRole().'
            );
        }

        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling kmipWriteRole().'
            );
        }

        if (requestParameters['kmip_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kmip_mount_path',
                'Required parameter "kmip_mount_path" was null or undefined when calling kmipWriteRole().'
            );
        }

        if (requestParameters['KmipWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'KmipWriteRoleRequest',
                'Required parameter "KmipWriteRoleRequest" was null or undefined when calling kmipWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kmip_mount_path}/scope/{scope}/role/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))).replace(`{${"kmip_mount_path"}}`, encodeURIComponent(String(requestParameters['kmip_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KmipWriteRoleRequestToJSON(requestParameters['KmipWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A role is required to authenticate with this Backend. The role binds   to a KMIP client via the client certificate\'s serial number\'.   A role is contained within a scope, which restricts the objects   that a particular role may access.
     * Register an role with the Backend.
     */
    async kmipWriteRole(role: string, scope: string, kmip_mount_path: string, KmipWriteRoleRequest: KmipWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kmipWriteRoleRaw({ role: role, scope: scope, kmip_mount_path: kmip_mount_path, KmipWriteRoleRequest: KmipWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesCheckConfigurationRaw(requestParameters: SecretsApiKubernetesCheckConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kubernetes_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kubernetes_mount_path',
                'Required parameter "kubernetes_mount_path" was null or undefined when calling kubernetesCheckConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/check`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetes_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesCheckConfiguration(kubernetes_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesCheckConfigurationRaw({ kubernetes_mount_path: kubernetes_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesConfigureRaw(requestParameters: SecretsApiKubernetesConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kubernetes_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kubernetes_mount_path',
                'Required parameter "kubernetes_mount_path" was null or undefined when calling kubernetesConfigure().'
            );
        }

        if (requestParameters['KubernetesConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'KubernetesConfigureRequest',
                'Required parameter "KubernetesConfigureRequest" was null or undefined when calling kubernetesConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetes_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesConfigureRequestToJSON(requestParameters['KubernetesConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesConfigure(kubernetes_mount_path: string, KubernetesConfigureRequest: KubernetesConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesConfigureRaw({ kubernetes_mount_path: kubernetes_mount_path, KubernetesConfigureRequest: KubernetesConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesDeleteConfigurationRaw(requestParameters: SecretsApiKubernetesDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kubernetes_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kubernetes_mount_path',
                'Required parameter "kubernetes_mount_path" was null or undefined when calling kubernetesDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetes_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesDeleteConfiguration(kubernetes_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesDeleteConfigurationRaw({ kubernetes_mount_path: kubernetes_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesDeleteRoleRaw(requestParameters: SecretsApiKubernetesDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesDeleteRole().'
            );
        }

        if (requestParameters['kubernetes_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kubernetes_mount_path',
                'Required parameter "kubernetes_mount_path" was null or undefined when calling kubernetesDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetes_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesDeleteRole(name: string, kubernetes_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesDeleteRoleRaw({ name: name, kubernetes_mount_path: kubernetes_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesGenerateCredentialsRaw(requestParameters: SecretsApiKubernetesGenerateCredentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesGenerateCredentials().'
            );
        }

        if (requestParameters['kubernetes_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kubernetes_mount_path',
                'Required parameter "kubernetes_mount_path" was null or undefined when calling kubernetesGenerateCredentials().'
            );
        }

        if (requestParameters['KubernetesGenerateCredentialsRequest'] == null) {
            throw new runtime.RequiredError(
                'KubernetesGenerateCredentialsRequest',
                'Required parameter "KubernetesGenerateCredentialsRequest" was null or undefined when calling kubernetesGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kubernetes_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetes_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesGenerateCredentialsRequestToJSON(requestParameters['KubernetesGenerateCredentialsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesGenerateCredentials(name: string, kubernetes_mount_path: string, KubernetesGenerateCredentialsRequest: KubernetesGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesGenerateCredentialsRaw({ name: name, kubernetes_mount_path: kubernetes_mount_path, KubernetesGenerateCredentialsRequest: KubernetesGenerateCredentialsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesListRolesRaw(requestParameters: SecretsApiKubernetesListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['kubernetes_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kubernetes_mount_path',
                'Required parameter "kubernetes_mount_path" was null or undefined when calling kubernetesListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kubernetesListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/roles/`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetes_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kubernetesListRoles(kubernetes_mount_path: string, list: KubernetesListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kubernetesListRolesRaw({ kubernetes_mount_path: kubernetes_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesReadConfigurationRaw(requestParameters: SecretsApiKubernetesReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kubernetes_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kubernetes_mount_path',
                'Required parameter "kubernetes_mount_path" was null or undefined when calling kubernetesReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/config`.replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetes_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesReadConfiguration(kubernetes_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesReadConfigurationRaw({ kubernetes_mount_path: kubernetes_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesReadRoleRaw(requestParameters: SecretsApiKubernetesReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesReadRole().'
            );
        }

        if (requestParameters['kubernetes_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kubernetes_mount_path',
                'Required parameter "kubernetes_mount_path" was null or undefined when calling kubernetesReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kubernetes_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetes_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesReadRole(name: string, kubernetes_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesReadRoleRaw({ name: name, kubernetes_mount_path: kubernetes_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kubernetesWriteRoleRaw(requestParameters: SecretsApiKubernetesWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling kubernetesWriteRole().'
            );
        }

        if (requestParameters['kubernetes_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kubernetes_mount_path',
                'Required parameter "kubernetes_mount_path" was null or undefined when calling kubernetesWriteRole().'
            );
        }

        if (requestParameters['KubernetesWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'KubernetesWriteRoleRequest',
                'Required parameter "KubernetesWriteRoleRequest" was null or undefined when calling kubernetesWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kubernetes_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"kubernetes_mount_path"}}`, encodeURIComponent(String(requestParameters['kubernetes_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KubernetesWriteRoleRequestToJSON(requestParameters['KubernetesWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kubernetesWriteRole(name: string, kubernetes_mount_path: string, KubernetesWriteRoleRequest: KubernetesWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kubernetesWriteRoleRaw({ name: name, kubernetes_mount_path: kubernetes_mount_path, KubernetesWriteRoleRequest: KubernetesWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV1DeleteRaw(requestParameters: SecretsApiKvV1DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV1Delete().'
            );
        }

        if (requestParameters['kv_v1_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v1_mount_path',
                'Required parameter "kv_v1_mount_path" was null or undefined when calling kvV1Delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v1_mount_path}/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v1_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV1Delete(path: string, kv_v1_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV1DeleteRaw({ path: path, kv_v1_mount_path: kv_v1_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV1ListRaw(requestParameters: SecretsApiKvV1ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV1List().'
            );
        }

        if (requestParameters['kv_v1_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v1_mount_path',
                'Required parameter "kv_v1_mount_path" was null or undefined when calling kvV1List().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kvV1List().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v1_mount_path}/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v1_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV1List(path: string, kv_v1_mount_path: string, list: KvV1ListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kvV1ListRaw({ path: path, kv_v1_mount_path: kv_v1_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV1ReadRaw(requestParameters: SecretsApiKvV1ReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV1Read().'
            );
        }

        if (requestParameters['kv_v1_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v1_mount_path',
                'Required parameter "kv_v1_mount_path" was null or undefined when calling kvV1Read().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v1_mount_path}/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v1_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV1Read(path: string, kv_v1_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV1ReadRaw({ path: path, kv_v1_mount_path: kv_v1_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV1WriteRaw(requestParameters: SecretsApiKvV1WriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV1Write().'
            );
        }

        if (requestParameters['kv_v1_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v1_mount_path',
                'Required parameter "kv_v1_mount_path" was null or undefined when calling kvV1Write().'
            );
        }

        if (requestParameters['request_body'] == null) {
            throw new runtime.RequiredError(
                'request_body',
                'Required parameter "request_body" was null or undefined when calling kvV1Write().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v1_mount_path}/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v1_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v1_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['request_body'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV1Write(path: string, kv_v1_mount_path: string, request_body: { [key: string]: any; }, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV1WriteRaw({ path: path, kv_v1_mount_path: kv_v1_mount_path, request_body: request_body }, initOverrides);
        return await response.value();
    }

    /**
     * Configure backend level settings that are applied to every key in the key-value store.
     */
    async kvV2ConfigureRaw(requestParameters: SecretsApiKvV2ConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2Configure().'
            );
        }

        if (requestParameters['KvV2ConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'KvV2ConfigureRequest',
                'Required parameter "KvV2ConfigureRequest" was null or undefined when calling kvV2Configure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/config`.replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2ConfigureRequestToJSON(requestParameters['KvV2ConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure backend level settings that are applied to every key in the key-value store.
     */
    async kvV2Configure(kv_v2_mount_path: string, KvV2ConfigureRequest: KvV2ConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2ConfigureRaw({ kv_v2_mount_path: kv_v2_mount_path, KvV2ConfigureRequest: KvV2ConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2DeleteRaw(requestParameters: SecretsApiKvV2DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2Delete().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2Delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2Delete(path: string, kv_v2_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2DeleteRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2DeleteMetadataAndAllVersionsRaw(requestParameters: SecretsApiKvV2DeleteMetadataAndAllVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2DeleteMetadataAndAllVersions().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2DeleteMetadataAndAllVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2DeleteMetadataAndAllVersions(path: string, kv_v2_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2DeleteMetadataAndAllVersionsRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2DeleteVersionsRaw(requestParameters: SecretsApiKvV2DeleteVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2DeleteVersions().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2DeleteVersions().'
            );
        }

        if (requestParameters['KvV2DeleteVersionsRequest'] == null) {
            throw new runtime.RequiredError(
                'KvV2DeleteVersionsRequest',
                'Required parameter "KvV2DeleteVersionsRequest" was null or undefined when calling kvV2DeleteVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/delete/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2DeleteVersionsRequestToJSON(requestParameters['KvV2DeleteVersionsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2DeleteVersions(path: string, kv_v2_mount_path: string, KvV2DeleteVersionsRequest: KvV2DeleteVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2DeleteVersionsRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path, KvV2DeleteVersionsRequest: KvV2DeleteVersionsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2DestroyVersionsRaw(requestParameters: SecretsApiKvV2DestroyVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2DestroyVersions().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2DestroyVersions().'
            );
        }

        if (requestParameters['KvV2DestroyVersionsRequest'] == null) {
            throw new runtime.RequiredError(
                'KvV2DestroyVersionsRequest',
                'Required parameter "KvV2DestroyVersionsRequest" was null or undefined when calling kvV2DestroyVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/destroy/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2DestroyVersionsRequestToJSON(requestParameters['KvV2DestroyVersionsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2DestroyVersions(path: string, kv_v2_mount_path: string, KvV2DestroyVersionsRequest: KvV2DestroyVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2DestroyVersionsRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path, KvV2DestroyVersionsRequest: KvV2DestroyVersionsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2ListRaw(requestParameters: SecretsApiKvV2ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2List().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2List().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling kvV2List().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2List(path: string, kv_v2_mount_path: string, list: KvV2ListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.kvV2ListRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2PatchRaw(requestParameters: SecretsApiKvV2PatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2PatchResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2Patch().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2Patch().'
            );
        }

        if (requestParameters['KvV2PatchRequest'] == null) {
            throw new runtime.RequiredError(
                'KvV2PatchRequest',
                'Required parameter "KvV2PatchRequest" was null or undefined when calling kvV2Patch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2PatchRequestToJSON(requestParameters['KvV2PatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2PatchResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2Patch(path: string, kv_v2_mount_path: string, KvV2PatchRequest: KvV2PatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2PatchResponse> {
        const response = await this.kvV2PatchRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path, KvV2PatchRequest: KvV2PatchRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2PatchMetadataPathRaw(requestParameters: SecretsApiKvV2PatchMetadataPathOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2PatchMetadataPath().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2PatchMetadataPath().'
            );
        }

        if (requestParameters['KvV2PatchMetadataPathRequest'] == null) {
            throw new runtime.RequiredError(
                'KvV2PatchMetadataPathRequest',
                'Required parameter "KvV2PatchMetadataPathRequest" was null or undefined when calling kvV2PatchMetadataPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2PatchMetadataPathRequestToJSON(requestParameters['KvV2PatchMetadataPathRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2PatchMetadataPath(path: string, kv_v2_mount_path: string, KvV2PatchMetadataPathRequest: KvV2PatchMetadataPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2PatchMetadataPathRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path, KvV2PatchMetadataPathRequest: KvV2PatchMetadataPathRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2ReadRaw(requestParameters: SecretsApiKvV2ReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2ReadResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2Read().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2Read().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2ReadResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2Read(path: string, kv_v2_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2ReadResponse> {
        const response = await this.kvV2ReadRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Read the backend level settings.
     */
    async kvV2ReadConfigurationRaw(requestParameters: SecretsApiKvV2ReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2ReadConfigurationResponse>> {
        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2ReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/config`.replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2ReadConfigurationResponseFromJSON(jsonValue));
    }

    /**
     * Read the backend level settings.
     */
    async kvV2ReadConfiguration(kv_v2_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2ReadConfigurationResponse> {
        const response = await this.kvV2ReadConfigurationRaw({ kv_v2_mount_path: kv_v2_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2ReadMetadataRaw(requestParameters: SecretsApiKvV2ReadMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2ReadMetadataResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2ReadMetadata().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2ReadMetadata().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2ReadMetadataResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2ReadMetadata(path: string, kv_v2_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2ReadMetadataResponse> {
        const response = await this.kvV2ReadMetadataRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2ReadSubkeysRaw(requestParameters: SecretsApiKvV2ReadSubkeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2ReadSubkeysResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2ReadSubkeys().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2ReadSubkeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{kv_v2_mount_path}/subkeys/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2ReadSubkeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2ReadSubkeys(path: string, kv_v2_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2ReadSubkeysResponse> {
        const response = await this.kvV2ReadSubkeysRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2UndeleteVersionsRaw(requestParameters: SecretsApiKvV2UndeleteVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2UndeleteVersions().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2UndeleteVersions().'
            );
        }

        if (requestParameters['KvV2UndeleteVersionsRequest'] == null) {
            throw new runtime.RequiredError(
                'KvV2UndeleteVersionsRequest',
                'Required parameter "KvV2UndeleteVersionsRequest" was null or undefined when calling kvV2UndeleteVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/undelete/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2UndeleteVersionsRequestToJSON(requestParameters['KvV2UndeleteVersionsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2UndeleteVersions(path: string, kv_v2_mount_path: string, KvV2UndeleteVersionsRequest: KvV2UndeleteVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2UndeleteVersionsRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path, KvV2UndeleteVersionsRequest: KvV2UndeleteVersionsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2WriteRaw(requestParameters: SecretsApiKvV2WriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KvV2WriteResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2Write().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2Write().'
            );
        }

        if (requestParameters['KvV2WriteRequest'] == null) {
            throw new runtime.RequiredError(
                'KvV2WriteRequest',
                'Required parameter "KvV2WriteRequest" was null or undefined when calling kvV2Write().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/data/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2WriteRequestToJSON(requestParameters['KvV2WriteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KvV2WriteResponseFromJSON(jsonValue));
    }

    /**
     */
    async kvV2Write(path: string, kv_v2_mount_path: string, KvV2WriteRequest: KvV2WriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KvV2WriteResponse> {
        const response = await this.kvV2WriteRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path, KvV2WriteRequest: KvV2WriteRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async kvV2WriteMetadataRaw(requestParameters: SecretsApiKvV2WriteMetadataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling kvV2WriteMetadata().'
            );
        }

        if (requestParameters['kv_v2_mount_path'] == null) {
            throw new runtime.RequiredError(
                'kv_v2_mount_path',
                'Required parameter "kv_v2_mount_path" was null or undefined when calling kvV2WriteMetadata().'
            );
        }

        if (requestParameters['KvV2WriteMetadataRequest'] == null) {
            throw new runtime.RequiredError(
                'KvV2WriteMetadataRequest',
                'Required parameter "KvV2WriteMetadataRequest" was null or undefined when calling kvV2WriteMetadata().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{kv_v2_mount_path}/metadata/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"kv_v2_mount_path"}}`, encodeURIComponent(String(requestParameters['kv_v2_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KvV2WriteMetadataRequestToJSON(requestParameters['KvV2WriteMetadataRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kvV2WriteMetadata(path: string, kv_v2_mount_path: string, KvV2WriteMetadataRequest: KvV2WriteMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.kvV2WriteMetadataRaw({ path: path, kv_v2_mount_path: kv_v2_mount_path, KvV2WriteMetadataRequest: KvV2WriteMetadataRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapConfigureRaw(requestParameters: SecretsApiLdapConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapConfigure().'
            );
        }

        if (requestParameters['LdapConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'LdapConfigureRequest',
                'Required parameter "LdapConfigureRequest" was null or undefined when calling ldapConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapConfigureRequestToJSON(requestParameters['LdapConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapConfigure(ldap_mount_path: string, LdapConfigureRequest: LdapConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapConfigureRaw({ ldap_mount_path: ldap_mount_path, LdapConfigureRequest: LdapConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapDeleteConfigurationRaw(requestParameters: SecretsApiLdapDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapDeleteConfiguration(ldap_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapDeleteConfigurationRaw({ ldap_mount_path: ldap_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapDeleteDynamicRoleRaw(requestParameters: SecretsApiLdapDeleteDynamicRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapDeleteDynamicRole().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapDeleteDynamicRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapDeleteDynamicRole(name: string, ldap_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapDeleteDynamicRoleRaw({ name: name, ldap_mount_path: ldap_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapDeleteStaticRoleRaw(requestParameters: SecretsApiLdapDeleteStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapDeleteStaticRole().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapDeleteStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapDeleteStaticRole(name: string, ldap_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapDeleteStaticRoleRaw({ name: name, ldap_mount_path: ldap_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Check service accounts in to the library.
     */
    async ldapLibraryCheckInRaw(requestParameters: SecretsApiLdapLibraryCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryCheckIn().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapLibraryCheckIn().'
            );
        }

        if (requestParameters['LdapLibraryCheckInRequest'] == null) {
            throw new runtime.RequiredError(
                'LdapLibraryCheckInRequest',
                'Required parameter "LdapLibraryCheckInRequest" was null or undefined when calling ldapLibraryCheckIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}/check-in`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLibraryCheckInRequestToJSON(requestParameters['LdapLibraryCheckInRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check service accounts in to the library.
     */
    async ldapLibraryCheckIn(name: string, ldap_mount_path: string, LdapLibraryCheckInRequest: LdapLibraryCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryCheckInRaw({ name: name, ldap_mount_path: ldap_mount_path, LdapLibraryCheckInRequest: LdapLibraryCheckInRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Check a service account out from the library.
     */
    async ldapLibraryCheckOutRaw(requestParameters: SecretsApiLdapLibraryCheckOutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryCheckOut().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapLibraryCheckOut().'
            );
        }

        if (requestParameters['LdapLibraryCheckOutRequest'] == null) {
            throw new runtime.RequiredError(
                'LdapLibraryCheckOutRequest',
                'Required parameter "LdapLibraryCheckOutRequest" was null or undefined when calling ldapLibraryCheckOut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}/check-out`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLibraryCheckOutRequestToJSON(requestParameters['LdapLibraryCheckOutRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check a service account out from the library.
     */
    async ldapLibraryCheckOut(name: string, ldap_mount_path: string, LdapLibraryCheckOutRequest: LdapLibraryCheckOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryCheckOutRaw({ name: name, ldap_mount_path: ldap_mount_path, LdapLibraryCheckOutRequest: LdapLibraryCheckOutRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Check the status of the service accounts in a library set.
     */
    async ldapLibraryCheckStatusRaw(requestParameters: SecretsApiLdapLibraryCheckStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryCheckStatus().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapLibraryCheckStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check the status of the service accounts in a library set.
     */
    async ldapLibraryCheckStatus(name: string, ldap_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryCheckStatusRaw({ name: name, ldap_mount_path: ldap_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Update a library set.
     */
    async ldapLibraryConfigureRaw(requestParameters: SecretsApiLdapLibraryConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryConfigure().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapLibraryConfigure().'
            );
        }

        if (requestParameters['LdapLibraryConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'LdapLibraryConfigureRequest',
                'Required parameter "LdapLibraryConfigureRequest" was null or undefined when calling ldapLibraryConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLibraryConfigureRequestToJSON(requestParameters['LdapLibraryConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a library set.
     */
    async ldapLibraryConfigure(name: string, ldap_mount_path: string, LdapLibraryConfigureRequest: LdapLibraryConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryConfigureRaw({ name: name, ldap_mount_path: ldap_mount_path, LdapLibraryConfigureRequest: LdapLibraryConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a library set.
     */
    async ldapLibraryDeleteRaw(requestParameters: SecretsApiLdapLibraryDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryDelete().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapLibraryDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a library set.
     */
    async ldapLibraryDelete(name: string, ldap_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryDeleteRaw({ name: name, ldap_mount_path: ldap_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Check service accounts in to the library.
     */
    async ldapLibraryForceCheckInRaw(requestParameters: SecretsApiLdapLibraryForceCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryForceCheckIn().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapLibraryForceCheckIn().'
            );
        }

        if (requestParameters['LdapLibraryForceCheckInRequest'] == null) {
            throw new runtime.RequiredError(
                'LdapLibraryForceCheckInRequest',
                'Required parameter "LdapLibraryForceCheckInRequest" was null or undefined when calling ldapLibraryForceCheckIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/library/manage/{name}/check-in`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapLibraryForceCheckInRequestToJSON(requestParameters['LdapLibraryForceCheckInRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check service accounts in to the library.
     */
    async ldapLibraryForceCheckIn(name: string, ldap_mount_path: string, LdapLibraryForceCheckInRequest: LdapLibraryForceCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryForceCheckInRaw({ name: name, ldap_mount_path: ldap_mount_path, LdapLibraryForceCheckInRequest: LdapLibraryForceCheckInRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapLibraryListRaw(requestParameters: SecretsApiLdapLibraryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapLibraryList().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapLibraryList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapLibraryList(ldap_mount_path: string, list: LdapLibraryListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapLibraryListRaw({ ldap_mount_path: ldap_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapLibraryListLibraryPathRaw(requestParameters: SecretsApiLdapLibraryListLibraryPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapLibraryListLibraryPath().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapLibraryListLibraryPath().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapLibraryListLibraryPath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapLibraryListLibraryPath(path: string, ldap_mount_path: string, list: LdapLibraryListLibraryPathListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapLibraryListLibraryPathRaw({ path: path, ldap_mount_path: ldap_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapLibraryListLibraryPath_1Raw(requestParameters: SecretsApiLdapLibraryListLibraryPath0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapLibraryListLibraryPath_1().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapLibraryListLibraryPath_1().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapLibraryListLibraryPath_1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapLibraryListLibraryPath_1(path: string, ldap_mount_path: string, list: LdapLibraryListLibraryPath0ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapLibraryListLibraryPath_1Raw({ path: path, ldap_mount_path: ldap_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Read a library set.
     */
    async ldapLibraryReadRaw(requestParameters: SecretsApiLdapLibraryReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapLibraryRead().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapLibraryRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/library/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read a library set.
     */
    async ldapLibraryRead(name: string, ldap_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapLibraryReadRaw({ name: name, ldap_mount_path: ldap_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListDynamicRolesRaw(requestParameters: SecretsApiLdapListDynamicRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapListDynamicRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListDynamicRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListDynamicRoles(ldap_mount_path: string, list: LdapListDynamicRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListDynamicRolesRaw({ ldap_mount_path: ldap_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListRolePathRaw(requestParameters: SecretsApiLdapListRolePathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapListRolePath().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapListRolePath().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListRolePath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListRolePath(path: string, ldap_mount_path: string, list: LdapListRolePathListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListRolePathRaw({ path: path, ldap_mount_path: ldap_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListRolePath_2Raw(requestParameters: SecretsApiLdapListRolePath0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapListRolePath_2().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapListRolePath_2().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListRolePath_2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListRolePath_2(path: string, ldap_mount_path: string, list: LdapListRolePath0ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListRolePath_2Raw({ path: path, ldap_mount_path: ldap_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListStaticRolePathRaw(requestParameters: SecretsApiLdapListStaticRolePathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapListStaticRolePath().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapListStaticRolePath().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListStaticRolePath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListStaticRolePath(path: string, ldap_mount_path: string, list: LdapListStaticRolePathListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListStaticRolePathRaw({ path: path, ldap_mount_path: ldap_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListStaticRolePath_3Raw(requestParameters: SecretsApiLdapListStaticRolePath0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ldapListStaticRolePath_3().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapListStaticRolePath_3().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListStaticRolePath_3().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListStaticRolePath_3(path: string, ldap_mount_path: string, list: LdapListStaticRolePath0ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListStaticRolePath_3Raw({ path: path, ldap_mount_path: ldap_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapListStaticRolesRaw(requestParameters: SecretsApiLdapListStaticRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapListStaticRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling ldapListStaticRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ldapListStaticRoles(ldap_mount_path: string, list: LdapListStaticRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.ldapListStaticRolesRaw({ ldap_mount_path: ldap_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapReadConfigurationRaw(requestParameters: SecretsApiLdapReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/config`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapReadConfiguration(ldap_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapReadConfigurationRaw({ ldap_mount_path: ldap_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapReadDynamicRoleRaw(requestParameters: SecretsApiLdapReadDynamicRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapReadDynamicRole().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapReadDynamicRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapReadDynamicRole(name: string, ldap_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapReadDynamicRoleRaw({ name: name, ldap_mount_path: ldap_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapReadStaticRoleRaw(requestParameters: SecretsApiLdapReadStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapReadStaticRole().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapReadStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapReadStaticRole(name: string, ldap_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapReadStaticRoleRaw({ name: name, ldap_mount_path: ldap_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapRequestDynamicRoleCredentialsRaw(requestParameters: SecretsApiLdapRequestDynamicRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapRequestDynamicRoleCredentials().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapRequestDynamicRoleCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRequestDynamicRoleCredentials(name: string, ldap_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapRequestDynamicRoleCredentialsRaw({ name: name, ldap_mount_path: ldap_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapRequestStaticRoleCredentialsRaw(requestParameters: SecretsApiLdapRequestStaticRoleCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapRequestStaticRoleCredentials().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapRequestStaticRoleCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/static-cred/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRequestStaticRoleCredentials(name: string, ldap_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapRequestStaticRoleCredentialsRaw({ name: name, ldap_mount_path: ldap_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapRotateRootCredentialsRaw(requestParameters: SecretsApiLdapRotateRootCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapRotateRootCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ldap_mount_path}/rotate-root`.replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRotateRootCredentials(ldap_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapRotateRootCredentialsRaw({ ldap_mount_path: ldap_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapRotateStaticRoleRaw(requestParameters: SecretsApiLdapRotateStaticRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapRotateStaticRole().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapRotateStaticRole().'
            );
        }

        if (requestParameters['LdapRotateStaticRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'LdapRotateStaticRoleRequest',
                'Required parameter "LdapRotateStaticRoleRequest" was null or undefined when calling ldapRotateStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/rotate-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapRotateStaticRoleRequestToJSON(requestParameters['LdapRotateStaticRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapRotateStaticRole(name: string, ldap_mount_path: string, LdapRotateStaticRoleRequest: LdapRotateStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapRotateStaticRoleRaw({ name: name, ldap_mount_path: ldap_mount_path, LdapRotateStaticRoleRequest: LdapRotateStaticRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapWriteDynamicRoleRaw(requestParameters: SecretsApiLdapWriteDynamicRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapWriteDynamicRole().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapWriteDynamicRole().'
            );
        }

        if (requestParameters['LdapWriteDynamicRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'LdapWriteDynamicRoleRequest',
                'Required parameter "LdapWriteDynamicRoleRequest" was null or undefined when calling ldapWriteDynamicRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapWriteDynamicRoleRequestToJSON(requestParameters['LdapWriteDynamicRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapWriteDynamicRole(name: string, ldap_mount_path: string, LdapWriteDynamicRoleRequest: LdapWriteDynamicRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapWriteDynamicRoleRaw({ name: name, ldap_mount_path: ldap_mount_path, LdapWriteDynamicRoleRequest: LdapWriteDynamicRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async ldapWriteStaticRoleRaw(requestParameters: SecretsApiLdapWriteStaticRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ldapWriteStaticRole().'
            );
        }

        if (requestParameters['ldap_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ldap_mount_path',
                'Required parameter "ldap_mount_path" was null or undefined when calling ldapWriteStaticRole().'
            );
        }

        if (requestParameters['LdapWriteStaticRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'LdapWriteStaticRoleRequest',
                'Required parameter "LdapWriteStaticRoleRequest" was null or undefined when calling ldapWriteStaticRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ldap_mount_path}/static-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"ldap_mount_path"}}`, encodeURIComponent(String(requestParameters['ldap_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LdapWriteStaticRoleRequestToJSON(requestParameters['LdapWriteStaticRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ldapWriteStaticRole(name: string, ldap_mount_path: string, LdapWriteStaticRoleRequest: LdapWriteStaticRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.ldapWriteStaticRoleRaw({ name: name, ldap_mount_path: ldap_mount_path, LdapWriteStaticRoleRequest: LdapWriteStaticRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async mongoDbAtlasConfigureRaw(requestParameters: SecretsApiMongoDbAtlasConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['mongodbatlas_mount_path'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlas_mount_path',
                'Required parameter "mongodbatlas_mount_path" was null or undefined when calling mongoDbAtlasConfigure().'
            );
        }

        if (requestParameters['MongoDbAtlasConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'MongoDbAtlasConfigureRequest',
                'Required parameter "MongoDbAtlasConfigureRequest" was null or undefined when calling mongoDbAtlasConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/config`.replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlas_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MongoDbAtlasConfigureRequestToJSON(requestParameters['MongoDbAtlasConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mongoDbAtlasConfigure(mongodbatlas_mount_path: string, MongoDbAtlasConfigureRequest: MongoDbAtlasConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasConfigureRaw({ mongodbatlas_mount_path: mongodbatlas_mount_path, MongoDbAtlasConfigureRequest: MongoDbAtlasConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasDeleteRoleRaw(requestParameters: SecretsApiMongoDbAtlasDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasDeleteRole().'
            );
        }

        if (requestParameters['mongodbatlas_mount_path'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlas_mount_path',
                'Required parameter "mongodbatlas_mount_path" was null or undefined when calling mongoDbAtlasDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlas_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasDeleteRole(name: string, mongodbatlas_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasDeleteRoleRaw({ name: name, mongodbatlas_mount_path: mongodbatlas_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async mongoDbAtlasGenerateCredentialsRaw(requestParameters: SecretsApiMongoDbAtlasGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasGenerateCredentials().'
            );
        }

        if (requestParameters['mongodbatlas_mount_path'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlas_mount_path',
                'Required parameter "mongodbatlas_mount_path" was null or undefined when calling mongoDbAtlasGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlas_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mongoDbAtlasGenerateCredentials(name: string, mongodbatlas_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasGenerateCredentialsRaw({ name: name, mongodbatlas_mount_path: mongodbatlas_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async mongoDbAtlasGenerateCredentials2Raw(requestParameters: SecretsApiMongoDbAtlasGenerateCredentials2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasGenerateCredentials2().'
            );
        }

        if (requestParameters['mongodbatlas_mount_path'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlas_mount_path',
                'Required parameter "mongodbatlas_mount_path" was null or undefined when calling mongoDbAtlasGenerateCredentials2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlas_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mongoDbAtlasGenerateCredentials2(name: string, mongodbatlas_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasGenerateCredentials2Raw({ name: name, mongodbatlas_mount_path: mongodbatlas_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * List the existing roles in this backend
     */
    async mongoDbAtlasListRolesRaw(requestParameters: SecretsApiMongoDbAtlasListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['mongodbatlas_mount_path'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlas_mount_path',
                'Required parameter "mongodbatlas_mount_path" was null or undefined when calling mongoDbAtlasListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mongoDbAtlasListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/roles/`.replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlas_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List the existing roles in this backend
     */
    async mongoDbAtlasListRoles(mongodbatlas_mount_path: string, list: MongoDbAtlasListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mongoDbAtlasListRolesRaw({ mongodbatlas_mount_path: mongodbatlas_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async mongoDbAtlasReadConfigurationRaw(requestParameters: SecretsApiMongoDbAtlasReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['mongodbatlas_mount_path'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlas_mount_path',
                'Required parameter "mongodbatlas_mount_path" was null or undefined when calling mongoDbAtlasReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/config`.replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlas_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mongoDbAtlasReadConfiguration(mongodbatlas_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasReadConfigurationRaw({ mongodbatlas_mount_path: mongodbatlas_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasReadRoleRaw(requestParameters: SecretsApiMongoDbAtlasReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasReadRole().'
            );
        }

        if (requestParameters['mongodbatlas_mount_path'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlas_mount_path',
                'Required parameter "mongodbatlas_mount_path" was null or undefined when calling mongoDbAtlasReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlas_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasReadRole(name: string, mongodbatlas_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasReadRoleRaw({ name: name, mongodbatlas_mount_path: mongodbatlas_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasWriteRoleRaw(requestParameters: SecretsApiMongoDbAtlasWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mongoDbAtlasWriteRole().'
            );
        }

        if (requestParameters['mongodbatlas_mount_path'] == null) {
            throw new runtime.RequiredError(
                'mongodbatlas_mount_path',
                'Required parameter "mongodbatlas_mount_path" was null or undefined when calling mongoDbAtlasWriteRole().'
            );
        }

        if (requestParameters['MongoDbAtlasWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'MongoDbAtlasWriteRoleRequest',
                'Required parameter "MongoDbAtlasWriteRoleRequest" was null or undefined when calling mongoDbAtlasWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{mongodbatlas_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"mongodbatlas_mount_path"}}`, encodeURIComponent(String(requestParameters['mongodbatlas_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MongoDbAtlasWriteRoleRequestToJSON(requestParameters['MongoDbAtlasWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
     */
    async mongoDbAtlasWriteRole(name: string, mongodbatlas_mount_path: string, MongoDbAtlasWriteRoleRequest: MongoDbAtlasWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mongoDbAtlasWriteRoleRaw({ name: name, mongodbatlas_mount_path: mongodbatlas_mount_path, MongoDbAtlasWriteRoleRequest: MongoDbAtlasWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadConfigureAccessRaw(requestParameters: SecretsApiNomadConfigureAccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nomad_mount_path'] == null) {
            throw new runtime.RequiredError(
                'nomad_mount_path',
                'Required parameter "nomad_mount_path" was null or undefined when calling nomadConfigureAccess().'
            );
        }

        if (requestParameters['NomadConfigureAccessRequest'] == null) {
            throw new runtime.RequiredError(
                'NomadConfigureAccessRequest',
                'Required parameter "NomadConfigureAccessRequest" was null or undefined when calling nomadConfigureAccess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{nomad_mount_path}/config/access`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomad_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NomadConfigureAccessRequestToJSON(requestParameters['NomadConfigureAccessRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadConfigureAccess(nomad_mount_path: string, NomadConfigureAccessRequest: NomadConfigureAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadConfigureAccessRaw({ nomad_mount_path: nomad_mount_path, NomadConfigureAccessRequest: NomadConfigureAccessRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadConfigureLeaseRaw(requestParameters: SecretsApiNomadConfigureLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nomad_mount_path'] == null) {
            throw new runtime.RequiredError(
                'nomad_mount_path',
                'Required parameter "nomad_mount_path" was null or undefined when calling nomadConfigureLease().'
            );
        }

        if (requestParameters['NomadConfigureLeaseRequest'] == null) {
            throw new runtime.RequiredError(
                'NomadConfigureLeaseRequest',
                'Required parameter "NomadConfigureLeaseRequest" was null or undefined when calling nomadConfigureLease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{nomad_mount_path}/config/lease`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomad_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NomadConfigureLeaseRequestToJSON(requestParameters['NomadConfigureLeaseRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadConfigureLease(nomad_mount_path: string, NomadConfigureLeaseRequest: NomadConfigureLeaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadConfigureLeaseRaw({ nomad_mount_path: nomad_mount_path, NomadConfigureLeaseRequest: NomadConfigureLeaseRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadDeleteAccessConfigurationRaw(requestParameters: SecretsApiNomadDeleteAccessConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nomad_mount_path'] == null) {
            throw new runtime.RequiredError(
                'nomad_mount_path',
                'Required parameter "nomad_mount_path" was null or undefined when calling nomadDeleteAccessConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/config/access`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomad_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadDeleteAccessConfiguration(nomad_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadDeleteAccessConfigurationRaw({ nomad_mount_path: nomad_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadDeleteLeaseConfigurationRaw(requestParameters: SecretsApiNomadDeleteLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nomad_mount_path'] == null) {
            throw new runtime.RequiredError(
                'nomad_mount_path',
                'Required parameter "nomad_mount_path" was null or undefined when calling nomadDeleteLeaseConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/config/lease`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomad_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadDeleteLeaseConfiguration(nomad_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadDeleteLeaseConfigurationRaw({ nomad_mount_path: nomad_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadDeleteRoleRaw(requestParameters: SecretsApiNomadDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling nomadDeleteRole().'
            );
        }

        if (requestParameters['nomad_mount_path'] == null) {
            throw new runtime.RequiredError(
                'nomad_mount_path',
                'Required parameter "nomad_mount_path" was null or undefined when calling nomadDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomad_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadDeleteRole(name: string, nomad_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadDeleteRoleRaw({ name: name, nomad_mount_path: nomad_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadGenerateCredentialsRaw(requestParameters: SecretsApiNomadGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling nomadGenerateCredentials().'
            );
        }

        if (requestParameters['nomad_mount_path'] == null) {
            throw new runtime.RequiredError(
                'nomad_mount_path',
                'Required parameter "nomad_mount_path" was null or undefined when calling nomadGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomad_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadGenerateCredentials(name: string, nomad_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadGenerateCredentialsRaw({ name: name, nomad_mount_path: nomad_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadListRolesRaw(requestParameters: SecretsApiNomadListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['nomad_mount_path'] == null) {
            throw new runtime.RequiredError(
                'nomad_mount_path',
                'Required parameter "nomad_mount_path" was null or undefined when calling nomadListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling nomadListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/role/`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomad_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async nomadListRoles(nomad_mount_path: string, list: NomadListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.nomadListRolesRaw({ nomad_mount_path: nomad_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadReadAccessConfigurationRaw(requestParameters: SecretsApiNomadReadAccessConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nomad_mount_path'] == null) {
            throw new runtime.RequiredError(
                'nomad_mount_path',
                'Required parameter "nomad_mount_path" was null or undefined when calling nomadReadAccessConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/config/access`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomad_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadReadAccessConfiguration(nomad_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadReadAccessConfigurationRaw({ nomad_mount_path: nomad_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadReadLeaseConfigurationRaw(requestParameters: SecretsApiNomadReadLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['nomad_mount_path'] == null) {
            throw new runtime.RequiredError(
                'nomad_mount_path',
                'Required parameter "nomad_mount_path" was null or undefined when calling nomadReadLeaseConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/config/lease`.replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomad_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadReadLeaseConfiguration(nomad_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadReadLeaseConfigurationRaw({ nomad_mount_path: nomad_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadReadRoleRaw(requestParameters: SecretsApiNomadReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling nomadReadRole().'
            );
        }

        if (requestParameters['nomad_mount_path'] == null) {
            throw new runtime.RequiredError(
                'nomad_mount_path',
                'Required parameter "nomad_mount_path" was null or undefined when calling nomadReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{nomad_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomad_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadReadRole(name: string, nomad_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadReadRoleRaw({ name: name, nomad_mount_path: nomad_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async nomadWriteRoleRaw(requestParameters: SecretsApiNomadWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling nomadWriteRole().'
            );
        }

        if (requestParameters['nomad_mount_path'] == null) {
            throw new runtime.RequiredError(
                'nomad_mount_path',
                'Required parameter "nomad_mount_path" was null or undefined when calling nomadWriteRole().'
            );
        }

        if (requestParameters['NomadWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'NomadWriteRoleRequest',
                'Required parameter "NomadWriteRoleRequest" was null or undefined when calling nomadWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{nomad_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"nomad_mount_path"}}`, encodeURIComponent(String(requestParameters['nomad_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NomadWriteRoleRequestToJSON(requestParameters['NomadWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nomadWriteRole(name: string, nomad_mount_path: string, NomadWriteRoleRequest: NomadWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.nomadWriteRoleRaw({ name: name, nomad_mount_path: nomad_mount_path, NomadWriteRoleRequest: NomadWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureAcmeRaw(requestParameters: SecretsApiPkiConfigureAcmeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureAcme().'
            );
        }

        if (requestParameters['PkiConfigureAcmeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiConfigureAcmeRequest',
                'Required parameter "PkiConfigureAcmeRequest" was null or undefined when calling pkiConfigureAcme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/acme`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureAcmeRequestToJSON(requestParameters['PkiConfigureAcmeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiConfigureAcme(pki_mount_path: string, PkiConfigureAcmeRequest: PkiConfigureAcmeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiConfigureAcmeRaw({ pki_mount_path: pki_mount_path, PkiConfigureAcmeRequest: PkiConfigureAcmeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureAutoTidyRaw(requestParameters: SecretsApiPkiConfigureAutoTidyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureAutoTidyResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureAutoTidy().'
            );
        }

        if (requestParameters['PkiConfigureAutoTidyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiConfigureAutoTidyRequest',
                'Required parameter "PkiConfigureAutoTidyRequest" was null or undefined when calling pkiConfigureAutoTidy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/auto-tidy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureAutoTidyRequestToJSON(requestParameters['PkiConfigureAutoTidyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureAutoTidyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureAutoTidy(pki_mount_path: string, PkiConfigureAutoTidyRequest: PkiConfigureAutoTidyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureAutoTidyResponse> {
        const response = await this.pkiConfigureAutoTidyRaw({ pki_mount_path: pki_mount_path, PkiConfigureAutoTidyRequest: PkiConfigureAutoTidyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureCaRaw(requestParameters: SecretsApiPkiConfigureCaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureCaResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureCa().'
            );
        }

        if (requestParameters['PkiConfigureCaRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiConfigureCaRequest',
                'Required parameter "PkiConfigureCaRequest" was null or undefined when calling pkiConfigureCa().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/ca`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureCaRequestToJSON(requestParameters['PkiConfigureCaRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureCaResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureCa(pki_mount_path: string, PkiConfigureCaRequest: PkiConfigureCaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureCaResponse> {
        const response = await this.pkiConfigureCaRaw({ pki_mount_path: pki_mount_path, PkiConfigureCaRequest: PkiConfigureCaRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureClusterRaw(requestParameters: SecretsApiPkiConfigureClusterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureClusterResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureCluster().'
            );
        }

        if (requestParameters['PkiConfigureClusterRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiConfigureClusterRequest',
                'Required parameter "PkiConfigureClusterRequest" was null or undefined when calling pkiConfigureCluster().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/cluster`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureClusterRequestToJSON(requestParameters['PkiConfigureClusterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureClusterResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureCluster(pki_mount_path: string, PkiConfigureClusterRequest: PkiConfigureClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureClusterResponse> {
        const response = await this.pkiConfigureClusterRaw({ pki_mount_path: pki_mount_path, PkiConfigureClusterRequest: PkiConfigureClusterRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureCmpRaw(requestParameters: SecretsApiPkiConfigureCmpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureCmp().'
            );
        }

        if (requestParameters['PkiConfigureCmpRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiConfigureCmpRequest',
                'Required parameter "PkiConfigureCmpRequest" was null or undefined when calling pkiConfigureCmp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/cmp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureCmpRequestToJSON(requestParameters['PkiConfigureCmpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiConfigureCmp(pki_mount_path: string, PkiConfigureCmpRequest: PkiConfigureCmpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiConfigureCmpRaw({ pki_mount_path: pki_mount_path, PkiConfigureCmpRequest: PkiConfigureCmpRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureCrlRaw(requestParameters: SecretsApiPkiConfigureCrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureCrlResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureCrl().'
            );
        }

        if (requestParameters['PkiConfigureCrlRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiConfigureCrlRequest',
                'Required parameter "PkiConfigureCrlRequest" was null or undefined when calling pkiConfigureCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureCrlRequestToJSON(requestParameters['PkiConfigureCrlRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureCrl(pki_mount_path: string, PkiConfigureCrlRequest: PkiConfigureCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureCrlResponse> {
        const response = await this.pkiConfigureCrlRaw({ pki_mount_path: pki_mount_path, PkiConfigureCrlRequest: PkiConfigureCrlRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureEstRaw(requestParameters: SecretsApiPkiConfigureEstOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureEst().'
            );
        }

        if (requestParameters['PkiConfigureEstRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiConfigureEstRequest',
                'Required parameter "PkiConfigureEstRequest" was null or undefined when calling pkiConfigureEst().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/est`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureEstRequestToJSON(requestParameters['PkiConfigureEstRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiConfigureEst(pki_mount_path: string, PkiConfigureEstRequest: PkiConfigureEstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiConfigureEstRaw({ pki_mount_path: pki_mount_path, PkiConfigureEstRequest: PkiConfigureEstRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureExternalPolicyRaw(requestParameters: SecretsApiPkiConfigureExternalPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureExternalPolicyResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureExternalPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/external-policy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureExternalPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureExternalPolicy(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureExternalPolicyResponse> {
        const response = await this.pkiConfigureExternalPolicyRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureExternalPolicy_4Raw(requestParameters: SecretsApiPkiConfigureExternalPolicy0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureExternalPolicy_4().'
            );
        }

        if (requestParameters['PkiConfigureExternalPolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiConfigureExternalPolicyRequest',
                'Required parameter "PkiConfigureExternalPolicyRequest" was null or undefined when calling pkiConfigureExternalPolicy_4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/external-policy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureExternalPolicyRequestToJSON(requestParameters['PkiConfigureExternalPolicyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiConfigureExternalPolicy_4(pki_mount_path: string, PkiConfigureExternalPolicyRequest: PkiConfigureExternalPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiConfigureExternalPolicy_4Raw({ pki_mount_path: pki_mount_path, PkiConfigureExternalPolicyRequest: PkiConfigureExternalPolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureIssuersRaw(requestParameters: SecretsApiPkiConfigureIssuersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureIssuersResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureIssuers().'
            );
        }

        if (requestParameters['PkiConfigureIssuersRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiConfigureIssuersRequest',
                'Required parameter "PkiConfigureIssuersRequest" was null or undefined when calling pkiConfigureIssuers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/issuers`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureIssuersRequestToJSON(requestParameters['PkiConfigureIssuersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureIssuersResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureIssuers(pki_mount_path: string, PkiConfigureIssuersRequest: PkiConfigureIssuersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureIssuersResponse> {
        const response = await this.pkiConfigureIssuersRaw({ pki_mount_path: pki_mount_path, PkiConfigureIssuersRequest: PkiConfigureIssuersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureKeysRaw(requestParameters: SecretsApiPkiConfigureKeysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureKeysResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureKeys().'
            );
        }

        if (requestParameters['PkiConfigureKeysRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiConfigureKeysRequest',
                'Required parameter "PkiConfigureKeysRequest" was null or undefined when calling pkiConfigureKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/keys`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureKeysRequestToJSON(requestParameters['PkiConfigureKeysRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureKeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureKeys(pki_mount_path: string, PkiConfigureKeysRequest: PkiConfigureKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureKeysResponse> {
        const response = await this.pkiConfigureKeysRaw({ pki_mount_path: pki_mount_path, PkiConfigureKeysRequest: PkiConfigureKeysRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureScepRaw(requestParameters: SecretsApiPkiConfigureScepOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureScep().'
            );
        }

        if (requestParameters['PkiConfigureScepRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiConfigureScepRequest',
                'Required parameter "PkiConfigureScepRequest" was null or undefined when calling pkiConfigureScep().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/scep`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureScepRequestToJSON(requestParameters['PkiConfigureScepRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiConfigureScep(pki_mount_path: string, PkiConfigureScepRequest: PkiConfigureScepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiConfigureScepRaw({ pki_mount_path: pki_mount_path, PkiConfigureScepRequest: PkiConfigureScepRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiConfigureUrlsRaw(requestParameters: SecretsApiPkiConfigureUrlsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiConfigureUrlsResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiConfigureUrls().'
            );
        }

        if (requestParameters['PkiConfigureUrlsRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiConfigureUrlsRequest',
                'Required parameter "PkiConfigureUrlsRequest" was null or undefined when calling pkiConfigureUrls().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/config/urls`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiConfigureUrlsRequestToJSON(requestParameters['PkiConfigureUrlsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiConfigureUrlsResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiConfigureUrls(pki_mount_path: string, PkiConfigureUrlsRequest: PkiConfigureUrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiConfigureUrlsResponse> {
        const response = await this.pkiConfigureUrlsRaw({ pki_mount_path: pki_mount_path, PkiConfigureUrlsRequest: PkiConfigureUrlsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiCrossSignIntermediateRaw(requestParameters: SecretsApiPkiCrossSignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiCrossSignIntermediateResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiCrossSignIntermediate().'
            );
        }

        if (requestParameters['PkiCrossSignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiCrossSignIntermediateRequest',
                'Required parameter "PkiCrossSignIntermediateRequest" was null or undefined when calling pkiCrossSignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/intermediate/cross-sign`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiCrossSignIntermediateRequestToJSON(requestParameters['PkiCrossSignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiCrossSignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiCrossSignIntermediate(pki_mount_path: string, PkiCrossSignIntermediateRequest: PkiCrossSignIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiCrossSignIntermediateResponse> {
        const response = await this.pkiCrossSignIntermediateRaw({ pki_mount_path: pki_mount_path, PkiCrossSignIntermediateRequest: PkiCrossSignIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiDeleteEabKeyRaw(requestParameters: SecretsApiPkiDeleteEabKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key_id'] == null) {
            throw new runtime.RequiredError(
                'key_id',
                'Required parameter "key_id" was null or undefined when calling pkiDeleteEabKey().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiDeleteEabKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/eab/{key_id}`.replace(`{${"key_id"}}`, encodeURIComponent(String(requestParameters['key_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteEabKey(key_id: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiDeleteEabKeyRaw({ key_id: key_id, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiDeleteIssuerRaw(requestParameters: SecretsApiPkiDeleteIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiDeleteIssuer().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiDeleteIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteIssuer(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiDeleteIssuerRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiDeleteKeyRaw(requestParameters: SecretsApiPkiDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['key_ref'] == null) {
            throw new runtime.RequiredError(
                'key_ref',
                'Required parameter "key_ref" was null or undefined when calling pkiDeleteKey().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/key/{key_ref}`.replace(`{${"key_ref"}}`, encodeURIComponent(String(requestParameters['key_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteKey(key_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiDeleteKeyRaw({ key_ref: key_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiDeleteRoleRaw(requestParameters: SecretsApiPkiDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pkiDeleteRole().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteRole(name: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiDeleteRoleRaw({ name: name, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiDeleteRootRaw(requestParameters: SecretsApiPkiDeleteRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiDeleteRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/root`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiDeleteRoot(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiDeleteRootRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyRaw(requestParameters: SecretsApiPkiGenerateEabKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateEabKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/new-eab`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKey(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyResponse> {
        const response = await this.pkiGenerateEabKeyRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForIssuerRaw(requestParameters: SecretsApiPkiGenerateEabKeyForIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForIssuerResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiGenerateEabKeyForIssuer().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateEabKeyForIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForIssuer(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForIssuerResponse> {
        const response = await this.pkiGenerateEabKeyForIssuerRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForIssuerAndRoleRaw(requestParameters: SecretsApiPkiGenerateEabKeyForIssuerAndRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForIssuerAndRoleResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiGenerateEabKeyForIssuerAndRole().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiGenerateEabKeyForIssuerAndRole().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateEabKeyForIssuerAndRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForIssuerAndRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForIssuerAndRole(issuer_ref: string, role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForIssuerAndRoleResponse> {
        const response = await this.pkiGenerateEabKeyForIssuerAndRoleRaw({ issuer_ref: issuer_ref, role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForIssuer_5Raw(requestParameters: SecretsApiPkiGenerateEabKeyForIssuer0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForIssuerResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiGenerateEabKeyForIssuer_5().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateEabKeyForIssuer_5().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForIssuer_5(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForIssuerResponse> {
        const response = await this.pkiGenerateEabKeyForIssuer_5Raw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForIssuer_6Raw(requestParameters: SecretsApiPkiGenerateEabKeyForIssuer1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForIssuerResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiGenerateEabKeyForIssuer_6().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiGenerateEabKeyForIssuer_6().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateEabKeyForIssuer_6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/new-eab`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForIssuer_6(issuer_ref: string, policy: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForIssuerResponse> {
        const response = await this.pkiGenerateEabKeyForIssuer_6Raw({ issuer_ref: issuer_ref, policy: policy, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKeyForRoleRaw(requestParameters: SecretsApiPkiGenerateEabKeyForRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyForRoleResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiGenerateEabKeyForRole().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateEabKeyForRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/new-eab`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyForRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKeyForRole(role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyForRoleResponse> {
        const response = await this.pkiGenerateEabKeyForRoleRaw({ role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKey_7Raw(requestParameters: SecretsApiPkiGenerateEabKey0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateEabKey_7().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/new-eab`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKey_7(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyResponse> {
        const response = await this.pkiGenerateEabKey_7Raw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateEabKey_8Raw(requestParameters: SecretsApiPkiGenerateEabKey1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateEabKeyResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiGenerateEabKey_8().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateEabKey_8().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/new-eab`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateEabKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateEabKey_8(policy: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateEabKeyResponse> {
        const response = await this.pkiGenerateEabKey_8Raw({ policy: policy, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateExportedKeyRaw(requestParameters: SecretsApiPkiGenerateExportedKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateExportedKeyResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateExportedKey().'
            );
        }

        if (requestParameters['PkiGenerateExportedKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiGenerateExportedKeyRequest',
                'Required parameter "PkiGenerateExportedKeyRequest" was null or undefined when calling pkiGenerateExportedKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/keys/generate/exported`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateExportedKeyRequestToJSON(requestParameters['PkiGenerateExportedKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateExportedKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateExportedKey(pki_mount_path: string, PkiGenerateExportedKeyRequest: PkiGenerateExportedKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateExportedKeyResponse> {
        const response = await this.pkiGenerateExportedKeyRaw({ pki_mount_path: pki_mount_path, PkiGenerateExportedKeyRequest: PkiGenerateExportedKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateIntermediateRaw(requestParameters: SecretsApiPkiGenerateIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateIntermediateResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiGenerateIntermediate().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateIntermediate().'
            );
        }

        if (requestParameters['PkiGenerateIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiGenerateIntermediateRequest',
                'Required parameter "PkiGenerateIntermediateRequest" was null or undefined when calling pkiGenerateIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/intermediate/generate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateIntermediateRequestToJSON(requestParameters['PkiGenerateIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateIntermediate(exported: PkiGenerateIntermediateExportedEnum, pki_mount_path: string, PkiGenerateIntermediateRequest: PkiGenerateIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateIntermediateResponse> {
        const response = await this.pkiGenerateIntermediateRaw({ exported: exported, pki_mount_path: pki_mount_path, PkiGenerateIntermediateRequest: PkiGenerateIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateInternalKeyRaw(requestParameters: SecretsApiPkiGenerateInternalKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateInternalKeyResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateInternalKey().'
            );
        }

        if (requestParameters['PkiGenerateInternalKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiGenerateInternalKeyRequest',
                'Required parameter "PkiGenerateInternalKeyRequest" was null or undefined when calling pkiGenerateInternalKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/keys/generate/internal`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateInternalKeyRequestToJSON(requestParameters['PkiGenerateInternalKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateInternalKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateInternalKey(pki_mount_path: string, PkiGenerateInternalKeyRequest: PkiGenerateInternalKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateInternalKeyResponse> {
        const response = await this.pkiGenerateInternalKeyRaw({ pki_mount_path: pki_mount_path, PkiGenerateInternalKeyRequest: PkiGenerateInternalKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateKmsKeyRaw(requestParameters: SecretsApiPkiGenerateKmsKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateKmsKeyResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateKmsKey().'
            );
        }

        if (requestParameters['PkiGenerateKmsKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiGenerateKmsKeyRequest',
                'Required parameter "PkiGenerateKmsKeyRequest" was null or undefined when calling pkiGenerateKmsKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/keys/generate/kms`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateKmsKeyRequestToJSON(requestParameters['PkiGenerateKmsKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateKmsKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateKmsKey(pki_mount_path: string, PkiGenerateKmsKeyRequest: PkiGenerateKmsKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateKmsKeyResponse> {
        const response = await this.pkiGenerateKmsKeyRaw({ pki_mount_path: pki_mount_path, PkiGenerateKmsKeyRequest: PkiGenerateKmsKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiGenerateRootRaw(requestParameters: SecretsApiPkiGenerateRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiGenerateRootResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiGenerateRoot().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiGenerateRoot().'
            );
        }

        if (requestParameters['PkiGenerateRootRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiGenerateRootRequest',
                'Required parameter "PkiGenerateRootRequest" was null or undefined when calling pkiGenerateRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/generate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiGenerateRootRequestToJSON(requestParameters['PkiGenerateRootRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiGenerateRootResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiGenerateRoot(exported: PkiGenerateRootExportedEnum, pki_mount_path: string, PkiGenerateRootRequest: PkiGenerateRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiGenerateRootResponse> {
        const response = await this.pkiGenerateRootRaw({ exported: exported, pki_mount_path: pki_mount_path, PkiGenerateRootRequest: PkiGenerateRootRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiImportKeyRaw(requestParameters: SecretsApiPkiImportKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiImportKeyResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiImportKey().'
            );
        }

        if (requestParameters['PkiImportKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiImportKeyRequest',
                'Required parameter "PkiImportKeyRequest" was null or undefined when calling pkiImportKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/keys/import`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiImportKeyRequestToJSON(requestParameters['PkiImportKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiImportKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiImportKey(pki_mount_path: string, PkiImportKeyRequest: PkiImportKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiImportKeyResponse> {
        const response = await this.pkiImportKeyRaw({ pki_mount_path: pki_mount_path, PkiImportKeyRequest: PkiImportKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssueWithRoleRaw(requestParameters: SecretsApiPkiIssueWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssueWithRoleResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiIssueWithRole().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssueWithRole().'
            );
        }

        if (requestParameters['PkiIssueWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssueWithRoleRequest',
                'Required parameter "PkiIssueWithRoleRequest" was null or undefined when calling pkiIssueWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issue/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssueWithRoleRequestToJSON(requestParameters['PkiIssueWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssueWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssueWithRole(role: string, pki_mount_path: string, PkiIssueWithRoleRequest: PkiIssueWithRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssueWithRoleResponse> {
        const response = await this.pkiIssueWithRoleRaw({ role: role, pki_mount_path: pki_mount_path, PkiIssueWithRoleRequest: PkiIssueWithRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerIssueWithRoleRaw(requestParameters: SecretsApiPkiIssuerIssueWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerIssueWithRoleResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerIssueWithRole().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiIssuerIssueWithRole().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerIssueWithRole().'
            );
        }

        if (requestParameters['PkiIssuerIssueWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssuerIssueWithRoleRequest',
                'Required parameter "PkiIssuerIssueWithRoleRequest" was null or undefined when calling pkiIssuerIssueWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/issue/{role}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerIssueWithRoleRequestToJSON(requestParameters['PkiIssuerIssueWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerIssueWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerIssueWithRole(issuer_ref: string, role: string, pki_mount_path: string, PkiIssuerIssueWithRoleRequest: PkiIssuerIssueWithRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerIssueWithRoleResponse> {
        const response = await this.pkiIssuerIssueWithRoleRaw({ issuer_ref: issuer_ref, role: role, pki_mount_path: pki_mount_path, PkiIssuerIssueWithRoleRequest: PkiIssuerIssueWithRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlRaw(requestParameters: SecretsApiPkiIssuerReadCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerReadCrl().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerReadCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrl(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlResponse> {
        const response = await this.pkiIssuerReadCrlRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlDeltaRaw(requestParameters: SecretsApiPkiIssuerReadCrlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlDeltaResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerReadCrlDelta().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerReadCrlDelta().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/delta`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlDeltaResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlDelta(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlDeltaResponse> {
        const response = await this.pkiIssuerReadCrlDeltaRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlDeltaDerRaw(requestParameters: SecretsApiPkiIssuerReadCrlDeltaDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlDeltaDerResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerReadCrlDeltaDer().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerReadCrlDeltaDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/delta/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlDeltaDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlDeltaDer(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlDeltaDerResponse> {
        const response = await this.pkiIssuerReadCrlDeltaDerRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlDeltaPemRaw(requestParameters: SecretsApiPkiIssuerReadCrlDeltaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlDeltaPemResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerReadCrlDeltaPem().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerReadCrlDeltaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/delta/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlDeltaPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlDeltaPem(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlDeltaPemResponse> {
        const response = await this.pkiIssuerReadCrlDeltaPemRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlDerRaw(requestParameters: SecretsApiPkiIssuerReadCrlDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlDerResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerReadCrlDer().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerReadCrlDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlDer(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlDerResponse> {
        const response = await this.pkiIssuerReadCrlDerRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadCrlPemRaw(requestParameters: SecretsApiPkiIssuerReadCrlPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadCrlPemResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerReadCrlPem().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerReadCrlPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/crl/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadCrlPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadCrlPem(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadCrlPemResponse> {
        const response = await this.pkiIssuerReadCrlPemRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlRaw(requestParameters: SecretsApiPkiIssuerReadUnifiedCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadUnifiedCrlResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerReadUnifiedCrl().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerReadUnifiedCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadUnifiedCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadUnifiedCrl(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadUnifiedCrlResponse> {
        const response = await this.pkiIssuerReadUnifiedCrlRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDeltaRaw(requestParameters: SecretsApiPkiIssuerReadUnifiedCrlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadUnifiedCrlDeltaResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerReadUnifiedCrlDelta().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerReadUnifiedCrlDelta().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/delta`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadUnifiedCrlDeltaResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDelta(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadUnifiedCrlDeltaResponse> {
        const response = await this.pkiIssuerReadUnifiedCrlDeltaRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDeltaDerRaw(requestParameters: SecretsApiPkiIssuerReadUnifiedCrlDeltaDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadUnifiedCrlDeltaDerResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerReadUnifiedCrlDeltaDer().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerReadUnifiedCrlDeltaDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/delta/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadUnifiedCrlDeltaDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDeltaDer(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadUnifiedCrlDeltaDerResponse> {
        const response = await this.pkiIssuerReadUnifiedCrlDeltaDerRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDeltaPemRaw(requestParameters: SecretsApiPkiIssuerReadUnifiedCrlDeltaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadUnifiedCrlDeltaPemResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerReadUnifiedCrlDeltaPem().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerReadUnifiedCrlDeltaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/delta/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadUnifiedCrlDeltaPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDeltaPem(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadUnifiedCrlDeltaPemResponse> {
        const response = await this.pkiIssuerReadUnifiedCrlDeltaPemRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDerRaw(requestParameters: SecretsApiPkiIssuerReadUnifiedCrlDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadUnifiedCrlDerResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerReadUnifiedCrlDer().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerReadUnifiedCrlDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadUnifiedCrlDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlDer(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadUnifiedCrlDerResponse> {
        const response = await this.pkiIssuerReadUnifiedCrlDerRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlPemRaw(requestParameters: SecretsApiPkiIssuerReadUnifiedCrlPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerReadUnifiedCrlPemResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerReadUnifiedCrlPem().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerReadUnifiedCrlPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/unified-crl/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerReadUnifiedCrlPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerReadUnifiedCrlPem(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerReadUnifiedCrlPemResponse> {
        const response = await this.pkiIssuerReadUnifiedCrlPemRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerResignCrlsRaw(requestParameters: SecretsApiPkiIssuerResignCrlsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerResignCrlsResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerResignCrls().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerResignCrls().'
            );
        }

        if (requestParameters['PkiIssuerResignCrlsRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssuerResignCrlsRequest',
                'Required parameter "PkiIssuerResignCrlsRequest" was null or undefined when calling pkiIssuerResignCrls().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/resign-crls`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerResignCrlsRequestToJSON(requestParameters['PkiIssuerResignCrlsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerResignCrlsResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerResignCrls(issuer_ref: string, pki_mount_path: string, PkiIssuerResignCrlsRequest: PkiIssuerResignCrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerResignCrlsResponse> {
        const response = await this.pkiIssuerResignCrlsRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiIssuerResignCrlsRequest: PkiIssuerResignCrlsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignIntermediateRaw(requestParameters: SecretsApiPkiIssuerSignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignIntermediateResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerSignIntermediate().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerSignIntermediate().'
            );
        }

        if (requestParameters['PkiIssuerSignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssuerSignIntermediateRequest',
                'Required parameter "PkiIssuerSignIntermediateRequest" was null or undefined when calling pkiIssuerSignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-intermediate`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignIntermediateRequestToJSON(requestParameters['PkiIssuerSignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignIntermediate(issuer_ref: string, pki_mount_path: string, PkiIssuerSignIntermediateRequest: PkiIssuerSignIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignIntermediateResponse> {
        const response = await this.pkiIssuerSignIntermediateRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiIssuerSignIntermediateRequest: PkiIssuerSignIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignRevocationListRaw(requestParameters: SecretsApiPkiIssuerSignRevocationListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignRevocationListResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerSignRevocationList().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerSignRevocationList().'
            );
        }

        if (requestParameters['PkiIssuerSignRevocationListRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssuerSignRevocationListRequest',
                'Required parameter "PkiIssuerSignRevocationListRequest" was null or undefined when calling pkiIssuerSignRevocationList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-revocation-list`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignRevocationListRequestToJSON(requestParameters['PkiIssuerSignRevocationListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignRevocationListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignRevocationList(issuer_ref: string, pki_mount_path: string, PkiIssuerSignRevocationListRequest: PkiIssuerSignRevocationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignRevocationListResponse> {
        const response = await this.pkiIssuerSignRevocationListRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiIssuerSignRevocationListRequest: PkiIssuerSignRevocationListRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignSelfIssuedRaw(requestParameters: SecretsApiPkiIssuerSignSelfIssuedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignSelfIssuedResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerSignSelfIssued().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerSignSelfIssued().'
            );
        }

        if (requestParameters['PkiIssuerSignSelfIssuedRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssuerSignSelfIssuedRequest',
                'Required parameter "PkiIssuerSignSelfIssuedRequest" was null or undefined when calling pkiIssuerSignSelfIssued().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-self-issued`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignSelfIssuedRequestToJSON(requestParameters['PkiIssuerSignSelfIssuedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignSelfIssuedResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignSelfIssued(issuer_ref: string, pki_mount_path: string, PkiIssuerSignSelfIssuedRequest: PkiIssuerSignSelfIssuedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignSelfIssuedResponse> {
        const response = await this.pkiIssuerSignSelfIssuedRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiIssuerSignSelfIssuedRequest: PkiIssuerSignSelfIssuedRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignVerbatimRaw(requestParameters: SecretsApiPkiIssuerSignVerbatimOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignVerbatimResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerSignVerbatim().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerSignVerbatim().'
            );
        }

        if (requestParameters['PkiIssuerSignVerbatimRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssuerSignVerbatimRequest',
                'Required parameter "PkiIssuerSignVerbatimRequest" was null or undefined when calling pkiIssuerSignVerbatim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-verbatim`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignVerbatimRequestToJSON(requestParameters['PkiIssuerSignVerbatimRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignVerbatimResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignVerbatim(issuer_ref: string, pki_mount_path: string, PkiIssuerSignVerbatimRequest: PkiIssuerSignVerbatimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignVerbatimResponse> {
        const response = await this.pkiIssuerSignVerbatimRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiIssuerSignVerbatimRequest: PkiIssuerSignVerbatimRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignVerbatimWithRoleRaw(requestParameters: SecretsApiPkiIssuerSignVerbatimWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignVerbatimWithRoleResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerSignVerbatimWithRole().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiIssuerSignVerbatimWithRole().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerSignVerbatimWithRole().'
            );
        }

        if (requestParameters['PkiIssuerSignVerbatimWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssuerSignVerbatimWithRoleRequest',
                'Required parameter "PkiIssuerSignVerbatimWithRoleRequest" was null or undefined when calling pkiIssuerSignVerbatimWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign-verbatim/{role}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignVerbatimWithRoleRequestToJSON(requestParameters['PkiIssuerSignVerbatimWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignVerbatimWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignVerbatimWithRole(issuer_ref: string, role: string, pki_mount_path: string, PkiIssuerSignVerbatimWithRoleRequest: PkiIssuerSignVerbatimWithRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignVerbatimWithRoleResponse> {
        const response = await this.pkiIssuerSignVerbatimWithRoleRaw({ issuer_ref: issuer_ref, role: role, pki_mount_path: pki_mount_path, PkiIssuerSignVerbatimWithRoleRequest: PkiIssuerSignVerbatimWithRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuerSignWithRoleRaw(requestParameters: SecretsApiPkiIssuerSignWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuerSignWithRoleResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiIssuerSignWithRole().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiIssuerSignWithRole().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuerSignWithRole().'
            );
        }

        if (requestParameters['PkiIssuerSignWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssuerSignWithRoleRequest',
                'Required parameter "PkiIssuerSignWithRoleRequest" was null or undefined when calling pkiIssuerSignWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/sign/{role}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuerSignWithRoleRequestToJSON(requestParameters['PkiIssuerSignWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuerSignWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuerSignWithRole(issuer_ref: string, role: string, pki_mount_path: string, PkiIssuerSignWithRoleRequest: PkiIssuerSignWithRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuerSignWithRoleResponse> {
        const response = await this.pkiIssuerSignWithRoleRaw({ issuer_ref: issuer_ref, role: role, pki_mount_path: pki_mount_path, PkiIssuerSignWithRoleRequest: PkiIssuerSignWithRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuersGenerateIntermediateRaw(requestParameters: SecretsApiPkiIssuersGenerateIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuersGenerateIntermediateResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiIssuersGenerateIntermediate().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuersGenerateIntermediate().'
            );
        }

        if (requestParameters['PkiIssuersGenerateIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssuersGenerateIntermediateRequest',
                'Required parameter "PkiIssuersGenerateIntermediateRequest" was null or undefined when calling pkiIssuersGenerateIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/generate/intermediate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuersGenerateIntermediateRequestToJSON(requestParameters['PkiIssuersGenerateIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuersGenerateIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuersGenerateIntermediate(exported: PkiIssuersGenerateIntermediateExportedEnum, pki_mount_path: string, PkiIssuersGenerateIntermediateRequest: PkiIssuersGenerateIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuersGenerateIntermediateResponse> {
        const response = await this.pkiIssuersGenerateIntermediateRaw({ exported: exported, pki_mount_path: pki_mount_path, PkiIssuersGenerateIntermediateRequest: PkiIssuersGenerateIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuersGenerateRootRaw(requestParameters: SecretsApiPkiIssuersGenerateRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuersGenerateRootResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiIssuersGenerateRoot().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuersGenerateRoot().'
            );
        }

        if (requestParameters['PkiIssuersGenerateRootRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssuersGenerateRootRequest',
                'Required parameter "PkiIssuersGenerateRootRequest" was null or undefined when calling pkiIssuersGenerateRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/generate/root/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuersGenerateRootRequestToJSON(requestParameters['PkiIssuersGenerateRootRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuersGenerateRootResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuersGenerateRoot(exported: PkiIssuersGenerateRootExportedEnum, pki_mount_path: string, PkiIssuersGenerateRootRequest: PkiIssuersGenerateRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuersGenerateRootResponse> {
        const response = await this.pkiIssuersGenerateRootRaw({ exported: exported, pki_mount_path: pki_mount_path, PkiIssuersGenerateRootRequest: PkiIssuersGenerateRootRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuersImportBundleRaw(requestParameters: SecretsApiPkiIssuersImportBundleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuersImportBundleResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuersImportBundle().'
            );
        }

        if (requestParameters['PkiIssuersImportBundleRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssuersImportBundleRequest',
                'Required parameter "PkiIssuersImportBundleRequest" was null or undefined when calling pkiIssuersImportBundle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/import/bundle`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuersImportBundleRequestToJSON(requestParameters['PkiIssuersImportBundleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuersImportBundleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuersImportBundle(pki_mount_path: string, PkiIssuersImportBundleRequest: PkiIssuersImportBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuersImportBundleResponse> {
        const response = await this.pkiIssuersImportBundleRaw({ pki_mount_path: pki_mount_path, PkiIssuersImportBundleRequest: PkiIssuersImportBundleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiIssuersImportCertRaw(requestParameters: SecretsApiPkiIssuersImportCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiIssuersImportCertResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiIssuersImportCert().'
            );
        }

        if (requestParameters['PkiIssuersImportCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiIssuersImportCertRequest',
                'Required parameter "PkiIssuersImportCertRequest" was null or undefined when calling pkiIssuersImportCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/import/cert`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiIssuersImportCertRequestToJSON(requestParameters['PkiIssuersImportCertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiIssuersImportCertResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiIssuersImportCert(pki_mount_path: string, PkiIssuersImportCertRequest: PkiIssuersImportCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiIssuersImportCertResponse> {
        const response = await this.pkiIssuersImportCertRaw({ pki_mount_path: pki_mount_path, PkiIssuersImportCertRequest: PkiIssuersImportCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListAcmeAccountKeysRaw(requestParameters: SecretsApiPkiListAcmeAccountKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiListAcmeAccountKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListAcmeAccountKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/mgmt/account/keyid/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListAcmeAccountKeys(pki_mount_path: string, list: PkiListAcmeAccountKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListAcmeAccountKeysRaw({ pki_mount_path: pki_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListCertMetadataRaw(requestParameters: SecretsApiPkiListCertMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiListCertMetadata().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListCertMetadata().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert-metadata/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListCertMetadata(pki_mount_path: string, list: PkiListCertMetadataListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListCertMetadataRaw({ pki_mount_path: pki_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListCertsRaw(requestParameters: SecretsApiPkiListCertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiListCerts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListCerts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/certs/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListCerts(pki_mount_path: string, list: PkiListCertsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListCertsRaw({ pki_mount_path: pki_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListCertsRevocationQueueRaw(requestParameters: SecretsApiPkiListCertsRevocationQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiListCertsRevocationQueue().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListCertsRevocationQueue().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/certs/revocation-queue/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListCertsRevocationQueue(pki_mount_path: string, list: PkiListCertsRevocationQueueListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListCertsRevocationQueueRaw({ pki_mount_path: pki_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListEabKeysRaw(requestParameters: SecretsApiPkiListEabKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiListEabKeysResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiListEabKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListEabKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/eab/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiListEabKeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListEabKeys(pki_mount_path: string, list: PkiListEabKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiListEabKeysResponse> {
        const response = await this.pkiListEabKeysRaw({ pki_mount_path: pki_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListIssuersRaw(requestParameters: SecretsApiPkiListIssuersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiListIssuersResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiListIssuers().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListIssuers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuers/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiListIssuersResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListIssuers(pki_mount_path: string, list: PkiListIssuersListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiListIssuersResponse> {
        const response = await this.pkiListIssuersRaw({ pki_mount_path: pki_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListKeysRaw(requestParameters: SecretsApiPkiListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiListKeysResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/keys/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiListKeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListKeys(pki_mount_path: string, list: PkiListKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiListKeysResponse> {
        const response = await this.pkiListKeysRaw({ pki_mount_path: pki_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListRevokedCertsRaw(requestParameters: SecretsApiPkiListRevokedCertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiListRevokedCerts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListRevokedCerts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/certs/revoked/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListRevokedCerts(pki_mount_path: string, list: PkiListRevokedCertsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListRevokedCertsRaw({ pki_mount_path: pki_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListRolesRaw(requestParameters: SecretsApiPkiListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListRoles(pki_mount_path: string, list: PkiListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.pkiListRolesRaw({ pki_mount_path: pki_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiListUnifiedRevokedCertsRaw(requestParameters: SecretsApiPkiListUnifiedRevokedCertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiListUnifiedRevokedCertsResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiListUnifiedRevokedCerts().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pkiListUnifiedRevokedCerts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/certs/unified-revoked/`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiListUnifiedRevokedCertsResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiListUnifiedRevokedCerts(pki_mount_path: string, list: PkiListUnifiedRevokedCertsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiListUnifiedRevokedCertsResponse> {
        const response = await this.pkiListUnifiedRevokedCertsRaw({ pki_mount_path: pki_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiPatchIssuerRaw(requestParameters: SecretsApiPkiPatchIssuerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiPatchIssuerResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiPatchIssuer().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiPatchIssuer().'
            );
        }

        if (requestParameters['PkiPatchIssuerRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiPatchIssuerRequest',
                'Required parameter "PkiPatchIssuerRequest" was null or undefined when calling pkiPatchIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PkiPatchIssuerRequestToJSON(requestParameters['PkiPatchIssuerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiPatchIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiPatchIssuer(issuer_ref: string, pki_mount_path: string, PkiPatchIssuerRequest: PkiPatchIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiPatchIssuerResponse> {
        const response = await this.pkiPatchIssuerRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiPatchIssuerRequest: PkiPatchIssuerRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiPatchRoleRaw(requestParameters: SecretsApiPkiPatchRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiPatchRoleResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pkiPatchRole().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiPatchRole().'
            );
        }

        if (requestParameters['PkiPatchRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiPatchRoleRequest',
                'Required parameter "PkiPatchRoleRequest" was null or undefined when calling pkiPatchRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PkiPatchRoleRequestToJSON(requestParameters['PkiPatchRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiPatchRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiPatchRole(name: string, pki_mount_path: string, PkiPatchRoleRequest: PkiPatchRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiPatchRoleResponse> {
        const response = await this.pkiPatchRoleRaw({ name: name, pki_mount_path: pki_mount_path, PkiPatchRoleRequest: PkiPatchRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiQueryOcspRaw(requestParameters: SecretsApiPkiQueryOcspRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiQueryOcsp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ocsp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiQueryOcsp(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiQueryOcspRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiQueryOcspWithGetReqRaw(requestParameters: SecretsApiPkiQueryOcspWithGetReqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['req'] == null) {
            throw new runtime.RequiredError(
                'req',
                'Required parameter "req" was null or undefined when calling pkiQueryOcspWithGetReq().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiQueryOcspWithGetReq().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ocsp/{req}`.replace(`{${"req"}}`, encodeURIComponent(String(requestParameters['req']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiQueryOcspWithGetReq(req: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiQueryOcspWithGetReqRaw({ req: req, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiQueryUnifiedOcspRaw(requestParameters: SecretsApiPkiQueryUnifiedOcspRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiQueryUnifiedOcsp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/unified-ocsp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiQueryUnifiedOcsp(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiQueryUnifiedOcspRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiQueryUnifiedOcspWithGetReqRaw(requestParameters: SecretsApiPkiQueryUnifiedOcspWithGetReqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['req'] == null) {
            throw new runtime.RequiredError(
                'req',
                'Required parameter "req" was null or undefined when calling pkiQueryUnifiedOcspWithGetReq().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiQueryUnifiedOcspWithGetReq().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/unified-ocsp/{req}`.replace(`{${"req"}}`, encodeURIComponent(String(requestParameters['req']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiQueryUnifiedOcspWithGetReq(req: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiQueryUnifiedOcspWithGetReqRaw({ req: req, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadAcmeConfigurationRaw(requestParameters: SecretsApiPkiReadAcmeConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadAcmeConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/acme`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadAcmeConfiguration(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadAcmeConfigurationRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/directory`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadAcmeDirectory(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadAcmeDirectoryRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadAcmeKeyIdRaw(requestParameters: SecretsApiPkiReadAcmeKeyIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['keyid'] == null) {
            throw new runtime.RequiredError(
                'keyid',
                'Required parameter "keyid" was null or undefined when calling pkiReadAcmeKeyId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadAcmeKeyId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/mgmt/account/keyid/{keyid}`.replace(`{${"keyid"}}`, encodeURIComponent(String(requestParameters['keyid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadAcmeKeyId(keyid: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadAcmeKeyIdRaw({ keyid: keyid, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/acme/new-nonce`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadAcmeNewNonce(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadAcmeNewNonceRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadAutoTidyConfigurationRaw(requestParameters: SecretsApiPkiReadAutoTidyConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadAutoTidyConfigurationResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadAutoTidyConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/auto-tidy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadAutoTidyConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadAutoTidyConfiguration(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadAutoTidyConfigurationResponse> {
        const response = await this.pkiReadAutoTidyConfigurationRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCaChainPemRaw(requestParameters: SecretsApiPkiReadCaChainPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCaChainPemResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCaChainPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ca_chain`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCaChainPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCaChainPem(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCaChainPemResponse> {
        const response = await this.pkiReadCaChainPemRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCaDerRaw(requestParameters: SecretsApiPkiReadCaDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCaDerResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCaDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ca`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCaDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCaDer(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCaDerResponse> {
        const response = await this.pkiReadCaDerRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCaPemRaw(requestParameters: SecretsApiPkiReadCaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCaPemResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/ca/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCaPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCaPem(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCaPemResponse> {
        const response = await this.pkiReadCaPemRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertRaw(requestParameters: SecretsApiPkiReadCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertResponse>> {
        if (requestParameters['serial'] == null) {
            throw new runtime.RequiredError(
                'serial',
                'Required parameter "serial" was null or undefined when calling pkiReadCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/{serial}`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCert(serial: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertResponse> {
        const response = await this.pkiReadCertRaw({ serial: serial, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertCaChainRaw(requestParameters: SecretsApiPkiReadCertCaChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertCaChainResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCertCaChain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/ca_chain`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertCaChainResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertCaChain(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertCaChainResponse> {
        const response = await this.pkiReadCertCaChainRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertCrlRaw(requestParameters: SecretsApiPkiReadCertCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertCrlResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCertCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertCrl(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertCrlResponse> {
        const response = await this.pkiReadCertCrlRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertDeltaCrlRaw(requestParameters: SecretsApiPkiReadCertDeltaCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertDeltaCrlResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCertDeltaCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/delta-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertDeltaCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertDeltaCrl(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertDeltaCrlResponse> {
        const response = await this.pkiReadCertDeltaCrlRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertMetadataRaw(requestParameters: SecretsApiPkiReadCertMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertMetadataResponse>> {
        if (requestParameters['serial'] == null) {
            throw new runtime.RequiredError(
                'serial',
                'Required parameter "serial" was null or undefined when calling pkiReadCertMetadata().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCertMetadata().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert-metadata/{serial}`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertMetadataResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertMetadata(serial: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertMetadataResponse> {
        const response = await this.pkiReadCertMetadataRaw({ serial: serial, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertRawDerRaw(requestParameters: SecretsApiPkiReadCertRawDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertRawDerResponse>> {
        if (requestParameters['serial'] == null) {
            throw new runtime.RequiredError(
                'serial',
                'Required parameter "serial" was null or undefined when calling pkiReadCertRawDer().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCertRawDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/{serial}/raw`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertRawDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertRawDer(serial: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertRawDerResponse> {
        const response = await this.pkiReadCertRawDerRaw({ serial: serial, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertRawPemRaw(requestParameters: SecretsApiPkiReadCertRawPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertRawPemResponse>> {
        if (requestParameters['serial'] == null) {
            throw new runtime.RequiredError(
                'serial',
                'Required parameter "serial" was null or undefined when calling pkiReadCertRawPem().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCertRawPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/{serial}/raw/pem`.replace(`{${"serial"}}`, encodeURIComponent(String(requestParameters['serial']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertRawPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertRawPem(serial: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertRawPemResponse> {
        const response = await this.pkiReadCertRawPemRaw({ serial: serial, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertUnifiedCrlRaw(requestParameters: SecretsApiPkiReadCertUnifiedCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertUnifiedCrlResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCertUnifiedCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/unified-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertUnifiedCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertUnifiedCrl(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertUnifiedCrlResponse> {
        const response = await this.pkiReadCertUnifiedCrlRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCertUnifiedDeltaCrlRaw(requestParameters: SecretsApiPkiReadCertUnifiedDeltaCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCertUnifiedDeltaCrlResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCertUnifiedDeltaCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cert/unified-delta-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCertUnifiedDeltaCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCertUnifiedDeltaCrl(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCertUnifiedDeltaCrlResponse> {
        const response = await this.pkiReadCertUnifiedDeltaCrlRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadClusterConfigurationRaw(requestParameters: SecretsApiPkiReadClusterConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadClusterConfigurationResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadClusterConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/cluster`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadClusterConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadClusterConfiguration(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadClusterConfigurationResponse> {
        const response = await this.pkiReadClusterConfigurationRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCmpv2ConfigurationRaw(requestParameters: SecretsApiPkiReadCmpv2ConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCmpv2Configuration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/cmp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadCmpv2Configuration(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadCmpv2ConfigurationRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlConfigurationRaw(requestParameters: SecretsApiPkiReadCrlConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlConfigurationResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCrlConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlConfiguration(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlConfigurationResponse> {
        const response = await this.pkiReadCrlConfigurationRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlDeltaRaw(requestParameters: SecretsApiPkiReadCrlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlDeltaResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCrlDelta().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/delta`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlDeltaResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlDelta(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlDeltaResponse> {
        const response = await this.pkiReadCrlDeltaRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlDeltaPemRaw(requestParameters: SecretsApiPkiReadCrlDeltaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlDeltaPemResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCrlDeltaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/delta/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlDeltaPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlDeltaPem(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlDeltaPemResponse> {
        const response = await this.pkiReadCrlDeltaPemRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlDerRaw(requestParameters: SecretsApiPkiReadCrlDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlDerResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCrlDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlDer(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlDerResponse> {
        const response = await this.pkiReadCrlDerRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadCrlPemRaw(requestParameters: SecretsApiPkiReadCrlPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadCrlPemResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadCrlPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadCrlPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadCrlPem(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadCrlPemResponse> {
        const response = await this.pkiReadCrlPemRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadEstCacertsRaw(requestParameters: SecretsApiPkiReadEstCacertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadEstCacerts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/est/cacerts`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadEstCacerts(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadEstCacertsRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadEstConfigurationRaw(requestParameters: SecretsApiPkiReadEstConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadEstConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/est`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadEstConfiguration(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadEstConfigurationRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadExternalPolicyAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadExternalPolicyAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadExternalPolicyAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/directory`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadExternalPolicyAcmeDirectory(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadExternalPolicyAcmeDirectoryRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadExternalPolicyAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadExternalPolicyAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadExternalPolicyAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/new-nonce`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadExternalPolicyAcmeNewNonce(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadExternalPolicyAcmeNewNonceRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadExternalPolicyPolicyAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadExternalPolicyPolicyAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiReadExternalPolicyPolicyAcmeDirectory().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadExternalPolicyPolicyAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/directory`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadExternalPolicyPolicyAcmeDirectory(policy: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadExternalPolicyPolicyAcmeDirectoryRaw({ policy: policy, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadExternalPolicyPolicyAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadExternalPolicyPolicyAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiReadExternalPolicyPolicyAcmeNewNonce().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadExternalPolicyPolicyAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/new-nonce`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadExternalPolicyPolicyAcmeNewNonce(policy: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadExternalPolicyPolicyAcmeNewNonceRaw({ policy: policy, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerRaw(requestParameters: SecretsApiPkiReadIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuerResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiReadIssuer().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuer(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuerResponse> {
        const response = await this.pkiReadIssuerRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerDerRaw(requestParameters: SecretsApiPkiReadIssuerDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuerDerResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiReadIssuerDer().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuerDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/der`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuerDerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuerDer(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuerDerResponse> {
        const response = await this.pkiReadIssuerDerRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiReadIssuerIssuerRefAcmeDirectory().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuerIssuerRefAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefAcmeDirectory(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefAcmeDirectoryRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiReadIssuerIssuerRefAcmeNewNonce().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuerIssuerRefAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefAcmeNewNonce(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefAcmeNewNonceRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefExternalPolicyAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyAcmeDirectory().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyAcmeDirectory(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefExternalPolicyAcmeDirectoryRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefExternalPolicyAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonce().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonce(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefExternalPolicyAcmeNewNonceRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectory().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectory().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectory(issuer_ref: string, policy: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeDirectoryRaw({ issuer_ref: issuer_ref, policy: policy, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonce().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonce().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonce(issuer_ref: string, policy: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefExternalPolicyPolicyAcmeNewNonceRaw({ issuer_ref: issuer_ref, policy: policy, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeDirectory().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeDirectory().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/directory`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefRolesRoleAcmeDirectory(issuer_ref: string, role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefRolesRoleAcmeDirectoryRaw({ issuer_ref: issuer_ref, role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-nonce`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadIssuerIssuerRefRolesRoleAcmeNewNonce(issuer_ref: string, role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadIssuerIssuerRefRolesRoleAcmeNewNonceRaw({ issuer_ref: issuer_ref, role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerJsonRaw(requestParameters: SecretsApiPkiReadIssuerJsonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuerJsonResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiReadIssuerJson().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuerJson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/json`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuerJsonResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuerJson(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuerJsonResponse> {
        const response = await this.pkiReadIssuerJsonRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuerPemRaw(requestParameters: SecretsApiPkiReadIssuerPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuerPemResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiReadIssuerPem().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuerPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/pem`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuerPemResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuerPem(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuerPemResponse> {
        const response = await this.pkiReadIssuerPemRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadIssuersConfigurationRaw(requestParameters: SecretsApiPkiReadIssuersConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadIssuersConfigurationResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadIssuersConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/issuers`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadIssuersConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadIssuersConfiguration(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadIssuersConfigurationResponse> {
        const response = await this.pkiReadIssuersConfigurationRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadKeyRaw(requestParameters: SecretsApiPkiReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadKeyResponse>> {
        if (requestParameters['key_ref'] == null) {
            throw new runtime.RequiredError(
                'key_ref',
                'Required parameter "key_ref" was null or undefined when calling pkiReadKey().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/key/{key_ref}`.replace(`{${"key_ref"}}`, encodeURIComponent(String(requestParameters['key_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadKey(key_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadKeyResponse> {
        const response = await this.pkiReadKeyRaw({ key_ref: key_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadKeysConfigurationRaw(requestParameters: SecretsApiPkiReadKeysConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadKeysConfigurationResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadKeysConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/keys`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadKeysConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadKeysConfiguration(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadKeysConfigurationResponse> {
        const response = await this.pkiReadKeysConfigurationRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRoleRaw(requestParameters: SecretsApiPkiReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadRoleResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pkiReadRole().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadRole(name: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadRoleResponse> {
        const response = await this.pkiReadRoleRaw({ name: name, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRolesRoleAcmeDirectoryRaw(requestParameters: SecretsApiPkiReadRolesRoleAcmeDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadRolesRoleAcmeDirectory().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadRolesRoleAcmeDirectory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/directory`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadRolesRoleAcmeDirectory(role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadRolesRoleAcmeDirectoryRaw({ role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRolesRoleAcmeNewNonceRaw(requestParameters: SecretsApiPkiReadRolesRoleAcmeNewNonceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadRolesRoleAcmeNewNonce().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadRolesRoleAcmeNewNonce().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/new-nonce`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadRolesRoleAcmeNewNonce(role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadRolesRoleAcmeNewNonceRaw({ role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRolesRoleEstCacertsRaw(requestParameters: SecretsApiPkiReadRolesRoleEstCacertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadRolesRoleEstCacerts().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadRolesRoleEstCacerts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/est/cacerts`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadRolesRoleEstCacerts(role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadRolesRoleEstCacertsRaw({ role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRolesRoleScepRaw(requestParameters: SecretsApiPkiReadRolesRoleScepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadRolesRoleScep().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadRolesRoleScep().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/scep`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadRolesRoleScep(role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadRolesRoleScepRaw({ role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadRolesRoleScepPkiclientExeRaw(requestParameters: SecretsApiPkiReadRolesRoleScepPkiclientExeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiReadRolesRoleScepPkiclientExe().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadRolesRoleScepPkiclientExe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/scep/pkiclient.exe`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadRolesRoleScepPkiclientExe(role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadRolesRoleScepPkiclientExeRaw({ role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadScepRaw(requestParameters: SecretsApiPkiReadScepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadScep().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/scep`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadScep(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadScepRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadScepConfigurationRaw(requestParameters: SecretsApiPkiReadScepConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadScepConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/scep`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadScepConfiguration(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadScepConfigurationRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadScepPkiclientExeRaw(requestParameters: SecretsApiPkiReadScepPkiclientExeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadScepPkiclientExe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/scep/pkiclient.exe`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadScepPkiclientExe(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadScepPkiclientExeRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadUnifiedCrlDeltaRaw(requestParameters: SecretsApiPkiReadUnifiedCrlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadUnifiedCrlDelta().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/unified-crl/delta`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadUnifiedCrlDelta(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadUnifiedCrlDeltaRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadUnifiedCrlDeltaPemRaw(requestParameters: SecretsApiPkiReadUnifiedCrlDeltaPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadUnifiedCrlDeltaPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/unified-crl/delta/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadUnifiedCrlDeltaPem(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadUnifiedCrlDeltaPemRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadUnifiedCrlDerRaw(requestParameters: SecretsApiPkiReadUnifiedCrlDerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadUnifiedCrlDer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/unified-crl`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadUnifiedCrlDer(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadUnifiedCrlDerRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadUnifiedCrlPemRaw(requestParameters: SecretsApiPkiReadUnifiedCrlPemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadUnifiedCrlPem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/unified-crl/pem`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiReadUnifiedCrlPem(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiReadUnifiedCrlPemRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReadUrlsConfigurationRaw(requestParameters: SecretsApiPkiReadUrlsConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReadUrlsConfigurationResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReadUrlsConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/config/urls`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReadUrlsConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReadUrlsConfiguration(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReadUrlsConfigurationResponse> {
        const response = await this.pkiReadUrlsConfigurationRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiReplaceRootRaw(requestParameters: SecretsApiPkiReplaceRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiReplaceRootResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiReplaceRoot().'
            );
        }

        if (requestParameters['PkiReplaceRootRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiReplaceRootRequest',
                'Required parameter "PkiReplaceRootRequest" was null or undefined when calling pkiReplaceRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/replace`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiReplaceRootRequestToJSON(requestParameters['PkiReplaceRootRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiReplaceRootResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiReplaceRoot(pki_mount_path: string, PkiReplaceRootRequest: PkiReplaceRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiReplaceRootResponse> {
        const response = await this.pkiReplaceRootRaw({ pki_mount_path: pki_mount_path, PkiReplaceRootRequest: PkiReplaceRootRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRevokeRaw(requestParameters: SecretsApiPkiRevokeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRevokeResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiRevoke().'
            );
        }

        if (requestParameters['PkiRevokeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiRevokeRequest',
                'Required parameter "PkiRevokeRequest" was null or undefined when calling pkiRevoke().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/revoke`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRevokeRequestToJSON(requestParameters['PkiRevokeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRevokeResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRevoke(pki_mount_path: string, PkiRevokeRequest: PkiRevokeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRevokeResponse> {
        const response = await this.pkiRevokeRaw({ pki_mount_path: pki_mount_path, PkiRevokeRequest: PkiRevokeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRevokeIssuerRaw(requestParameters: SecretsApiPkiRevokeIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRevokeIssuerResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiRevokeIssuer().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiRevokeIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/revoke`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRevokeIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRevokeIssuer(issuer_ref: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRevokeIssuerResponse> {
        const response = await this.pkiRevokeIssuerRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRevokeWithKeyRaw(requestParameters: SecretsApiPkiRevokeWithKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRevokeWithKeyResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiRevokeWithKey().'
            );
        }

        if (requestParameters['PkiRevokeWithKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiRevokeWithKeyRequest',
                'Required parameter "PkiRevokeWithKeyRequest" was null or undefined when calling pkiRevokeWithKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/revoke-with-key`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRevokeWithKeyRequestToJSON(requestParameters['PkiRevokeWithKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRevokeWithKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRevokeWithKey(pki_mount_path: string, PkiRevokeWithKeyRequest: PkiRevokeWithKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRevokeWithKeyResponse> {
        const response = await this.pkiRevokeWithKeyRaw({ pki_mount_path: pki_mount_path, PkiRevokeWithKeyRequest: PkiRevokeWithKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRootSignIntermediateRaw(requestParameters: SecretsApiPkiRootSignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRootSignIntermediateResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiRootSignIntermediate().'
            );
        }

        if (requestParameters['PkiRootSignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiRootSignIntermediateRequest',
                'Required parameter "PkiRootSignIntermediateRequest" was null or undefined when calling pkiRootSignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/sign-intermediate`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRootSignIntermediateRequestToJSON(requestParameters['PkiRootSignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRootSignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRootSignIntermediate(pki_mount_path: string, PkiRootSignIntermediateRequest: PkiRootSignIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRootSignIntermediateResponse> {
        const response = await this.pkiRootSignIntermediateRaw({ pki_mount_path: pki_mount_path, PkiRootSignIntermediateRequest: PkiRootSignIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRootSignSelfIssuedRaw(requestParameters: SecretsApiPkiRootSignSelfIssuedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRootSignSelfIssuedResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiRootSignSelfIssued().'
            );
        }

        if (requestParameters['PkiRootSignSelfIssuedRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiRootSignSelfIssuedRequest',
                'Required parameter "PkiRootSignSelfIssuedRequest" was null or undefined when calling pkiRootSignSelfIssued().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/sign-self-issued`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRootSignSelfIssuedRequestToJSON(requestParameters['PkiRootSignSelfIssuedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRootSignSelfIssuedResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRootSignSelfIssued(pki_mount_path: string, PkiRootSignSelfIssuedRequest: PkiRootSignSelfIssuedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRootSignSelfIssuedResponse> {
        const response = await this.pkiRootSignSelfIssuedRaw({ pki_mount_path: pki_mount_path, PkiRootSignSelfIssuedRequest: PkiRootSignSelfIssuedRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRotateCrlRaw(requestParameters: SecretsApiPkiRotateCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRotateCrlResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiRotateCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/rotate`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRotateCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRotateCrl(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRotateCrlResponse> {
        const response = await this.pkiRotateCrlRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRotateDeltaCrlRaw(requestParameters: SecretsApiPkiRotateDeltaCrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRotateDeltaCrlResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiRotateDeltaCrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/crl/rotate-delta`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRotateDeltaCrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRotateDeltaCrl(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRotateDeltaCrlResponse> {
        const response = await this.pkiRotateDeltaCrlRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiRotateRootRaw(requestParameters: SecretsApiPkiRotateRootOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiRotateRootResponse>> {
        if (requestParameters['exported'] == null) {
            throw new runtime.RequiredError(
                'exported',
                'Required parameter "exported" was null or undefined when calling pkiRotateRoot().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiRotateRoot().'
            );
        }

        if (requestParameters['PkiRotateRootRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiRotateRootRequest',
                'Required parameter "PkiRotateRootRequest" was null or undefined when calling pkiRotateRoot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/root/rotate/{exported}`.replace(`{${"exported"}}`, encodeURIComponent(String(requestParameters['exported']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiRotateRootRequestToJSON(requestParameters['PkiRotateRootRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiRotateRootResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiRotateRoot(exported: PkiRotateRootExportedEnum, pki_mount_path: string, PkiRotateRootRequest: PkiRotateRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiRotateRootResponse> {
        const response = await this.pkiRotateRootRaw({ exported: exported, pki_mount_path: pki_mount_path, PkiRotateRootRequest: PkiRotateRootRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiSetSignedIntermediateRaw(requestParameters: SecretsApiPkiSetSignedIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiSetSignedIntermediateResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiSetSignedIntermediate().'
            );
        }

        if (requestParameters['PkiSetSignedIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiSetSignedIntermediateRequest',
                'Required parameter "PkiSetSignedIntermediateRequest" was null or undefined when calling pkiSetSignedIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/intermediate/set-signed`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiSetSignedIntermediateRequestToJSON(requestParameters['PkiSetSignedIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiSetSignedIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiSetSignedIntermediate(pki_mount_path: string, PkiSetSignedIntermediateRequest: PkiSetSignedIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiSetSignedIntermediateResponse> {
        const response = await this.pkiSetSignedIntermediateRaw({ pki_mount_path: pki_mount_path, PkiSetSignedIntermediateRequest: PkiSetSignedIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiSignVerbatimRaw(requestParameters: SecretsApiPkiSignVerbatimOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiSignVerbatimResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiSignVerbatim().'
            );
        }

        if (requestParameters['PkiSignVerbatimRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiSignVerbatimRequest',
                'Required parameter "PkiSignVerbatimRequest" was null or undefined when calling pkiSignVerbatim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/sign-verbatim`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiSignVerbatimRequestToJSON(requestParameters['PkiSignVerbatimRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiSignVerbatimResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiSignVerbatim(pki_mount_path: string, PkiSignVerbatimRequest: PkiSignVerbatimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiSignVerbatimResponse> {
        const response = await this.pkiSignVerbatimRaw({ pki_mount_path: pki_mount_path, PkiSignVerbatimRequest: PkiSignVerbatimRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiSignVerbatimWithRoleRaw(requestParameters: SecretsApiPkiSignVerbatimWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiSignVerbatimWithRoleResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiSignVerbatimWithRole().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiSignVerbatimWithRole().'
            );
        }

        if (requestParameters['PkiSignVerbatimWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiSignVerbatimWithRoleRequest',
                'Required parameter "PkiSignVerbatimWithRoleRequest" was null or undefined when calling pkiSignVerbatimWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/sign-verbatim/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiSignVerbatimWithRoleRequestToJSON(requestParameters['PkiSignVerbatimWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiSignVerbatimWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiSignVerbatimWithRole(role: string, pki_mount_path: string, PkiSignVerbatimWithRoleRequest: PkiSignVerbatimWithRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiSignVerbatimWithRoleResponse> {
        const response = await this.pkiSignVerbatimWithRoleRaw({ role: role, pki_mount_path: pki_mount_path, PkiSignVerbatimWithRoleRequest: PkiSignVerbatimWithRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiSignWithRoleRaw(requestParameters: SecretsApiPkiSignWithRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiSignWithRoleResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiSignWithRole().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiSignWithRole().'
            );
        }

        if (requestParameters['PkiSignWithRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiSignWithRoleRequest',
                'Required parameter "PkiSignWithRoleRequest" was null or undefined when calling pkiSignWithRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/sign/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiSignWithRoleRequestToJSON(requestParameters['PkiSignWithRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiSignWithRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiSignWithRole(role: string, pki_mount_path: string, PkiSignWithRoleRequest: PkiSignWithRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiSignWithRoleResponse> {
        const response = await this.pkiSignWithRoleRaw({ role: role, pki_mount_path: pki_mount_path, PkiSignWithRoleRequest: PkiSignWithRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiTidyRaw(requestParameters: SecretsApiPkiTidyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiTidy().'
            );
        }

        if (requestParameters['PkiTidyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiTidyRequest',
                'Required parameter "PkiTidyRequest" was null or undefined when calling pkiTidy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/tidy`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiTidyRequestToJSON(requestParameters['PkiTidyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiTidy(pki_mount_path: string, PkiTidyRequest: PkiTidyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiTidyRaw({ pki_mount_path: pki_mount_path, PkiTidyRequest: PkiTidyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiTidyCancelRaw(requestParameters: SecretsApiPkiTidyCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiTidyCancelResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiTidyCancel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/tidy-cancel`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiTidyCancelResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiTidyCancel(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiTidyCancelResponse> {
        const response = await this.pkiTidyCancelRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiTidyStatusRaw(requestParameters: SecretsApiPkiTidyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiTidyStatusResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiTidyStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/tidy-status`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiTidyStatusResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiTidyStatus(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiTidyStatusResponse> {
        const response = await this.pkiTidyStatusRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteAcmeAccountKid().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteAcmeAccountKid().'
            );
        }

        if (requestParameters['PkiWriteAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteAcmeAccountKidRequest',
                'Required parameter "PkiWriteAcmeAccountKidRequest" was null or undefined when calling pkiWriteAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeAccountKidRequestToJSON(requestParameters['PkiWriteAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeAccountKid(kid: string, pki_mount_path: string, PkiWriteAcmeAccountKidRequest: PkiWriteAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeAccountKidRaw({ kid: kid, pki_mount_path: pki_mount_path, PkiWriteAcmeAccountKidRequest: PkiWriteAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['PkiWriteAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteAcmeAuthorizationAuthIdRequest',
                'Required parameter "PkiWriteAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeAuthorizationAuthIdRequestToJSON(requestParameters['PkiWriteAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeAuthorizationAuthId(auth_id: string, pki_mount_path: string, PkiWriteAcmeAuthorizationAuthIdRequest: PkiWriteAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeAuthorizationAuthIdRaw({ auth_id: auth_id, pki_mount_path: pki_mount_path, PkiWriteAcmeAuthorizationAuthIdRequest: PkiWriteAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challenge_type'] == null) {
            throw new runtime.RequiredError(
                'challenge_type',
                'Required parameter "challenge_type" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['PkiWriteAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "PkiWriteAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challenge_type']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['PkiWriteAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeChallengeAuthIdChallengeType(auth_id: string, challenge_type: string, pki_mount_path: string, PkiWriteAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeChallengeAuthIdChallengeTypeRaw({ auth_id: auth_id, challenge_type: challenge_type, pki_mount_path: pki_mount_path, PkiWriteAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeKeyIdRaw(requestParameters: SecretsApiPkiWriteAcmeKeyIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['keyid'] == null) {
            throw new runtime.RequiredError(
                'keyid',
                'Required parameter "keyid" was null or undefined when calling pkiWriteAcmeKeyId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteAcmeKeyId().'
            );
        }

        if (requestParameters['PkiWriteAcmeKeyIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteAcmeKeyIdRequest',
                'Required parameter "PkiWriteAcmeKeyIdRequest" was null or undefined when calling pkiWriteAcmeKeyId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/mgmt/account/keyid/{keyid}`.replace(`{${"keyid"}}`, encodeURIComponent(String(requestParameters['keyid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeKeyIdRequestToJSON(requestParameters['PkiWriteAcmeKeyIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeKeyId(keyid: string, pki_mount_path: string, PkiWriteAcmeKeyIdRequest: PkiWriteAcmeKeyIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeKeyIdRaw({ keyid: keyid, pki_mount_path: pki_mount_path, PkiWriteAcmeKeyIdRequest: PkiWriteAcmeKeyIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteAcmeNewAccount().'
            );
        }

        if (requestParameters['PkiWriteAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteAcmeNewAccountRequest',
                'Required parameter "PkiWriteAcmeNewAccountRequest" was null or undefined when calling pkiWriteAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/new-account`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeNewAccountRequestToJSON(requestParameters['PkiWriteAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeNewAccount(pki_mount_path: string, PkiWriteAcmeNewAccountRequest: PkiWriteAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeNewAccountRaw({ pki_mount_path: pki_mount_path, PkiWriteAcmeNewAccountRequest: PkiWriteAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteAcmeNewOrder().'
            );
        }

        if (requestParameters['PkiWriteAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteAcmeNewOrderRequest',
                'Required parameter "PkiWriteAcmeNewOrderRequest" was null or undefined when calling pkiWriteAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/new-order`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeNewOrderRequestToJSON(requestParameters['PkiWriteAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeNewOrder(pki_mount_path: string, PkiWriteAcmeNewOrderRequest: PkiWriteAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeNewOrderRaw({ pki_mount_path: pki_mount_path, PkiWriteAcmeNewOrderRequest: PkiWriteAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteAcmeOrderOrderId().'
            );
        }

        if (requestParameters['PkiWriteAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteAcmeOrderOrderIdRequest',
                'Required parameter "PkiWriteAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeOrderOrderIdRequestToJSON(requestParameters['PkiWriteAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeOrderOrderId(order_id: string, pki_mount_path: string, PkiWriteAcmeOrderOrderIdRequest: PkiWriteAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeOrderOrderIdRaw({ order_id: order_id, pki_mount_path: pki_mount_path, PkiWriteAcmeOrderOrderIdRequest: PkiWriteAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['PkiWriteAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteAcmeOrderOrderIdCertRequest',
                'Required parameter "PkiWriteAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeOrderOrderIdCertRequestToJSON(requestParameters['PkiWriteAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdCert(order_id: string, pki_mount_path: string, PkiWriteAcmeOrderOrderIdCertRequest: PkiWriteAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeOrderOrderIdCertRaw({ order_id: order_id, pki_mount_path: pki_mount_path, PkiWriteAcmeOrderOrderIdCertRequest: PkiWriteAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['PkiWriteAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "PkiWriteAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['PkiWriteAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeOrderOrderIdFinalize(order_id: string, pki_mount_path: string, PkiWriteAcmeOrderOrderIdFinalizeRequest: PkiWriteAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeOrderOrderIdFinalizeRaw({ order_id: order_id, pki_mount_path: pki_mount_path, PkiWriteAcmeOrderOrderIdFinalizeRequest: PkiWriteAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteAcmeOrders().'
            );
        }

        if (requestParameters['PkiWriteAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteAcmeOrdersRequest',
                'Required parameter "PkiWriteAcmeOrdersRequest" was null or undefined when calling pkiWriteAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/orders`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeOrdersRequestToJSON(requestParameters['PkiWriteAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeOrders(pki_mount_path: string, PkiWriteAcmeOrdersRequest: PkiWriteAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeOrdersRaw({ pki_mount_path: pki_mount_path, PkiWriteAcmeOrdersRequest: PkiWriteAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteAcmeRevokeCert().'
            );
        }

        if (requestParameters['PkiWriteAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteAcmeRevokeCertRequest',
                'Required parameter "PkiWriteAcmeRevokeCertRequest" was null or undefined when calling pkiWriteAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/acme/revoke-cert`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteAcmeRevokeCertRequestToJSON(requestParameters['PkiWriteAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteAcmeRevokeCert(pki_mount_path: string, PkiWriteAcmeRevokeCertRequest: PkiWriteAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteAcmeRevokeCertRaw({ pki_mount_path: pki_mount_path, PkiWriteAcmeRevokeCertRequest: PkiWriteAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteCmpRaw(requestParameters: SecretsApiPkiWriteCmpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteCmp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/cmp`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteCmp(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteCmpRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteEstSimpleenrollRaw(requestParameters: SecretsApiPkiWriteEstSimpleenrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteEstSimpleenroll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/est/simpleenroll`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteEstSimpleenroll(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteEstSimpleenrollRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteEstSimplereenrollRaw(requestParameters: SecretsApiPkiWriteEstSimplereenrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteEstSimplereenroll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/est/simplereenroll`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteEstSimplereenroll(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteEstSimplereenrollRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteExternalPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyAcmeAccountKidRequest',
                'Required parameter "PkiWriteExternalPolicyAcmeAccountKidRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeAccountKidRequestToJSON(requestParameters['PkiWriteExternalPolicyAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeAccountKid(kid: string, pki_mount_path: string, PkiWriteExternalPolicyAcmeAccountKidRequest: PkiWriteExternalPolicyAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeAccountKidRaw({ kid: kid, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyAcmeAccountKidRequest: PkiWriteExternalPolicyAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest',
                'Required parameter "PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequestToJSON(requestParameters['PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeAuthorizationAuthId(auth_id: string, pki_mount_path: string, PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest: PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeAuthorizationAuthIdRaw({ auth_id: auth_id, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest: PkiWriteExternalPolicyAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challenge_type'] == null) {
            throw new runtime.RequiredError(
                'challenge_type',
                'Required parameter "challenge_type" was null or undefined when calling pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challenge_type']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeType(auth_id: string, challenge_type: string, pki_mount_path: string, PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRaw({ auth_id: auth_id, challenge_type: challenge_type, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyAcmeNewAccountRequest',
                'Required parameter "PkiWriteExternalPolicyAcmeNewAccountRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/new-account`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeNewAccountRequestToJSON(requestParameters['PkiWriteExternalPolicyAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeNewAccount(pki_mount_path: string, PkiWriteExternalPolicyAcmeNewAccountRequest: PkiWriteExternalPolicyAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeNewAccountRaw({ pki_mount_path: pki_mount_path, PkiWriteExternalPolicyAcmeNewAccountRequest: PkiWriteExternalPolicyAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyAcmeNewOrderRequest',
                'Required parameter "PkiWriteExternalPolicyAcmeNewOrderRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/new-order`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeNewOrderRequestToJSON(requestParameters['PkiWriteExternalPolicyAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeNewOrder(pki_mount_path: string, PkiWriteExternalPolicyAcmeNewOrderRequest: PkiWriteExternalPolicyAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeNewOrderRaw({ pki_mount_path: pki_mount_path, PkiWriteExternalPolicyAcmeNewOrderRequest: PkiWriteExternalPolicyAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyAcmeOrderOrderIdRequest',
                'Required parameter "PkiWriteExternalPolicyAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeOrderOrderIdRequestToJSON(requestParameters['PkiWriteExternalPolicyAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrderOrderId(order_id: string, pki_mount_path: string, PkiWriteExternalPolicyAcmeOrderOrderIdRequest: PkiWriteExternalPolicyAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeOrderOrderIdRaw({ order_id: order_id, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyAcmeOrderOrderIdRequest: PkiWriteExternalPolicyAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest',
                'Required parameter "PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeOrderOrderIdCertRequestToJSON(requestParameters['PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrderOrderIdCert(order_id: string, pki_mount_path: string, PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest: PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeOrderOrderIdCertRaw({ order_id: order_id, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest: PkiWriteExternalPolicyAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrderOrderIdFinalize(order_id: string, pki_mount_path: string, PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRaw({ order_id: order_id, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteExternalPolicyAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyAcmeOrders().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyAcmeOrdersRequest',
                'Required parameter "PkiWriteExternalPolicyAcmeOrdersRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/orders`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeOrdersRequestToJSON(requestParameters['PkiWriteExternalPolicyAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeOrders(pki_mount_path: string, PkiWriteExternalPolicyAcmeOrdersRequest: PkiWriteExternalPolicyAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeOrdersRaw({ pki_mount_path: pki_mount_path, PkiWriteExternalPolicyAcmeOrdersRequest: PkiWriteExternalPolicyAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteExternalPolicyAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyAcmeRevokeCertRequest',
                'Required parameter "PkiWriteExternalPolicyAcmeRevokeCertRequest" was null or undefined when calling pkiWriteExternalPolicyAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/acme/revoke-cert`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyAcmeRevokeCertRequestToJSON(requestParameters['PkiWriteExternalPolicyAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyAcmeRevokeCert(pki_mount_path: string, PkiWriteExternalPolicyAcmeRevokeCertRequest: PkiWriteExternalPolicyAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyAcmeRevokeCertRaw({ pki_mount_path: pki_mount_path, PkiWriteExternalPolicyAcmeRevokeCertRequest: PkiWriteExternalPolicyAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyIssueRaw(requestParameters: SecretsApiPkiWriteExternalPolicyIssueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteExternalPolicyIssueResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyIssue().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyIssueRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyIssueRequest',
                'Required parameter "PkiWriteExternalPolicyIssueRequest" was null or undefined when calling pkiWriteExternalPolicyIssue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/issue`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyIssueRequestToJSON(requestParameters['PkiWriteExternalPolicyIssueRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteExternalPolicyIssueResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteExternalPolicyIssue(pki_mount_path: string, PkiWriteExternalPolicyIssueRequest: PkiWriteExternalPolicyIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteExternalPolicyIssueResponse> {
        const response = await this.pkiWriteExternalPolicyIssueRaw({ pki_mount_path: pki_mount_path, PkiWriteExternalPolicyIssueRequest: PkiWriteExternalPolicyIssueRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyIssuePolicyRaw(requestParameters: SecretsApiPkiWriteExternalPolicyIssuePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteExternalPolicyIssuePolicyResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyIssuePolicy().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyIssuePolicy().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyIssuePolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyIssuePolicyRequest',
                'Required parameter "PkiWriteExternalPolicyIssuePolicyRequest" was null or undefined when calling pkiWriteExternalPolicyIssuePolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/issue/{policy}`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyIssuePolicyRequestToJSON(requestParameters['PkiWriteExternalPolicyIssuePolicyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteExternalPolicyIssuePolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteExternalPolicyIssuePolicy(policy: string, pki_mount_path: string, PkiWriteExternalPolicyIssuePolicyRequest: PkiWriteExternalPolicyIssuePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteExternalPolicyIssuePolicyResponse> {
        const response = await this.pkiWriteExternalPolicyIssuePolicyRaw({ policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyIssuePolicyRequest: PkiWriteExternalPolicyIssuePolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyPolicyAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyPolicyAcmeAccountKidRequest',
                'Required parameter "PkiWriteExternalPolicyPolicyAcmeAccountKidRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeAccountKidRequestToJSON(requestParameters['PkiWriteExternalPolicyPolicyAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeAccountKid(kid: string, policy: string, pki_mount_path: string, PkiWriteExternalPolicyPolicyAcmeAccountKidRequest: PkiWriteExternalPolicyPolicyAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeAccountKidRaw({ kid: kid, policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyPolicyAcmeAccountKidRequest: PkiWriteExternalPolicyPolicyAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest',
                'Required parameter "PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequestToJSON(requestParameters['PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthId(auth_id: string, policy: string, pki_mount_path: string, PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRaw({ auth_id: auth_id, policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: PkiWriteExternalPolicyPolicyAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challenge_type'] == null) {
            throw new runtime.RequiredError(
                'challenge_type',
                'Required parameter "challenge_type" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challenge_type']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeType(auth_id: string, challenge_type: string, policy: string, pki_mount_path: string, PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRaw({ auth_id: auth_id, challenge_type: challenge_type, policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyPolicyAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyPolicyAcmeNewAccountRequest',
                'Required parameter "PkiWriteExternalPolicyPolicyAcmeNewAccountRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/new-account`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeNewAccountRequestToJSON(requestParameters['PkiWriteExternalPolicyPolicyAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeNewAccount(policy: string, pki_mount_path: string, PkiWriteExternalPolicyPolicyAcmeNewAccountRequest: PkiWriteExternalPolicyPolicyAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeNewAccountRaw({ policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyPolicyAcmeNewAccountRequest: PkiWriteExternalPolicyPolicyAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyPolicyAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyPolicyAcmeNewOrderRequest',
                'Required parameter "PkiWriteExternalPolicyPolicyAcmeNewOrderRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/new-order`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeNewOrderRequestToJSON(requestParameters['PkiWriteExternalPolicyPolicyAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeNewOrder(policy: string, pki_mount_path: string, PkiWriteExternalPolicyPolicyAcmeNewOrderRequest: PkiWriteExternalPolicyPolicyAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeNewOrderRaw({ policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyPolicyAcmeNewOrderRequest: PkiWriteExternalPolicyPolicyAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest',
                'Required parameter "PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequestToJSON(requestParameters['PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrderOrderId(order_id: string, policy: string, pki_mount_path: string, PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeOrderOrderIdRaw({ order_id: order_id, policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest',
                'Required parameter "PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequestToJSON(requestParameters['PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCert(order_id: string, policy: string, pki_mount_path: string, PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRaw({ order_id: order_id, policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalize(order_id: string, policy: string, pki_mount_path: string, PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRaw({ order_id: order_id, policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrders().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrders().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyPolicyAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyPolicyAcmeOrdersRequest',
                'Required parameter "PkiWriteExternalPolicyPolicyAcmeOrdersRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/orders`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeOrdersRequestToJSON(requestParameters['PkiWriteExternalPolicyPolicyAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeOrders(policy: string, pki_mount_path: string, PkiWriteExternalPolicyPolicyAcmeOrdersRequest: PkiWriteExternalPolicyPolicyAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeOrdersRaw({ policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyPolicyAcmeOrdersRequest: PkiWriteExternalPolicyPolicyAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteExternalPolicyPolicyAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest',
                'Required parameter "PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest" was null or undefined when calling pkiWriteExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/{policy}/acme/revoke-cert`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicyPolicyAcmeRevokeCertRequestToJSON(requestParameters['PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteExternalPolicyPolicyAcmeRevokeCert(policy: string, pki_mount_path: string, PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest: PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteExternalPolicyPolicyAcmeRevokeCertRaw({ policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest: PkiWriteExternalPolicyPolicyAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicySignRaw(requestParameters: SecretsApiPkiWriteExternalPolicySignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteExternalPolicySignResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicySign().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicySignRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicySignRequest',
                'Required parameter "PkiWriteExternalPolicySignRequest" was null or undefined when calling pkiWriteExternalPolicySign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/sign`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicySignRequestToJSON(requestParameters['PkiWriteExternalPolicySignRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteExternalPolicySignResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteExternalPolicySign(pki_mount_path: string, PkiWriteExternalPolicySignRequest: PkiWriteExternalPolicySignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteExternalPolicySignResponse> {
        const response = await this.pkiWriteExternalPolicySignRaw({ pki_mount_path: pki_mount_path, PkiWriteExternalPolicySignRequest: PkiWriteExternalPolicySignRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicySignIntermediateRaw(requestParameters: SecretsApiPkiWriteExternalPolicySignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteExternalPolicySignIntermediateResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicySignIntermediate().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicySignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicySignIntermediateRequest',
                'Required parameter "PkiWriteExternalPolicySignIntermediateRequest" was null or undefined when calling pkiWriteExternalPolicySignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/sign-intermediate`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicySignIntermediateRequestToJSON(requestParameters['PkiWriteExternalPolicySignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteExternalPolicySignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteExternalPolicySignIntermediate(pki_mount_path: string, PkiWriteExternalPolicySignIntermediateRequest: PkiWriteExternalPolicySignIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteExternalPolicySignIntermediateResponse> {
        const response = await this.pkiWriteExternalPolicySignIntermediateRaw({ pki_mount_path: pki_mount_path, PkiWriteExternalPolicySignIntermediateRequest: PkiWriteExternalPolicySignIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicySignIntermediatePolicyRaw(requestParameters: SecretsApiPkiWriteExternalPolicySignIntermediatePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteExternalPolicySignIntermediatePolicyResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicySignIntermediatePolicy().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicySignIntermediatePolicy().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicySignIntermediatePolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicySignIntermediatePolicyRequest',
                'Required parameter "PkiWriteExternalPolicySignIntermediatePolicyRequest" was null or undefined when calling pkiWriteExternalPolicySignIntermediatePolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/sign-intermediate/{policy}`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicySignIntermediatePolicyRequestToJSON(requestParameters['PkiWriteExternalPolicySignIntermediatePolicyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteExternalPolicySignIntermediatePolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteExternalPolicySignIntermediatePolicy(policy: string, pki_mount_path: string, PkiWriteExternalPolicySignIntermediatePolicyRequest: PkiWriteExternalPolicySignIntermediatePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteExternalPolicySignIntermediatePolicyResponse> {
        const response = await this.pkiWriteExternalPolicySignIntermediatePolicyRaw({ policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicySignIntermediatePolicyRequest: PkiWriteExternalPolicySignIntermediatePolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteExternalPolicySignPolicyRaw(requestParameters: SecretsApiPkiWriteExternalPolicySignPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteExternalPolicySignPolicyResponse>> {
        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteExternalPolicySignPolicy().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteExternalPolicySignPolicy().'
            );
        }

        if (requestParameters['PkiWriteExternalPolicySignPolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteExternalPolicySignPolicyRequest',
                'Required parameter "PkiWriteExternalPolicySignPolicyRequest" was null or undefined when calling pkiWriteExternalPolicySignPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/external-policy/sign/{policy}`.replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteExternalPolicySignPolicyRequestToJSON(requestParameters['PkiWriteExternalPolicySignPolicyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteExternalPolicySignPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteExternalPolicySignPolicy(policy: string, pki_mount_path: string, PkiWriteExternalPolicySignPolicyRequest: PkiWriteExternalPolicySignPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteExternalPolicySignPolicyResponse> {
        const response = await this.pkiWriteExternalPolicySignPolicyRaw({ policy: policy, pki_mount_path: pki_mount_path, PkiWriteExternalPolicySignPolicyRequest: PkiWriteExternalPolicySignPolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerRaw(requestParameters: SecretsApiPkiWriteIssuerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuer().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuer().'
            );
        }

        if (requestParameters['PkiWriteIssuerRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerRequest',
                'Required parameter "PkiWriteIssuerRequest" was null or undefined when calling pkiWriteIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerRequestToJSON(requestParameters['PkiWriteIssuerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuer(issuer_ref: string, pki_mount_path: string, PkiWriteIssuerRequest: PkiWriteIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerResponse> {
        const response = await this.pkiWriteIssuerRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerRequest: PkiWriteIssuerRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().'
            );
        }

        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefAcmeAccountKidRequest',
                'Required parameter "PkiWriteIssuerIssuerRefAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeAccountKidRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeAccountKid(issuer_ref: string, kid: string, pki_mount_path: string, PkiWriteIssuerIssuerRefAcmeAccountKidRequest: PkiWriteIssuerIssuerRefAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeAccountKidRaw({ issuer_ref: issuer_ref, kid: kid, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefAcmeAccountKidRequest: PkiWriteIssuerIssuerRefAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest',
                'Required parameter "PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeAuthorizationAuthId(auth_id: string, issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRaw({ auth_id: auth_id, issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challenge_type'] == null) {
            throw new runtime.RequiredError(
                'challenge_type',
                'Required parameter "challenge_type" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challenge_type']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeType(auth_id: string, challenge_type: string, issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRaw({ auth_id: auth_id, challenge_type: challenge_type, issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewAccount().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewAccount().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefAcmeNewAccountRequest',
                'Required parameter "PkiWriteIssuerIssuerRefAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeNewAccountRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeNewAccount(issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefAcmeNewAccountRequest: PkiWriteIssuerIssuerRefAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeNewAccountRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefAcmeNewAccountRequest: PkiWriteIssuerIssuerRefAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewOrder().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewOrder().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefAcmeNewOrderRequest',
                'Required parameter "PkiWriteIssuerIssuerRefAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeNewOrderRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeNewOrder(issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefAcmeNewOrderRequest: PkiWriteIssuerIssuerRefAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeNewOrderRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefAcmeNewOrderRequest: PkiWriteIssuerIssuerRefAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().'
            );
        }

        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest',
                'Required parameter "PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderId(issuer_ref: string, order_id: string, pki_mount_path: string, PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeOrderOrderIdRaw({ issuer_ref: issuer_ref, order_id: order_id, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest',
                'Required parameter "PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdCert(issuer_ref: string, order_id: string, pki_mount_path: string, PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRaw({ issuer_ref: issuer_ref, order_id: order_id, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalize(issuer_ref: string, order_id: string, pki_mount_path: string, PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRaw({ issuer_ref: issuer_ref, order_id: order_id, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrders().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrders().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefAcmeOrdersRequest',
                'Required parameter "PkiWriteIssuerIssuerRefAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeOrdersRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeOrders(issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefAcmeOrdersRequest: PkiWriteIssuerIssuerRefAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeOrdersRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefAcmeOrdersRequest: PkiWriteIssuerIssuerRefAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeRevokeCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeRevokeCert().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefAcmeRevokeCertRequest',
                'Required parameter "PkiWriteIssuerIssuerRefAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefAcmeRevokeCertRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefAcmeRevokeCert(issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefAcmeRevokeCertRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKid(issuer_ref: string, kid: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRaw({ issuer_ref: issuer_ref, kid: kid, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthId(auth_id: string, issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRaw({ auth_id: auth_id, issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challenge_type'] == null) {
            throw new runtime.RequiredError(
                'challenge_type',
                'Required parameter "challenge_type" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challenge_type']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeType(auth_id: string, challenge_type: string, issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRaw({ auth_id: auth_id, challenge_type: challenge_type, issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccount(issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrder(issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderId(issuer_ref: string, order_id: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRaw({ issuer_ref: issuer_ref, order_id: order_id, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCert(issuer_ref: string, order_id: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRaw({ issuer_ref: issuer_ref, order_id: order_id, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalize(issuer_ref: string, order_id: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRaw({ issuer_ref: issuer_ref, order_id: order_id, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrders().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrders().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeOrders(issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCert(issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefExternalPolicyAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyIssueRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyIssueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerIssuerRefExternalPolicyIssueResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssue().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssue().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyIssueRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyIssueRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyIssueRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/issue`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyIssueRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyIssueRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerIssuerRefExternalPolicyIssueResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyIssue(issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyIssueRequest: PkiWriteIssuerIssuerRefExternalPolicyIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerIssuerRefExternalPolicyIssueResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyIssueRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyIssueRequest: PkiWriteIssuerIssuerRefExternalPolicyIssueRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyIssuePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/issue/{policy}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyIssuePolicy(issuer_ref: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest: PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRaw({ issuer_ref: issuer_ref, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest: PkiWriteIssuerIssuerRefExternalPolicyIssuePolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKid(issuer_ref: string, kid: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRaw({ issuer_ref: issuer_ref, kid: kid, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthId(auth_id: string, issuer_ref: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRaw({ auth_id: auth_id, issuer_ref: issuer_ref, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challenge_type'] == null) {
            throw new runtime.RequiredError(
                'challenge_type',
                'Required parameter "challenge_type" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challenge_type']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeType(auth_id: string, challenge_type: string, issuer_ref: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRaw({ auth_id: auth_id, challenge_type: challenge_type, issuer_ref: issuer_ref, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccount(issuer_ref: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRaw({ issuer_ref: issuer_ref, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrder(issuer_ref: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRaw({ issuer_ref: issuer_ref, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderId(issuer_ref: string, order_id: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRaw({ issuer_ref: issuer_ref, order_id: order_id, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCert(issuer_ref: string, order_id: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRaw({ issuer_ref: issuer_ref, order_id: order_id, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalize(issuer_ref: string, order_id: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRaw({ issuer_ref: issuer_ref, order_id: order_id, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrders(issuer_ref: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRaw({ issuer_ref: issuer_ref, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/{policy}/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCert(issuer_ref: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRaw({ issuer_ref: issuer_ref, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefExternalPolicyPolicyAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerIssuerRefExternalPolicySignResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySign().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySign().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicySignRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicySignRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicySignRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/sign`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicySignRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicySignRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerIssuerRefExternalPolicySignResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySign(issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicySignRequest: PkiWriteIssuerIssuerRefExternalPolicySignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerIssuerRefExternalPolicySignResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicySignRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicySignRequest: PkiWriteIssuerIssuerRefExternalPolicySignRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignIntermediateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediate().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediate().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/sign-intermediate`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignIntermediate(issuer_ref: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest: PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerIssuerRefExternalPolicySignIntermediateResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicySignIntermediateRaw({ issuer_ref: issuer_ref, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest: PkiWriteIssuerIssuerRefExternalPolicySignIntermediateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/sign-intermediate/{policy}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicy(issuer_ref: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest: PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRaw({ issuer_ref: issuer_ref, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest: PkiWriteIssuerIssuerRefExternalPolicySignIntermediatePolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignPolicyRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefExternalPolicySignPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignPolicy().'
            );
        }

        if (requestParameters['policy'] == null) {
            throw new runtime.RequiredError(
                'policy',
                'Required parameter "policy" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignPolicy().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignPolicy().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest',
                'Required parameter "PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest" was null or undefined when calling pkiWriteIssuerIssuerRefExternalPolicySignPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/external-policy/sign/{policy}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"policy"}}`, encodeURIComponent(String(requestParameters['policy']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteIssuerIssuerRefExternalPolicySignPolicy(issuer_ref: string, policy: string, pki_mount_path: string, PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest: PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteIssuerIssuerRefExternalPolicySignPolicyResponse> {
        const response = await this.pkiWriteIssuerIssuerRefExternalPolicySignPolicyRaw({ issuer_ref: issuer_ref, policy: policy, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest: PkiWriteIssuerIssuerRefExternalPolicySignPolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest',
                'Required parameter "PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/account/{kid}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKid(issuer_ref: string, kid: string, role: string, pki_mount_path: string, PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRaw({ issuer_ref: issuer_ref, kid: kid, role: role, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest',
                'Required parameter "PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthId(auth_id: string, issuer_ref: string, role: string, pki_mount_path: string, PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRaw({ auth_id: auth_id, issuer_ref: issuer_ref, role: role, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challenge_type'] == null) {
            throw new runtime.RequiredError(
                'challenge_type',
                'Required parameter "challenge_type" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challenge_type']))).replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeType(auth_id: string, challenge_type: string, issuer_ref: string, role: string, pki_mount_path: string, PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRaw({ auth_id: auth_id, challenge_type: challenge_type, issuer_ref: issuer_ref, role: role, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest',
                'Required parameter "PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-account`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccount(issuer_ref: string, role: string, pki_mount_path: string, PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRaw({ issuer_ref: issuer_ref, role: role, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest',
                'Required parameter "PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/new-order`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrder(issuer_ref: string, role: string, pki_mount_path: string, PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRaw({ issuer_ref: issuer_ref, role: role, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest',
                'Required parameter "PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/order/{order_id}`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderId(issuer_ref: string, order_id: string, role: string, pki_mount_path: string, PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRaw({ issuer_ref: issuer_ref, order_id: order_id, role: role, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest',
                'Required parameter "PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/order/{order_id}/cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCert(issuer_ref: string, order_id: string, role: string, pki_mount_path: string, PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRaw({ issuer_ref: issuer_ref, order_id: order_id, role: role, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/order/{order_id}/finalize`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalize(issuer_ref: string, order_id: string, role: string, pki_mount_path: string, PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRaw({ issuer_ref: issuer_ref, order_id: order_id, role: role, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest',
                'Required parameter "PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/orders`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeOrders(issuer_ref: string, role: string, pki_mount_path: string, PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRaw({ issuer_ref: issuer_ref, role: role, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['issuer_ref'] == null) {
            throw new runtime.RequiredError(
                'issuer_ref',
                'Required parameter "issuer_ref" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest',
                'Required parameter "PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest" was null or undefined when calling pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/issuer/{issuer_ref}/roles/{role}/acme/revoke-cert`.replace(`{${"issuer_ref"}}`, encodeURIComponent(String(requestParameters['issuer_ref']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequestToJSON(requestParameters['PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCert(issuer_ref: string, role: string, pki_mount_path: string, PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRaw({ issuer_ref: issuer_ref, role: role, pki_mount_path: pki_mount_path, PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest: PkiWriteIssuerIssuerRefRolesRoleAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteKeyRaw(requestParameters: SecretsApiPkiWriteKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteKeyResponse>> {
        if (requestParameters['key_ref'] == null) {
            throw new runtime.RequiredError(
                'key_ref',
                'Required parameter "key_ref" was null or undefined when calling pkiWriteKey().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteKey().'
            );
        }

        if (requestParameters['PkiWriteKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteKeyRequest',
                'Required parameter "PkiWriteKeyRequest" was null or undefined when calling pkiWriteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/key/{key_ref}`.replace(`{${"key_ref"}}`, encodeURIComponent(String(requestParameters['key_ref']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteKeyRequestToJSON(requestParameters['PkiWriteKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteKey(key_ref: string, pki_mount_path: string, PkiWriteKeyRequest: PkiWriteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteKeyResponse> {
        const response = await this.pkiWriteKeyRaw({ key_ref: key_ref, pki_mount_path: pki_mount_path, PkiWriteKeyRequest: PkiWriteKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRoleRaw(requestParameters: SecretsApiPkiWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PkiWriteRoleResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pkiWriteRole().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRole().'
            );
        }

        if (requestParameters['PkiWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteRoleRequest',
                'Required parameter "PkiWriteRoleRequest" was null or undefined when calling pkiWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRoleRequestToJSON(requestParameters['PkiWriteRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PkiWriteRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async pkiWriteRole(name: string, pki_mount_path: string, PkiWriteRoleRequest: PkiWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PkiWriteRoleResponse> {
        const response = await this.pkiWriteRoleRaw({ name: name, pki_mount_path: pki_mount_path, PkiWriteRoleRequest: PkiWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeAccountKidRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeAccountKidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['kid'] == null) {
            throw new runtime.RequiredError(
                'kid',
                'Required parameter "kid" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().'
            );
        }

        if (requestParameters['PkiWriteRolesRoleAcmeAccountKidRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteRolesRoleAcmeAccountKidRequest',
                'Required parameter "PkiWriteRolesRoleAcmeAccountKidRequest" was null or undefined when calling pkiWriteRolesRoleAcmeAccountKid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/account/{kid}`.replace(`{${"kid"}}`, encodeURIComponent(String(requestParameters['kid']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeAccountKidRequestToJSON(requestParameters['PkiWriteRolesRoleAcmeAccountKidRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeAccountKid(kid: string, role: string, pki_mount_path: string, PkiWriteRolesRoleAcmeAccountKidRequest: PkiWriteRolesRoleAcmeAccountKidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeAccountKidRaw({ kid: kid, role: role, pki_mount_path: pki_mount_path, PkiWriteRolesRoleAcmeAccountKidRequest: PkiWriteRolesRoleAcmeAccountKidRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeAuthorizationAuthIdRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeAuthorizationAuthIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        if (requestParameters['PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest',
                'Required parameter "PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest" was null or undefined when calling pkiWriteRolesRoleAcmeAuthorizationAuthId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/authorization/{auth_id}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeAuthorizationAuthIdRequestToJSON(requestParameters['PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeAuthorizationAuthId(auth_id: string, role: string, pki_mount_path: string, PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest: PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeAuthorizationAuthIdRaw({ auth_id: auth_id, role: role, pki_mount_path: pki_mount_path, PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest: PkiWriteRolesRoleAcmeAuthorizationAuthIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['auth_id'] == null) {
            throw new runtime.RequiredError(
                'auth_id',
                'Required parameter "auth_id" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['challenge_type'] == null) {
            throw new runtime.RequiredError(
                'challenge_type',
                'Required parameter "challenge_type" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        if (requestParameters['PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest',
                'Required parameter "PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest" was null or undefined when calling pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/challenge/{auth_id}/{challenge_type}`.replace(`{${"auth_id"}}`, encodeURIComponent(String(requestParameters['auth_id']))).replace(`{${"challenge_type"}}`, encodeURIComponent(String(requestParameters['challenge_type']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequestToJSON(requestParameters['PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeChallengeAuthIdChallengeType(auth_id: string, challenge_type: string, role: string, pki_mount_path: string, PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRaw({ auth_id: auth_id, challenge_type: challenge_type, role: role, pki_mount_path: pki_mount_path, PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest: PkiWriteRolesRoleAcmeChallengeAuthIdChallengeTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeNewAccountRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeNewAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleAcmeNewAccount().'
            );
        }

        if (requestParameters['PkiWriteRolesRoleAcmeNewAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteRolesRoleAcmeNewAccountRequest',
                'Required parameter "PkiWriteRolesRoleAcmeNewAccountRequest" was null or undefined when calling pkiWriteRolesRoleAcmeNewAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/new-account`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeNewAccountRequestToJSON(requestParameters['PkiWriteRolesRoleAcmeNewAccountRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeNewAccount(role: string, pki_mount_path: string, PkiWriteRolesRoleAcmeNewAccountRequest: PkiWriteRolesRoleAcmeNewAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeNewAccountRaw({ role: role, pki_mount_path: pki_mount_path, PkiWriteRolesRoleAcmeNewAccountRequest: PkiWriteRolesRoleAcmeNewAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeNewOrderRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeNewOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleAcmeNewOrder().'
            );
        }

        if (requestParameters['PkiWriteRolesRoleAcmeNewOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteRolesRoleAcmeNewOrderRequest',
                'Required parameter "PkiWriteRolesRoleAcmeNewOrderRequest" was null or undefined when calling pkiWriteRolesRoleAcmeNewOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/new-order`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeNewOrderRequestToJSON(requestParameters['PkiWriteRolesRoleAcmeNewOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeNewOrder(role: string, pki_mount_path: string, PkiWriteRolesRoleAcmeNewOrderRequest: PkiWriteRolesRoleAcmeNewOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeNewOrderRaw({ role: role, pki_mount_path: pki_mount_path, PkiWriteRolesRoleAcmeNewOrderRequest: PkiWriteRolesRoleAcmeNewOrderRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeOrderOrderIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().'
            );
        }

        if (requestParameters['PkiWriteRolesRoleAcmeOrderOrderIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteRolesRoleAcmeOrderOrderIdRequest',
                'Required parameter "PkiWriteRolesRoleAcmeOrderOrderIdRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/order/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeOrderOrderIdRequestToJSON(requestParameters['PkiWriteRolesRoleAcmeOrderOrderIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderId(order_id: string, role: string, pki_mount_path: string, PkiWriteRolesRoleAcmeOrderOrderIdRequest: PkiWriteRolesRoleAcmeOrderOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeOrderOrderIdRaw({ order_id: order_id, role: role, pki_mount_path: pki_mount_path, PkiWriteRolesRoleAcmeOrderOrderIdRequest: PkiWriteRolesRoleAcmeOrderOrderIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdCertRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeOrderOrderIdCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        if (requestParameters['PkiWriteRolesRoleAcmeOrderOrderIdCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteRolesRoleAcmeOrderOrderIdCertRequest',
                'Required parameter "PkiWriteRolesRoleAcmeOrderOrderIdCertRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/order/{order_id}/cert`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeOrderOrderIdCertRequestToJSON(requestParameters['PkiWriteRolesRoleAcmeOrderOrderIdCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdCert(order_id: string, role: string, pki_mount_path: string, PkiWriteRolesRoleAcmeOrderOrderIdCertRequest: PkiWriteRolesRoleAcmeOrderOrderIdCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeOrderOrderIdCertRaw({ order_id: order_id, role: role, pki_mount_path: pki_mount_path, PkiWriteRolesRoleAcmeOrderOrderIdCertRequest: PkiWriteRolesRoleAcmeOrderOrderIdCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeOrderOrderIdFinalizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['order_id'] == null) {
            throw new runtime.RequiredError(
                'order_id',
                'Required parameter "order_id" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        if (requestParameters['PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest',
                'Required parameter "PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrderOrderIdFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/order/{order_id}/finalize`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['order_id']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequestToJSON(requestParameters['PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrderOrderIdFinalize(order_id: string, role: string, pki_mount_path: string, PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest: PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeOrderOrderIdFinalizeRaw({ order_id: order_id, role: role, pki_mount_path: pki_mount_path, PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest: PkiWriteRolesRoleAcmeOrderOrderIdFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrdersRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleAcmeOrders().'
            );
        }

        if (requestParameters['PkiWriteRolesRoleAcmeOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteRolesRoleAcmeOrdersRequest',
                'Required parameter "PkiWriteRolesRoleAcmeOrdersRequest" was null or undefined when calling pkiWriteRolesRoleAcmeOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/orders`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeOrdersRequestToJSON(requestParameters['PkiWriteRolesRoleAcmeOrdersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeOrders(role: string, pki_mount_path: string, PkiWriteRolesRoleAcmeOrdersRequest: PkiWriteRolesRoleAcmeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeOrdersRaw({ role: role, pki_mount_path: pki_mount_path, PkiWriteRolesRoleAcmeOrdersRequest: PkiWriteRolesRoleAcmeOrdersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleAcmeRevokeCertRaw(requestParameters: SecretsApiPkiWriteRolesRoleAcmeRevokeCertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleAcmeRevokeCert().'
            );
        }

        if (requestParameters['PkiWriteRolesRoleAcmeRevokeCertRequest'] == null) {
            throw new runtime.RequiredError(
                'PkiWriteRolesRoleAcmeRevokeCertRequest',
                'Required parameter "PkiWriteRolesRoleAcmeRevokeCertRequest" was null or undefined when calling pkiWriteRolesRoleAcmeRevokeCert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/acme/revoke-cert`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PkiWriteRolesRoleAcmeRevokeCertRequestToJSON(requestParameters['PkiWriteRolesRoleAcmeRevokeCertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleAcmeRevokeCert(role: string, pki_mount_path: string, PkiWriteRolesRoleAcmeRevokeCertRequest: PkiWriteRolesRoleAcmeRevokeCertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleAcmeRevokeCertRaw({ role: role, pki_mount_path: pki_mount_path, PkiWriteRolesRoleAcmeRevokeCertRequest: PkiWriteRolesRoleAcmeRevokeCertRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleCmpRaw(requestParameters: SecretsApiPkiWriteRolesRoleCmpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleCmp().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleCmp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/cmp`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleCmp(role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleCmpRaw({ role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleEstSimpleenrollRaw(requestParameters: SecretsApiPkiWriteRolesRoleEstSimpleenrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleEstSimpleenroll().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleEstSimpleenroll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/est/simpleenroll`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleEstSimpleenroll(role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleEstSimpleenrollRaw({ role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleEstSimplereenrollRaw(requestParameters: SecretsApiPkiWriteRolesRoleEstSimplereenrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleEstSimplereenroll().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleEstSimplereenroll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/est/simplereenroll`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleEstSimplereenroll(role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleEstSimplereenrollRaw({ role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleScepRaw(requestParameters: SecretsApiPkiWriteRolesRoleScepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleScep().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleScep().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/scep`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleScep(role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleScepRaw({ role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteRolesRoleScepPkiclientExeRaw(requestParameters: SecretsApiPkiWriteRolesRoleScepPkiclientExeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling pkiWriteRolesRoleScepPkiclientExe().'
            );
        }

        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteRolesRoleScepPkiclientExe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/roles/{role}/scep/pkiclient.exe`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteRolesRoleScepPkiclientExe(role: string, pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteRolesRoleScepPkiclientExeRaw({ role: role, pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteScepRaw(requestParameters: SecretsApiPkiWriteScepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteScep().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/scep`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteScep(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteScepRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pkiWriteScepPkiclientExeRaw(requestParameters: SecretsApiPkiWriteScepPkiclientExeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['pki_mount_path'] == null) {
            throw new runtime.RequiredError(
                'pki_mount_path',
                'Required parameter "pki_mount_path" was null or undefined when calling pkiWriteScepPkiclientExe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{pki_mount_path}/scep/pkiclient.exe`.replace(`{${"pki_mount_path"}}`, encodeURIComponent(String(requestParameters['pki_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pkiWriteScepPkiclientExe(pki_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pkiWriteScepPkiclientExeRaw({ pki_mount_path: pki_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API.
     */
    async rabbitMqConfigureConnectionRaw(requestParameters: SecretsApiRabbitMqConfigureConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['rabbitmq_mount_path'] == null) {
            throw new runtime.RequiredError(
                'rabbitmq_mount_path',
                'Required parameter "rabbitmq_mount_path" was null or undefined when calling rabbitMqConfigureConnection().'
            );
        }

        if (requestParameters['RabbitMqConfigureConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'RabbitMqConfigureConnectionRequest',
                'Required parameter "RabbitMqConfigureConnectionRequest" was null or undefined when calling rabbitMqConfigureConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/config/connection`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmq_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RabbitMqConfigureConnectionRequestToJSON(requestParameters['RabbitMqConfigureConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API.
     */
    async rabbitMqConfigureConnection(rabbitmq_mount_path: string, RabbitMqConfigureConnectionRequest: RabbitMqConfigureConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqConfigureConnectionRaw({ rabbitmq_mount_path: rabbitmq_mount_path, RabbitMqConfigureConnectionRequest: RabbitMqConfigureConnectionRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async rabbitMqConfigureLeaseRaw(requestParameters: SecretsApiRabbitMqConfigureLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['rabbitmq_mount_path'] == null) {
            throw new runtime.RequiredError(
                'rabbitmq_mount_path',
                'Required parameter "rabbitmq_mount_path" was null or undefined when calling rabbitMqConfigureLease().'
            );
        }

        if (requestParameters['RabbitMqConfigureLeaseRequest'] == null) {
            throw new runtime.RequiredError(
                'RabbitMqConfigureLeaseRequest',
                'Required parameter "RabbitMqConfigureLeaseRequest" was null or undefined when calling rabbitMqConfigureLease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/config/lease`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmq_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RabbitMqConfigureLeaseRequestToJSON(requestParameters['RabbitMqConfigureLeaseRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rabbitMqConfigureLease(rabbitmq_mount_path: string, RabbitMqConfigureLeaseRequest: RabbitMqConfigureLeaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqConfigureLeaseRaw({ rabbitmq_mount_path: rabbitmq_mount_path, RabbitMqConfigureLeaseRequest: RabbitMqConfigureLeaseRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqDeleteRoleRaw(requestParameters: SecretsApiRabbitMqDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rabbitMqDeleteRole().'
            );
        }

        if (requestParameters['rabbitmq_mount_path'] == null) {
            throw new runtime.RequiredError(
                'rabbitmq_mount_path',
                'Required parameter "rabbitmq_mount_path" was null or undefined when calling rabbitMqDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmq_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqDeleteRole(name: string, rabbitmq_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqDeleteRoleRaw({ name: name, rabbitmq_mount_path: rabbitmq_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqListRolesRaw(requestParameters: SecretsApiRabbitMqListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['rabbitmq_mount_path'] == null) {
            throw new runtime.RequiredError(
                'rabbitmq_mount_path',
                'Required parameter "rabbitmq_mount_path" was null or undefined when calling rabbitMqListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling rabbitMqListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/roles/`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmq_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqListRoles(rabbitmq_mount_path: string, list: RabbitMqListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.rabbitMqListRolesRaw({ rabbitmq_mount_path: rabbitmq_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async rabbitMqReadLeaseConfigurationRaw(requestParameters: SecretsApiRabbitMqReadLeaseConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['rabbitmq_mount_path'] == null) {
            throw new runtime.RequiredError(
                'rabbitmq_mount_path',
                'Required parameter "rabbitmq_mount_path" was null or undefined when calling rabbitMqReadLeaseConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/config/lease`.replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmq_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rabbitMqReadLeaseConfiguration(rabbitmq_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqReadLeaseConfigurationRaw({ rabbitmq_mount_path: rabbitmq_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqReadRoleRaw(requestParameters: SecretsApiRabbitMqReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rabbitMqReadRole().'
            );
        }

        if (requestParameters['rabbitmq_mount_path'] == null) {
            throw new runtime.RequiredError(
                'rabbitmq_mount_path',
                'Required parameter "rabbitmq_mount_path" was null or undefined when calling rabbitMqReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmq_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqReadRole(name: string, rabbitmq_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqReadRoleRaw({ name: name, rabbitmq_mount_path: rabbitmq_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Request RabbitMQ credentials for a certain role.
     */
    async rabbitMqRequestCredentialsRaw(requestParameters: SecretsApiRabbitMqRequestCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rabbitMqRequestCredentials().'
            );
        }

        if (requestParameters['rabbitmq_mount_path'] == null) {
            throw new runtime.RequiredError(
                'rabbitmq_mount_path',
                'Required parameter "rabbitmq_mount_path" was null or undefined when calling rabbitMqRequestCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmq_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request RabbitMQ credentials for a certain role.
     */
    async rabbitMqRequestCredentials(name: string, rabbitmq_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqRequestCredentialsRaw({ name: name, rabbitmq_mount_path: rabbitmq_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqWriteRoleRaw(requestParameters: SecretsApiRabbitMqWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rabbitMqWriteRole().'
            );
        }

        if (requestParameters['rabbitmq_mount_path'] == null) {
            throw new runtime.RequiredError(
                'rabbitmq_mount_path',
                'Required parameter "rabbitmq_mount_path" was null or undefined when calling rabbitMqWriteRole().'
            );
        }

        if (requestParameters['RabbitMqWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'RabbitMqWriteRoleRequest',
                'Required parameter "RabbitMqWriteRoleRequest" was null or undefined when calling rabbitMqWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{rabbitmq_mount_path}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"rabbitmq_mount_path"}}`, encodeURIComponent(String(requestParameters['rabbitmq_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RabbitMqWriteRoleRequestToJSON(requestParameters['RabbitMqWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the roles that can be created with this backend.
     */
    async rabbitMqWriteRole(name: string, rabbitmq_mount_path: string, RabbitMqWriteRoleRequest: RabbitMqWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rabbitMqWriteRoleRaw({ name: name, rabbitmq_mount_path: rabbitmq_mount_path, RabbitMqWriteRoleRequest: RabbitMqWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshConfigureCaRaw(requestParameters: SecretsApiSshConfigureCaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshConfigureCa().'
            );
        }

        if (requestParameters['SshConfigureCaRequest'] == null) {
            throw new runtime.RequiredError(
                'SshConfigureCaRequest',
                'Required parameter "SshConfigureCaRequest" was null or undefined when calling sshConfigureCa().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/config/ca`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshConfigureCaRequestToJSON(requestParameters['SshConfigureCaRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshConfigureCa(ssh_mount_path: string, SshConfigureCaRequest: SshConfigureCaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshConfigureCaRaw({ ssh_mount_path: ssh_mount_path, SshConfigureCaRequest: SshConfigureCaRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshConfigureZeroAddressRaw(requestParameters: SecretsApiSshConfigureZeroAddressOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshConfigureZeroAddress().'
            );
        }

        if (requestParameters['SshConfigureZeroAddressRequest'] == null) {
            throw new runtime.RequiredError(
                'SshConfigureZeroAddressRequest',
                'Required parameter "SshConfigureZeroAddressRequest" was null or undefined when calling sshConfigureZeroAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/config/zeroaddress`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshConfigureZeroAddressRequestToJSON(requestParameters['SshConfigureZeroAddressRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshConfigureZeroAddress(ssh_mount_path: string, SshConfigureZeroAddressRequest: SshConfigureZeroAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshConfigureZeroAddressRaw({ ssh_mount_path: ssh_mount_path, SshConfigureZeroAddressRequest: SshConfigureZeroAddressRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshDeleteCaConfigurationRaw(requestParameters: SecretsApiSshDeleteCaConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshDeleteCaConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/config/ca`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshDeleteCaConfiguration(ssh_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshDeleteCaConfigurationRaw({ ssh_mount_path: ssh_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshDeleteRoleRaw(requestParameters: SecretsApiSshDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshDeleteRole().'
            );
        }

        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshDeleteRole(role: string, ssh_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshDeleteRoleRaw({ role: role, ssh_mount_path: ssh_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshDeleteZeroAddressConfigurationRaw(requestParameters: SecretsApiSshDeleteZeroAddressConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshDeleteZeroAddressConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/config/zeroaddress`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshDeleteZeroAddressConfiguration(ssh_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshDeleteZeroAddressConfigurationRaw({ ssh_mount_path: ssh_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Creates a credential for establishing SSH connection with the remote host.
     */
    async sshGenerateCredentialsRaw(requestParameters: SecretsApiSshGenerateCredentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshGenerateCredentials().'
            );
        }

        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshGenerateCredentials().'
            );
        }

        if (requestParameters['SshGenerateCredentialsRequest'] == null) {
            throw new runtime.RequiredError(
                'SshGenerateCredentialsRequest',
                'Required parameter "SshGenerateCredentialsRequest" was null or undefined when calling sshGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/creds/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshGenerateCredentialsRequestToJSON(requestParameters['SshGenerateCredentialsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a credential for establishing SSH connection with the remote host.
     */
    async sshGenerateCredentials(role: string, ssh_mount_path: string, SshGenerateCredentialsRequest: SshGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshGenerateCredentialsRaw({ role: role, ssh_mount_path: ssh_mount_path, SshGenerateCredentialsRequest: SshGenerateCredentialsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshIssueCertificateRaw(requestParameters: SecretsApiSshIssueCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshIssueCertificate().'
            );
        }

        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshIssueCertificate().'
            );
        }

        if (requestParameters['SshIssueCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'SshIssueCertificateRequest',
                'Required parameter "SshIssueCertificateRequest" was null or undefined when calling sshIssueCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/issue/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshIssueCertificateRequestToJSON(requestParameters['SshIssueCertificateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshIssueCertificate(role: string, ssh_mount_path: string, SshIssueCertificateRequest: SshIssueCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshIssueCertificateRaw({ role: role, ssh_mount_path: ssh_mount_path, SshIssueCertificateRequest: SshIssueCertificateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshListRolesRaw(requestParameters: SecretsApiSshListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling sshListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/roles/`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshListRoles(ssh_mount_path: string, list: SshListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.sshListRolesRaw({ ssh_mount_path: ssh_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List all the roles associated with the given IP address.
     */
    async sshListRolesByIpRaw(requestParameters: SecretsApiSshListRolesByIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshListRolesByIp().'
            );
        }

        if (requestParameters['SshListRolesByIpRequest'] == null) {
            throw new runtime.RequiredError(
                'SshListRolesByIpRequest',
                'Required parameter "SshListRolesByIpRequest" was null or undefined when calling sshListRolesByIp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/lookup`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshListRolesByIpRequestToJSON(requestParameters['SshListRolesByIpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List all the roles associated with the given IP address.
     */
    async sshListRolesByIp(ssh_mount_path: string, SshListRolesByIpRequest: SshListRolesByIpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshListRolesByIpRaw({ ssh_mount_path: ssh_mount_path, SshListRolesByIpRequest: SshListRolesByIpRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshReadCaConfigurationRaw(requestParameters: SecretsApiSshReadCaConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshReadCaConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/config/ca`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshReadCaConfiguration(ssh_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshReadCaConfigurationRaw({ ssh_mount_path: ssh_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the public key.
     */
    async sshReadPublicKeyRaw(requestParameters: SecretsApiSshReadPublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshReadPublicKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/public_key`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the public key.
     */
    async sshReadPublicKey(ssh_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshReadPublicKeyRaw({ ssh_mount_path: ssh_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshReadRoleRaw(requestParameters: SecretsApiSshReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshReadRole().'
            );
        }

        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshReadRole(role: string, ssh_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshReadRoleRaw({ role: role, ssh_mount_path: ssh_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sshReadZeroAddressConfigurationRaw(requestParameters: SecretsApiSshReadZeroAddressConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshReadZeroAddressConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/config/zeroaddress`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshReadZeroAddressConfiguration(ssh_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshReadZeroAddressConfigurationRaw({ ssh_mount_path: ssh_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Request signing an SSH key using a certain role with the provided details.
     */
    async sshSignCertificateRaw(requestParameters: SecretsApiSshSignCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshSignCertificate().'
            );
        }

        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshSignCertificate().'
            );
        }

        if (requestParameters['SshSignCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'SshSignCertificateRequest',
                'Required parameter "SshSignCertificateRequest" was null or undefined when calling sshSignCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/sign/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshSignCertificateRequestToJSON(requestParameters['SshSignCertificateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request signing an SSH key using a certain role with the provided details.
     */
    async sshSignCertificate(role: string, ssh_mount_path: string, SshSignCertificateRequest: SshSignCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshSignCertificateRaw({ role: role, ssh_mount_path: ssh_mount_path, SshSignCertificateRequest: SshSignCertificateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint removes the stored host keys used for the removed Dynamic Key feature, if present.
     */
    async sshTidyDynamicHostKeysRaw(requestParameters: SecretsApiSshTidyDynamicHostKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshTidyDynamicHostKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssh_mount_path}/tidy/dynamic-keys`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint removes the stored host keys used for the removed Dynamic Key feature, if present.
     */
    async sshTidyDynamicHostKeys(ssh_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshTidyDynamicHostKeysRaw({ ssh_mount_path: ssh_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Validate the OTP provided by Vault SSH Agent.
     */
    async sshVerifyOtpRaw(requestParameters: SecretsApiSshVerifyOtpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshVerifyOtp().'
            );
        }

        if (requestParameters['SshVerifyOtpRequest'] == null) {
            throw new runtime.RequiredError(
                'SshVerifyOtpRequest',
                'Required parameter "SshVerifyOtpRequest" was null or undefined when calling sshVerifyOtp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/verify`.replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshVerifyOtpRequestToJSON(requestParameters['SshVerifyOtpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validate the OTP provided by Vault SSH Agent.
     */
    async sshVerifyOtp(ssh_mount_path: string, SshVerifyOtpRequest: SshVerifyOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshVerifyOtpRaw({ ssh_mount_path: ssh_mount_path, SshVerifyOtpRequest: SshVerifyOtpRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshWriteRoleRaw(requestParameters: SecretsApiSshWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling sshWriteRole().'
            );
        }

        if (requestParameters['ssh_mount_path'] == null) {
            throw new runtime.RequiredError(
                'ssh_mount_path',
                'Required parameter "ssh_mount_path" was null or undefined when calling sshWriteRole().'
            );
        }

        if (requestParameters['SshWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'SshWriteRoleRequest',
                'Required parameter "SshWriteRoleRequest" was null or undefined when calling sshWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{ssh_mount_path}/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))).replace(`{${"ssh_mount_path"}}`, encodeURIComponent(String(requestParameters['ssh_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshWriteRoleRequestToJSON(requestParameters['SshWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage the \'roles\' that can be created with this backend.
     */
    async sshWriteRole(role: string, ssh_mount_path: string, SshWriteRoleRequest: SshWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sshWriteRoleRaw({ role: role, ssh_mount_path: ssh_mount_path, SshWriteRoleRequest: SshWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudConfigureRaw(requestParameters: SecretsApiTerraformCloudConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['terraform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'terraform_mount_path',
                'Required parameter "terraform_mount_path" was null or undefined when calling terraformCloudConfigure().'
            );
        }

        if (requestParameters['TerraformCloudConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'TerraformCloudConfigureRequest',
                'Required parameter "TerraformCloudConfigureRequest" was null or undefined when calling terraformCloudConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{terraform_mount_path}/config`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TerraformCloudConfigureRequestToJSON(requestParameters['TerraformCloudConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudConfigure(terraform_mount_path: string, TerraformCloudConfigureRequest: TerraformCloudConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudConfigureRaw({ terraform_mount_path: terraform_mount_path, TerraformCloudConfigureRequest: TerraformCloudConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudDeleteConfigurationRaw(requestParameters: SecretsApiTerraformCloudDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['terraform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'terraform_mount_path',
                'Required parameter "terraform_mount_path" was null or undefined when calling terraformCloudDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/config`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraform_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudDeleteConfiguration(terraform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudDeleteConfigurationRaw({ terraform_mount_path: terraform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudDeleteRoleRaw(requestParameters: SecretsApiTerraformCloudDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudDeleteRole().'
            );
        }

        if (requestParameters['terraform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'terraform_mount_path',
                'Required parameter "terraform_mount_path" was null or undefined when calling terraformCloudDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraform_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudDeleteRole(name: string, terraform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudDeleteRoleRaw({ name: name, terraform_mount_path: terraform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudGenerateCredentialsRaw(requestParameters: SecretsApiTerraformCloudGenerateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudGenerateCredentials().'
            );
        }

        if (requestParameters['terraform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'terraform_mount_path',
                'Required parameter "terraform_mount_path" was null or undefined when calling terraformCloudGenerateCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudGenerateCredentials(name: string, terraform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudGenerateCredentialsRaw({ name: name, terraform_mount_path: terraform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudGenerateCredentials2Raw(requestParameters: SecretsApiTerraformCloudGenerateCredentials2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudGenerateCredentials2().'
            );
        }

        if (requestParameters['terraform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'terraform_mount_path',
                'Required parameter "terraform_mount_path" was null or undefined when calling terraformCloudGenerateCredentials2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/creds/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudGenerateCredentials2(name: string, terraform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudGenerateCredentials2Raw({ name: name, terraform_mount_path: terraform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudListRolesRaw(requestParameters: SecretsApiTerraformCloudListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['terraform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'terraform_mount_path',
                'Required parameter "terraform_mount_path" was null or undefined when calling terraformCloudListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling terraformCloudListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/role/`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async terraformCloudListRoles(terraform_mount_path: string, list: TerraformCloudListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.terraformCloudListRolesRaw({ terraform_mount_path: terraform_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudReadConfigurationRaw(requestParameters: SecretsApiTerraformCloudReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['terraform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'terraform_mount_path',
                'Required parameter "terraform_mount_path" was null or undefined when calling terraformCloudReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/config`.replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudReadConfiguration(terraform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudReadConfigurationRaw({ terraform_mount_path: terraform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudReadRoleRaw(requestParameters: SecretsApiTerraformCloudReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudReadRole().'
            );
        }

        if (requestParameters['terraform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'terraform_mount_path',
                'Required parameter "terraform_mount_path" was null or undefined when calling terraformCloudReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudReadRole(name: string, terraform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudReadRoleRaw({ name: name, terraform_mount_path: terraform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudRotateRoleRaw(requestParameters: SecretsApiTerraformCloudRotateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudRotateRole().'
            );
        }

        if (requestParameters['terraform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'terraform_mount_path',
                'Required parameter "terraform_mount_path" was null or undefined when calling terraformCloudRotateRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{terraform_mount_path}/rotate-role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudRotateRole(name: string, terraform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudRotateRoleRaw({ name: name, terraform_mount_path: terraform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async terraformCloudWriteRoleRaw(requestParameters: SecretsApiTerraformCloudWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling terraformCloudWriteRole().'
            );
        }

        if (requestParameters['terraform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'terraform_mount_path',
                'Required parameter "terraform_mount_path" was null or undefined when calling terraformCloudWriteRole().'
            );
        }

        if (requestParameters['TerraformCloudWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'TerraformCloudWriteRoleRequest',
                'Required parameter "TerraformCloudWriteRoleRequest" was null or undefined when calling terraformCloudWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{terraform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"terraform_mount_path"}}`, encodeURIComponent(String(requestParameters['terraform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TerraformCloudWriteRoleRequestToJSON(requestParameters['TerraformCloudWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async terraformCloudWriteRole(name: string, terraform_mount_path: string, TerraformCloudWriteRoleRequest: TerraformCloudWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.terraformCloudWriteRoleRaw({ name: name, terraform_mount_path: terraform_mount_path, TerraformCloudWriteRoleRequest: TerraformCloudWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async totpCreateKeyRaw(requestParameters: SecretsApiTotpCreateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpCreateKey().'
            );
        }

        if (requestParameters['totp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'totp_mount_path',
                'Required parameter "totp_mount_path" was null or undefined when calling totpCreateKey().'
            );
        }

        if (requestParameters['TotpCreateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'TotpCreateKeyRequest',
                'Required parameter "TotpCreateKeyRequest" was null or undefined when calling totpCreateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{totp_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TotpCreateKeyRequestToJSON(requestParameters['TotpCreateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpCreateKey(name: string, totp_mount_path: string, TotpCreateKeyRequest: TotpCreateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.totpCreateKeyRaw({ name: name, totp_mount_path: totp_mount_path, TotpCreateKeyRequest: TotpCreateKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async totpDeleteKeyRaw(requestParameters: SecretsApiTotpDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpDeleteKey().'
            );
        }

        if (requestParameters['totp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'totp_mount_path',
                'Required parameter "totp_mount_path" was null or undefined when calling totpDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{totp_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totp_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpDeleteKey(name: string, totp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.totpDeleteKeyRaw({ name: name, totp_mount_path: totp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async totpGenerateCodeRaw(requestParameters: SecretsApiTotpGenerateCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpGenerateCode().'
            );
        }

        if (requestParameters['totp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'totp_mount_path',
                'Required parameter "totp_mount_path" was null or undefined when calling totpGenerateCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{totp_mount_path}/code/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpGenerateCode(name: string, totp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.totpGenerateCodeRaw({ name: name, totp_mount_path: totp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Manage the keys that can be created with this backend.
     */
    async totpListKeysRaw(requestParameters: SecretsApiTotpListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['totp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'totp_mount_path',
                'Required parameter "totp_mount_path" was null or undefined when calling totpListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling totpListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{totp_mount_path}/keys/`.replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Manage the keys that can be created with this backend.
     */
    async totpListKeys(totp_mount_path: string, list: TotpListKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.totpListKeysRaw({ totp_mount_path: totp_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async totpReadKeyRaw(requestParameters: SecretsApiTotpReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpReadKey().'
            );
        }

        if (requestParameters['totp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'totp_mount_path',
                'Required parameter "totp_mount_path" was null or undefined when calling totpReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{totp_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totp_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpReadKey(name: string, totp_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.totpReadKeyRaw({ name: name, totp_mount_path: totp_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async totpValidateCodeRaw(requestParameters: SecretsApiTotpValidateCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling totpValidateCode().'
            );
        }

        if (requestParameters['totp_mount_path'] == null) {
            throw new runtime.RequiredError(
                'totp_mount_path',
                'Required parameter "totp_mount_path" was null or undefined when calling totpValidateCode().'
            );
        }

        if (requestParameters['TotpValidateCodeRequest'] == null) {
            throw new runtime.RequiredError(
                'TotpValidateCodeRequest',
                'Required parameter "TotpValidateCodeRequest" was null or undefined when calling totpValidateCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{totp_mount_path}/code/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"totp_mount_path"}}`, encodeURIComponent(String(requestParameters['totp_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TotpValidateCodeRequestToJSON(requestParameters['TotpValidateCodeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async totpValidateCode(name: string, totp_mount_path: string, TotpValidateCodeRequest: TotpValidateCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.totpValidateCodeRaw({ name: name, totp_mount_path: totp_mount_path, TotpValidateCodeRequest: TotpValidateCodeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformApplyStoreSchemaRaw(requestParameters: SecretsApiTransformApplyStoreSchemaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformApplyStoreSchema().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformApplyStoreSchema().'
            );
        }

        if (requestParameters['TransformApplyStoreSchemaRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformApplyStoreSchemaRequest',
                'Required parameter "TransformApplyStoreSchemaRequest" was null or undefined when calling transformApplyStoreSchema().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/stores/{name}/schema`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformApplyStoreSchemaRequestToJSON(requestParameters['TransformApplyStoreSchemaRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformApplyStoreSchema(name: string, transform_mount_path: string, TransformApplyStoreSchemaRequest: TransformApplyStoreSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformApplyStoreSchemaRaw({ name: name, transform_mount_path: transform_mount_path, TransformApplyStoreSchemaRequest: TransformApplyStoreSchemaRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformCheckTokenizedRaw(requestParameters: SecretsApiTransformCheckTokenizedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role_name'] == null) {
            throw new runtime.RequiredError(
                'role_name',
                'Required parameter "role_name" was null or undefined when calling transformCheckTokenized().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformCheckTokenized().'
            );
        }

        if (requestParameters['TransformCheckTokenizedRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformCheckTokenizedRequest',
                'Required parameter "TransformCheckTokenizedRequest" was null or undefined when calling transformCheckTokenized().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/tokenized/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['role_name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformCheckTokenizedRequestToJSON(requestParameters['TransformCheckTokenizedRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformCheckTokenized(role_name: string, transform_mount_path: string, TransformCheckTokenizedRequest: TransformCheckTokenizedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformCheckTokenizedRaw({ role_name: role_name, transform_mount_path: transform_mount_path, TransformCheckTokenizedRequest: TransformCheckTokenizedRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformCheckTokenized_9Raw(requestParameters: SecretsApiTransformCheckTokenized0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role_name'] == null) {
            throw new runtime.RequiredError(
                'role_name',
                'Required parameter "role_name" was null or undefined when calling transformCheckTokenized_9().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformCheckTokenized_9().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/tokenized/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['role_name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformCheckTokenized_9(role_name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformCheckTokenized_9Raw({ role_name: role_name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Configures a new cache of the specified size
     */
    async transformConfigureCacheRaw(requestParameters: SecretsApiTransformConfigureCacheOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformConfigureCache().'
            );
        }

        if (requestParameters['TransformConfigureCacheRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformConfigureCacheRequest',
                'Required parameter "TransformConfigureCacheRequest" was null or undefined when calling transformConfigureCache().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/cache-config`.replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformConfigureCacheRequestToJSON(requestParameters['TransformConfigureCacheRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configures a new cache of the specified size
     */
    async transformConfigureCache(transform_mount_path: string, TransformConfigureCacheRequest: TransformConfigureCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformConfigureCacheRaw({ transform_mount_path: transform_mount_path, TransformConfigureCacheRequest: TransformConfigureCacheRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Configure a named encryption key
     */
    async transformConfigureNamedEncryptionKeyRaw(requestParameters: SecretsApiTransformConfigureNamedEncryptionKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformConfigureNamedEncryptionKey().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformConfigureNamedEncryptionKey().'
            );
        }

        if (requestParameters['TransformConfigureNamedEncryptionKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformConfigureNamedEncryptionKeyRequest',
                'Required parameter "TransformConfigureNamedEncryptionKeyRequest" was null or undefined when calling transformConfigureNamedEncryptionKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/tokenization/keys/{name}/config`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformConfigureNamedEncryptionKeyRequestToJSON(requestParameters['TransformConfigureNamedEncryptionKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure a named encryption key
     */
    async transformConfigureNamedEncryptionKey(name: string, transform_mount_path: string, TransformConfigureNamedEncryptionKeyRequest: TransformConfigureNamedEncryptionKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformConfigureNamedEncryptionKeyRaw({ name: name, transform_mount_path: transform_mount_path, TransformConfigureNamedEncryptionKeyRequest: TransformConfigureNamedEncryptionKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformCreateFpeTransformationWithImportedKeysRaw(requestParameters: SecretsApiTransformCreateFpeTransformationWithImportedKeysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformCreateFpeTransformationWithImportedKeys().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformCreateFpeTransformationWithImportedKeys().'
            );
        }

        if (requestParameters['TransformCreateFpeTransformationWithImportedKeysRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformCreateFpeTransformationWithImportedKeysRequest',
                'Required parameter "TransformCreateFpeTransformationWithImportedKeysRequest" was null or undefined when calling transformCreateFpeTransformationWithImportedKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/fpe/{name}/import`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformCreateFpeTransformationWithImportedKeysRequestToJSON(requestParameters['TransformCreateFpeTransformationWithImportedKeysRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformCreateFpeTransformationWithImportedKeys(name: string, transform_mount_path: string, TransformCreateFpeTransformationWithImportedKeysRequest: TransformCreateFpeTransformationWithImportedKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformCreateFpeTransformationWithImportedKeysRaw({ name: name, transform_mount_path: transform_mount_path, TransformCreateFpeTransformationWithImportedKeysRequest: TransformCreateFpeTransformationWithImportedKeysRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformCreateTokenizationTransformationWithImportedKeysRaw(requestParameters: SecretsApiTransformCreateTokenizationTransformationWithImportedKeysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformCreateTokenizationTransformationWithImportedKeys().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformCreateTokenizationTransformationWithImportedKeys().'
            );
        }

        if (requestParameters['TransformCreateTokenizationTransformationWithImportedKeysRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformCreateTokenizationTransformationWithImportedKeysRequest',
                'Required parameter "TransformCreateTokenizationTransformationWithImportedKeysRequest" was null or undefined when calling transformCreateTokenizationTransformationWithImportedKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/tokenization/{name}/import`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformCreateTokenizationTransformationWithImportedKeysRequestToJSON(requestParameters['TransformCreateTokenizationTransformationWithImportedKeysRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformCreateTokenizationTransformationWithImportedKeys(name: string, transform_mount_path: string, TransformCreateTokenizationTransformationWithImportedKeysRequest: TransformCreateTokenizationTransformationWithImportedKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformCreateTokenizationTransformationWithImportedKeysRaw({ name: name, transform_mount_path: transform_mount_path, TransformCreateTokenizationTransformationWithImportedKeysRequest: TransformCreateTokenizationTransformationWithImportedKeysRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformDecodeRaw(requestParameters: SecretsApiTransformDecodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role_name'] == null) {
            throw new runtime.RequiredError(
                'role_name',
                'Required parameter "role_name" was null or undefined when calling transformDecode().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformDecode().'
            );
        }

        if (requestParameters['TransformDecodeRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformDecodeRequest',
                'Required parameter "TransformDecodeRequest" was null or undefined when calling transformDecode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/decode/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['role_name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformDecodeRequestToJSON(requestParameters['TransformDecodeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformDecode(role_name: string, transform_mount_path: string, TransformDecodeRequest: TransformDecodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformDecodeRaw({ role_name: role_name, transform_mount_path: transform_mount_path, TransformDecodeRequest: TransformDecodeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformDecodeWithFormatRaw(requestParameters: SecretsApiTransformDecodeWithFormatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['decode_format'] == null) {
            throw new runtime.RequiredError(
                'decode_format',
                'Required parameter "decode_format" was null or undefined when calling transformDecodeWithFormat().'
            );
        }

        if (requestParameters['role_name'] == null) {
            throw new runtime.RequiredError(
                'role_name',
                'Required parameter "role_name" was null or undefined when calling transformDecodeWithFormat().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformDecodeWithFormat().'
            );
        }

        if (requestParameters['TransformDecodeWithFormatRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformDecodeWithFormatRequest',
                'Required parameter "TransformDecodeWithFormatRequest" was null or undefined when calling transformDecodeWithFormat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/decode/{role_name}/{decode_format}`.replace(`{${"decode_format"}}`, encodeURIComponent(String(requestParameters['decode_format']))).replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['role_name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformDecodeWithFormatRequestToJSON(requestParameters['TransformDecodeWithFormatRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformDecodeWithFormat(decode_format: string, role_name: string, transform_mount_path: string, TransformDecodeWithFormatRequest: TransformDecodeWithFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformDecodeWithFormatRaw({ decode_format: decode_format, role_name: role_name, transform_mount_path: transform_mount_path, TransformDecodeWithFormatRequest: TransformDecodeWithFormatRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformDeleteAlphabetRaw(requestParameters: SecretsApiTransformDeleteAlphabetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformDeleteAlphabet().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformDeleteAlphabet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/alphabet/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformDeleteAlphabet(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformDeleteAlphabetRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformDeleteFpeTransformationRaw(requestParameters: SecretsApiTransformDeleteFpeTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformDeleteFpeTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformDeleteFpeTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/fpe/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformDeleteFpeTransformation(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformDeleteFpeTransformationRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformDeleteMaskingTransformationRaw(requestParameters: SecretsApiTransformDeleteMaskingTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformDeleteMaskingTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformDeleteMaskingTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/masking/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformDeleteMaskingTransformation(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformDeleteMaskingTransformationRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformDeleteRoleRaw(requestParameters: SecretsApiTransformDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformDeleteRole().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformDeleteRole(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformDeleteRoleRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformDeleteStoreRaw(requestParameters: SecretsApiTransformDeleteStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformDeleteStore().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformDeleteStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/stores/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformDeleteStore(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformDeleteStoreRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformDeleteTemplateRaw(requestParameters: SecretsApiTransformDeleteTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformDeleteTemplate().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformDeleteTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/template/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformDeleteTemplate(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformDeleteTemplateRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformDeleteTokenizationTransformationRaw(requestParameters: SecretsApiTransformDeleteTokenizationTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformDeleteTokenizationTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformDeleteTokenizationTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/tokenization/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformDeleteTokenizationTransformation(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformDeleteTokenizationTransformationRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformDeleteTransformationRaw(requestParameters: SecretsApiTransformDeleteTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformDeleteTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformDeleteTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/transformation/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformDeleteTransformation(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformDeleteTransformationRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformEncodeRaw(requestParameters: SecretsApiTransformEncodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role_name'] == null) {
            throw new runtime.RequiredError(
                'role_name',
                'Required parameter "role_name" was null or undefined when calling transformEncode().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformEncode().'
            );
        }

        if (requestParameters['TransformEncodeRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformEncodeRequest',
                'Required parameter "TransformEncodeRequest" was null or undefined when calling transformEncode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/encode/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['role_name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformEncodeRequestToJSON(requestParameters['TransformEncodeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformEncode(role_name: string, transform_mount_path: string, TransformEncodeRequest: TransformEncodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformEncodeRaw({ role_name: role_name, transform_mount_path: transform_mount_path, TransformEncodeRequest: TransformEncodeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformExportDecodedTokenizationTokensRaw(requestParameters: SecretsApiTransformExportDecodedTokenizationTokensOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformExportDecodedTokenizationTokens().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformExportDecodedTokenizationTokens().'
            );
        }

        if (requestParameters['TransformExportDecodedTokenizationTokensRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformExportDecodedTokenizationTokensRequest',
                'Required parameter "TransformExportDecodedTokenizationTokensRequest" was null or undefined when calling transformExportDecodedTokenizationTokens().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/tokenization/export-decoded/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformExportDecodedTokenizationTokensRequestToJSON(requestParameters['TransformExportDecodedTokenizationTokensRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformExportDecodedTokenizationTokens(name: string, transform_mount_path: string, TransformExportDecodedTokenizationTokensRequest: TransformExportDecodedTokenizationTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformExportDecodedTokenizationTokensRaw({ name: name, transform_mount_path: transform_mount_path, TransformExportDecodedTokenizationTokensRequest: TransformExportDecodedTokenizationTokensRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformImportKeyVersionIntoTokenizationTransformationRaw(requestParameters: SecretsApiTransformImportKeyVersionIntoTokenizationTransformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformImportKeyVersionIntoTokenizationTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformImportKeyVersionIntoTokenizationTransformation().'
            );
        }

        if (requestParameters['TransformImportKeyVersionIntoTokenizationTransformationRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformImportKeyVersionIntoTokenizationTransformationRequest',
                'Required parameter "TransformImportKeyVersionIntoTokenizationTransformationRequest" was null or undefined when calling transformImportKeyVersionIntoTokenizationTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/tokenization/{name}/import_version`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformImportKeyVersionIntoTokenizationTransformationRequestToJSON(requestParameters['TransformImportKeyVersionIntoTokenizationTransformationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformImportKeyVersionIntoTokenizationTransformation(name: string, transform_mount_path: string, TransformImportKeyVersionIntoTokenizationTransformationRequest: TransformImportKeyVersionIntoTokenizationTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformImportKeyVersionIntoTokenizationTransformationRaw({ name: name, transform_mount_path: transform_mount_path, TransformImportKeyVersionIntoTokenizationTransformationRequest: TransformImportKeyVersionIntoTokenizationTransformationRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformListAlphabetsRaw(requestParameters: SecretsApiTransformListAlphabetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformListAlphabets().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling transformListAlphabets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/alphabet/`.replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async transformListAlphabets(transform_mount_path: string, list: TransformListAlphabetsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.transformListAlphabetsRaw({ transform_mount_path: transform_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformListFpeTransformationsRaw(requestParameters: SecretsApiTransformListFpeTransformationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformListFpeTransformations().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling transformListFpeTransformations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/fpe/`.replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async transformListFpeTransformations(transform_mount_path: string, list: TransformListFpeTransformationsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.transformListFpeTransformationsRaw({ transform_mount_path: transform_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformListMaskingTransformationsRaw(requestParameters: SecretsApiTransformListMaskingTransformationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformListMaskingTransformations().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling transformListMaskingTransformations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/masking/`.replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async transformListMaskingTransformations(transform_mount_path: string, list: TransformListMaskingTransformationsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.transformListMaskingTransformationsRaw({ transform_mount_path: transform_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformListRolesRaw(requestParameters: SecretsApiTransformListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformListRoles().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling transformListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/role/`.replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async transformListRoles(transform_mount_path: string, list: TransformListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.transformListRolesRaw({ transform_mount_path: transform_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformListStoresRaw(requestParameters: SecretsApiTransformListStoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformListStores().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling transformListStores().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/stores/`.replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async transformListStores(transform_mount_path: string, list: TransformListStoresListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.transformListStoresRaw({ transform_mount_path: transform_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformListTemplatesRaw(requestParameters: SecretsApiTransformListTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformListTemplates().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling transformListTemplates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/template/`.replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async transformListTemplates(transform_mount_path: string, list: TransformListTemplatesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.transformListTemplatesRaw({ transform_mount_path: transform_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Managed named encryption keys
     */
    async transformListTokenizationKeysRaw(requestParameters: SecretsApiTransformListTokenizationKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformListTokenizationKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling transformListTokenizationKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/tokenization/keys/`.replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Managed named encryption keys
     */
    async transformListTokenizationKeys(transform_mount_path: string, list: TransformListTokenizationKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.transformListTokenizationKeysRaw({ transform_mount_path: transform_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformListTokenizationTransformationsRaw(requestParameters: SecretsApiTransformListTokenizationTransformationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformListTokenizationTransformations().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling transformListTokenizationTransformations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/tokenization/`.replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async transformListTokenizationTransformations(transform_mount_path: string, list: TransformListTokenizationTransformationsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.transformListTokenizationTransformationsRaw({ transform_mount_path: transform_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformListTransformationsRaw(requestParameters: SecretsApiTransformListTransformationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformListTransformations().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling transformListTransformations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/transformation/`.replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async transformListTransformations(transform_mount_path: string, list: TransformListTransformationsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.transformListTransformationsRaw({ transform_mount_path: transform_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformLookUpTokenRaw(requestParameters: SecretsApiTransformLookUpTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role_name'] == null) {
            throw new runtime.RequiredError(
                'role_name',
                'Required parameter "role_name" was null or undefined when calling transformLookUpToken().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformLookUpToken().'
            );
        }

        if (requestParameters['TransformLookUpTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformLookUpTokenRequest',
                'Required parameter "TransformLookUpTokenRequest" was null or undefined when calling transformLookUpToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/tokens/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['role_name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformLookUpTokenRequestToJSON(requestParameters['TransformLookUpTokenRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformLookUpToken(role_name: string, transform_mount_path: string, TransformLookUpTokenRequest: TransformLookUpTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformLookUpTokenRaw({ role_name: role_name, transform_mount_path: transform_mount_path, TransformLookUpTokenRequest: TransformLookUpTokenRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformLookUpToken_10Raw(requestParameters: SecretsApiTransformLookUpToken0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role_name'] == null) {
            throw new runtime.RequiredError(
                'role_name',
                'Required parameter "role_name" was null or undefined when calling transformLookUpToken_10().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformLookUpToken_10().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/tokens/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['role_name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformLookUpToken_10(role_name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformLookUpToken_10Raw({ role_name: role_name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformReadAlphabetRaw(requestParameters: SecretsApiTransformReadAlphabetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformReadAlphabet().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformReadAlphabet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/alphabet/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformReadAlphabet(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformReadAlphabetRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Returns the size of the active cache
     */
    async transformReadCacheConfigurationRaw(requestParameters: SecretsApiTransformReadCacheConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformReadCacheConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/cache-config`.replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the size of the active cache
     */
    async transformReadCacheConfiguration(transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformReadCacheConfigurationRaw({ transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformReadFpeTransformationRaw(requestParameters: SecretsApiTransformReadFpeTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformReadFpeTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformReadFpeTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/fpe/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformReadFpeTransformation(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformReadFpeTransformationRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformReadMaskingTransformationRaw(requestParameters: SecretsApiTransformReadMaskingTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformReadMaskingTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformReadMaskingTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/masking/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformReadMaskingTransformation(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformReadMaskingTransformationRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformReadRoleRaw(requestParameters: SecretsApiTransformReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformReadRole().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformReadRole(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformReadRoleRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformReadStoreRaw(requestParameters: SecretsApiTransformReadStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformReadStore().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformReadStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/stores/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformReadStore(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformReadStoreRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformReadTemplateRaw(requestParameters: SecretsApiTransformReadTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformReadTemplate().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformReadTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/template/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformReadTemplate(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformReadTemplateRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Managed named encryption keys
     */
    async transformReadTokenizationKeyRaw(requestParameters: SecretsApiTransformReadTokenizationKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformReadTokenizationKey().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformReadTokenizationKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/tokenization/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Managed named encryption keys
     */
    async transformReadTokenizationKey(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformReadTokenizationKeyRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformReadTokenizationTransformationRaw(requestParameters: SecretsApiTransformReadTokenizationTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformReadTokenizationTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformReadTokenizationTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/tokenization/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformReadTokenizationTransformation(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformReadTokenizationTransformationRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformReadTransformationRaw(requestParameters: SecretsApiTransformReadTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformReadTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformReadTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/transformation/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformReadTransformation(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformReadTransformationRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformRestoreTokenizationStateRaw(requestParameters: SecretsApiTransformRestoreTokenizationStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformRestoreTokenizationState().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformRestoreTokenizationState().'
            );
        }

        if (requestParameters['TransformRestoreTokenizationStateRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformRestoreTokenizationStateRequest',
                'Required parameter "TransformRestoreTokenizationStateRequest" was null or undefined when calling transformRestoreTokenizationState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/tokenization/restore/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformRestoreTokenizationStateRequestToJSON(requestParameters['TransformRestoreTokenizationStateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformRestoreTokenizationState(name: string, transform_mount_path: string, TransformRestoreTokenizationStateRequest: TransformRestoreTokenizationStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformRestoreTokenizationStateRaw({ name: name, transform_mount_path: transform_mount_path, TransformRestoreTokenizationStateRequest: TransformRestoreTokenizationStateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformRetrieveTokenMetadataRaw(requestParameters: SecretsApiTransformRetrieveTokenMetadataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role_name'] == null) {
            throw new runtime.RequiredError(
                'role_name',
                'Required parameter "role_name" was null or undefined when calling transformRetrieveTokenMetadata().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformRetrieveTokenMetadata().'
            );
        }

        if (requestParameters['TransformRetrieveTokenMetadataRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformRetrieveTokenMetadataRequest',
                'Required parameter "TransformRetrieveTokenMetadataRequest" was null or undefined when calling transformRetrieveTokenMetadata().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/metadata/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['role_name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformRetrieveTokenMetadataRequestToJSON(requestParameters['TransformRetrieveTokenMetadataRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformRetrieveTokenMetadata(role_name: string, transform_mount_path: string, TransformRetrieveTokenMetadataRequest: TransformRetrieveTokenMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformRetrieveTokenMetadataRaw({ role_name: role_name, transform_mount_path: transform_mount_path, TransformRetrieveTokenMetadataRequest: TransformRetrieveTokenMetadataRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Returns the public key to use for wrapping imported keys
     */
    async transformRetrieveWrappingKeyRaw(requestParameters: SecretsApiTransformRetrieveWrappingKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformRetrieveWrappingKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/wrapping_key`.replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the public key to use for wrapping imported keys
     */
    async transformRetrieveWrappingKey(transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformRetrieveWrappingKeyRaw({ transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Rotate key used for tokenization
     */
    async transformRotateTokenizationKeyRaw(requestParameters: SecretsApiTransformRotateTokenizationKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformRotateTokenizationKey().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformRotateTokenizationKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transform_mount_path}/tokenization/keys/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rotate key used for tokenization
     */
    async transformRotateTokenizationKey(name: string, transform_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformRotateTokenizationKeyRaw({ name: name, transform_mount_path: transform_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformSnapshotTokenizationStateRaw(requestParameters: SecretsApiTransformSnapshotTokenizationStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformSnapshotTokenizationState().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformSnapshotTokenizationState().'
            );
        }

        if (requestParameters['TransformSnapshotTokenizationStateRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformSnapshotTokenizationStateRequest',
                'Required parameter "TransformSnapshotTokenizationStateRequest" was null or undefined when calling transformSnapshotTokenizationState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/tokenization/snapshot/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformSnapshotTokenizationStateRequestToJSON(requestParameters['TransformSnapshotTokenizationStateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformSnapshotTokenizationState(name: string, transform_mount_path: string, TransformSnapshotTokenizationStateRequest: TransformSnapshotTokenizationStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformSnapshotTokenizationStateRaw({ name: name, transform_mount_path: transform_mount_path, TransformSnapshotTokenizationStateRequest: TransformSnapshotTokenizationStateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Trim key versions of a named key
     */
    async transformTrimKeyVersionsRaw(requestParameters: SecretsApiTransformTrimKeyVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformTrimKeyVersions().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformTrimKeyVersions().'
            );
        }

        if (requestParameters['TransformTrimKeyVersionsRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformTrimKeyVersionsRequest',
                'Required parameter "TransformTrimKeyVersionsRequest" was null or undefined when calling transformTrimKeyVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/tokenization/keys/{name}/trim`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformTrimKeyVersionsRequestToJSON(requestParameters['TransformTrimKeyVersionsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Trim key versions of a named key
     */
    async transformTrimKeyVersions(name: string, transform_mount_path: string, TransformTrimKeyVersionsRequest: TransformTrimKeyVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformTrimKeyVersionsRaw({ name: name, transform_mount_path: transform_mount_path, TransformTrimKeyVersionsRequest: TransformTrimKeyVersionsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformValidateTokenRaw(requestParameters: SecretsApiTransformValidateTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['role_name'] == null) {
            throw new runtime.RequiredError(
                'role_name',
                'Required parameter "role_name" was null or undefined when calling transformValidateToken().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformValidateToken().'
            );
        }

        if (requestParameters['TransformValidateTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformValidateTokenRequest',
                'Required parameter "TransformValidateTokenRequest" was null or undefined when calling transformValidateToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/validate/{role_name}`.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['role_name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformValidateTokenRequestToJSON(requestParameters['TransformValidateTokenRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformValidateToken(role_name: string, transform_mount_path: string, TransformValidateTokenRequest: TransformValidateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformValidateTokenRaw({ role_name: role_name, transform_mount_path: transform_mount_path, TransformValidateTokenRequest: TransformValidateTokenRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformWriteAlphabetRaw(requestParameters: SecretsApiTransformWriteAlphabetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformWriteAlphabet().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformWriteAlphabet().'
            );
        }

        if (requestParameters['TransformWriteAlphabetRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformWriteAlphabetRequest',
                'Required parameter "TransformWriteAlphabetRequest" was null or undefined when calling transformWriteAlphabet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/alphabet/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformWriteAlphabetRequestToJSON(requestParameters['TransformWriteAlphabetRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformWriteAlphabet(name: string, transform_mount_path: string, TransformWriteAlphabetRequest: TransformWriteAlphabetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformWriteAlphabetRaw({ name: name, transform_mount_path: transform_mount_path, TransformWriteAlphabetRequest: TransformWriteAlphabetRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformWriteFpeTransformationRaw(requestParameters: SecretsApiTransformWriteFpeTransformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformWriteFpeTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformWriteFpeTransformation().'
            );
        }

        if (requestParameters['TransformWriteFpeTransformationRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformWriteFpeTransformationRequest',
                'Required parameter "TransformWriteFpeTransformationRequest" was null or undefined when calling transformWriteFpeTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/fpe/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformWriteFpeTransformationRequestToJSON(requestParameters['TransformWriteFpeTransformationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformWriteFpeTransformation(name: string, transform_mount_path: string, TransformWriteFpeTransformationRequest: TransformWriteFpeTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformWriteFpeTransformationRaw({ name: name, transform_mount_path: transform_mount_path, TransformWriteFpeTransformationRequest: TransformWriteFpeTransformationRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformWriteMaskingTransformationRaw(requestParameters: SecretsApiTransformWriteMaskingTransformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformWriteMaskingTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformWriteMaskingTransformation().'
            );
        }

        if (requestParameters['TransformWriteMaskingTransformationRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformWriteMaskingTransformationRequest',
                'Required parameter "TransformWriteMaskingTransformationRequest" was null or undefined when calling transformWriteMaskingTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/masking/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformWriteMaskingTransformationRequestToJSON(requestParameters['TransformWriteMaskingTransformationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformWriteMaskingTransformation(name: string, transform_mount_path: string, TransformWriteMaskingTransformationRequest: TransformWriteMaskingTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformWriteMaskingTransformationRaw({ name: name, transform_mount_path: transform_mount_path, TransformWriteMaskingTransformationRequest: TransformWriteMaskingTransformationRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformWriteRoleRaw(requestParameters: SecretsApiTransformWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformWriteRole().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformWriteRole().'
            );
        }

        if (requestParameters['TransformWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformWriteRoleRequest',
                'Required parameter "TransformWriteRoleRequest" was null or undefined when calling transformWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformWriteRoleRequestToJSON(requestParameters['TransformWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformWriteRole(name: string, transform_mount_path: string, TransformWriteRoleRequest: TransformWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformWriteRoleRaw({ name: name, transform_mount_path: transform_mount_path, TransformWriteRoleRequest: TransformWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformWriteStoreRaw(requestParameters: SecretsApiTransformWriteStoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformWriteStore().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformWriteStore().'
            );
        }

        if (requestParameters['TransformWriteStoreRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformWriteStoreRequest',
                'Required parameter "TransformWriteStoreRequest" was null or undefined when calling transformWriteStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/stores/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformWriteStoreRequestToJSON(requestParameters['TransformWriteStoreRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformWriteStore(name: string, transform_mount_path: string, TransformWriteStoreRequest: TransformWriteStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformWriteStoreRaw({ name: name, transform_mount_path: transform_mount_path, TransformWriteStoreRequest: TransformWriteStoreRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformWriteTemplateRaw(requestParameters: SecretsApiTransformWriteTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformWriteTemplate().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformWriteTemplate().'
            );
        }

        if (requestParameters['TransformWriteTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformWriteTemplateRequest',
                'Required parameter "TransformWriteTemplateRequest" was null or undefined when calling transformWriteTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/template/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformWriteTemplateRequestToJSON(requestParameters['TransformWriteTemplateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformWriteTemplate(name: string, transform_mount_path: string, TransformWriteTemplateRequest: TransformWriteTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformWriteTemplateRaw({ name: name, transform_mount_path: transform_mount_path, TransformWriteTemplateRequest: TransformWriteTemplateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformWriteTokenizationTransformationRaw(requestParameters: SecretsApiTransformWriteTokenizationTransformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformWriteTokenizationTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformWriteTokenizationTransformation().'
            );
        }

        if (requestParameters['TransformWriteTokenizationTransformationRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformWriteTokenizationTransformationRequest',
                'Required parameter "TransformWriteTokenizationTransformationRequest" was null or undefined when calling transformWriteTokenizationTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/transformations/tokenization/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformWriteTokenizationTransformationRequestToJSON(requestParameters['TransformWriteTokenizationTransformationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformWriteTokenizationTransformation(name: string, transform_mount_path: string, TransformWriteTokenizationTransformationRequest: TransformWriteTokenizationTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformWriteTokenizationTransformationRaw({ name: name, transform_mount_path: transform_mount_path, TransformWriteTokenizationTransformationRequest: TransformWriteTokenizationTransformationRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transformWriteTransformationRaw(requestParameters: SecretsApiTransformWriteTransformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transformWriteTransformation().'
            );
        }

        if (requestParameters['transform_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transform_mount_path',
                'Required parameter "transform_mount_path" was null or undefined when calling transformWriteTransformation().'
            );
        }

        if (requestParameters['TransformWriteTransformationRequest'] == null) {
            throw new runtime.RequiredError(
                'TransformWriteTransformationRequest',
                'Required parameter "TransformWriteTransformationRequest" was null or undefined when calling transformWriteTransformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transform_mount_path}/transformation/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transform_mount_path"}}`, encodeURIComponent(String(requestParameters['transform_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransformWriteTransformationRequestToJSON(requestParameters['TransformWriteTransformationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transformWriteTransformation(name: string, transform_mount_path: string, TransformWriteTransformationRequest: TransformWriteTransformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transformWriteTransformationRaw({ name: name, transform_mount_path: transform_mount_path, TransformWriteTransformationRequest: TransformWriteTransformationRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Backup the named key
     */
    async transitBackUpKeyRaw(requestParameters: SecretsApiTransitBackUpKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitBackUpKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitBackUpKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/backup/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Backup the named key
     */
    async transitBackUpKey(name: string, transit_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitBackUpKeyRaw({ name: name, transit_mount_path: transit_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Securely export named encryption or signing key
     */
    async transitByokKeyRaw(requestParameters: SecretsApiTransitByokKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['destination'] == null) {
            throw new runtime.RequiredError(
                'destination',
                'Required parameter "destination" was null or undefined when calling transitByokKey().'
            );
        }

        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling transitByokKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitByokKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/byok-export/{destination}/{source}`.replace(`{${"destination"}}`, encodeURIComponent(String(requestParameters['destination']))).replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Securely export named encryption or signing key
     */
    async transitByokKey(destination: string, source: string, transit_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitByokKeyRaw({ destination: destination, source: source, transit_mount_path: transit_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Securely export named encryption or signing key
     */
    async transitByokKeyVersionRaw(requestParameters: SecretsApiTransitByokKeyVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['destination'] == null) {
            throw new runtime.RequiredError(
                'destination',
                'Required parameter "destination" was null or undefined when calling transitByokKeyVersion().'
            );
        }

        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling transitByokKeyVersion().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling transitByokKeyVersion().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitByokKeyVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/byok-export/{destination}/{source}/{version}`.replace(`{${"destination"}}`, encodeURIComponent(String(requestParameters['destination']))).replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Securely export named encryption or signing key
     */
    async transitByokKeyVersion(destination: string, source: string, version: string, transit_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitByokKeyVersionRaw({ destination: destination, source: source, version: version, transit_mount_path: transit_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Configures a new cache of the specified size
     */
    async transitConfigureCacheRaw(requestParameters: SecretsApiTransitConfigureCacheOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitConfigureCache().'
            );
        }

        if (requestParameters['TransitConfigureCacheRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitConfigureCacheRequest',
                'Required parameter "TransitConfigureCacheRequest" was null or undefined when calling transitConfigureCache().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/cache-config`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitConfigureCacheRequestToJSON(requestParameters['TransitConfigureCacheRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configures a new cache of the specified size
     */
    async transitConfigureCache(transit_mount_path: string, TransitConfigureCacheRequest: TransitConfigureCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitConfigureCacheRaw({ transit_mount_path: transit_mount_path, TransitConfigureCacheRequest: TransitConfigureCacheRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Configure a named encryption key
     */
    async transitConfigureKeyRaw(requestParameters: SecretsApiTransitConfigureKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitConfigureKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitConfigureKey().'
            );
        }

        if (requestParameters['TransitConfigureKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitConfigureKeyRequest',
                'Required parameter "TransitConfigureKeyRequest" was null or undefined when calling transitConfigureKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/config`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitConfigureKeyRequestToJSON(requestParameters['TransitConfigureKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure a named encryption key
     */
    async transitConfigureKey(name: string, transit_mount_path: string, TransitConfigureKeyRequest: TransitConfigureKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitConfigureKeyRaw({ name: name, transit_mount_path: transit_mount_path, TransitConfigureKeyRequest: TransitConfigureKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitConfigureKeysRaw(requestParameters: SecretsApiTransitConfigureKeysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitConfigureKeys().'
            );
        }

        if (requestParameters['TransitConfigureKeysRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitConfigureKeysRequest',
                'Required parameter "TransitConfigureKeysRequest" was null or undefined when calling transitConfigureKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/config/keys`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitConfigureKeysRequestToJSON(requestParameters['TransitConfigureKeysRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitConfigureKeys(transit_mount_path: string, TransitConfigureKeysRequest: TransitConfigureKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitConfigureKeysRaw({ transit_mount_path: transit_mount_path, TransitConfigureKeysRequest: TransitConfigureKeysRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitCreateKeyRaw(requestParameters: SecretsApiTransitCreateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitCreateKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitCreateKey().'
            );
        }

        if (requestParameters['TransitCreateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitCreateKeyRequest',
                'Required parameter "TransitCreateKeyRequest" was null or undefined when calling transitCreateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitCreateKeyRequestToJSON(requestParameters['TransitCreateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitCreateKey(name: string, transit_mount_path: string, TransitCreateKeyRequest: TransitCreateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitCreateKeyRaw({ name: name, transit_mount_path: transit_mount_path, TransitCreateKeyRequest: TransitCreateKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Decrypt a ciphertext value using a named key
     */
    async transitDecryptRaw(requestParameters: SecretsApiTransitDecryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitDecrypt().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitDecrypt().'
            );
        }

        if (requestParameters['TransitDecryptRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitDecryptRequest',
                'Required parameter "TransitDecryptRequest" was null or undefined when calling transitDecrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/decrypt/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitDecryptRequestToJSON(requestParameters['TransitDecryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decrypt a ciphertext value using a named key
     */
    async transitDecrypt(name: string, transit_mount_path: string, TransitDecryptRequest: TransitDecryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitDecryptRaw({ name: name, transit_mount_path: transit_mount_path, TransitDecryptRequest: TransitDecryptRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitDeleteKeyRaw(requestParameters: SecretsApiTransitDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitDeleteKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitDeleteKey(name: string, transit_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitDeleteKeyRaw({ name: name, transit_mount_path: transit_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Encrypt a plaintext value or a batch of plaintext blocks using a named key
     */
    async transitEncryptRaw(requestParameters: SecretsApiTransitEncryptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitEncrypt().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitEncrypt().'
            );
        }

        if (requestParameters['TransitEncryptRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitEncryptRequest',
                'Required parameter "TransitEncryptRequest" was null or undefined when calling transitEncrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/encrypt/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitEncryptRequestToJSON(requestParameters['TransitEncryptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Encrypt a plaintext value or a batch of plaintext blocks using a named key
     */
    async transitEncrypt(name: string, transit_mount_path: string, TransitEncryptRequest: TransitEncryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitEncryptRaw({ name: name, transit_mount_path: transit_mount_path, TransitEncryptRequest: TransitEncryptRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Export named encryption or signing key
     */
    async transitExportKeyRaw(requestParameters: SecretsApiTransitExportKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitExportKey().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling transitExportKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitExportKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/export/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export named encryption or signing key
     */
    async transitExportKey(name: string, type: string, transit_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitExportKeyRaw({ name: name, type: type, transit_mount_path: transit_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Export named encryption or signing key
     */
    async transitExportKeyVersionRaw(requestParameters: SecretsApiTransitExportKeyVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitExportKeyVersion().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling transitExportKeyVersion().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling transitExportKeyVersion().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitExportKeyVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/export/{type}/{name}/{version}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export named encryption or signing key
     */
    async transitExportKeyVersion(name: string, type: string, version: string, transit_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitExportKeyVersionRaw({ name: name, type: type, version: version, transit_mount_path: transit_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitGenerateCmacRaw(requestParameters: SecretsApiTransitGenerateCmacOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateCmac().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitGenerateCmac().'
            );
        }

        if (requestParameters['TransitGenerateCmacRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitGenerateCmacRequest',
                'Required parameter "TransitGenerateCmacRequest" was null or undefined when calling transitGenerateCmac().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/cmac/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateCmacRequestToJSON(requestParameters['TransitGenerateCmacRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitGenerateCmac(name: string, transit_mount_path: string, TransitGenerateCmacRequest: TransitGenerateCmacRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateCmacRaw({ name: name, transit_mount_path: transit_mount_path, TransitGenerateCmacRequest: TransitGenerateCmacRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitGenerateCmacWithMacLengthRaw(requestParameters: SecretsApiTransitGenerateCmacWithMacLengthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateCmacWithMacLength().'
            );
        }

        if (requestParameters['url_mac_length'] == null) {
            throw new runtime.RequiredError(
                'url_mac_length',
                'Required parameter "url_mac_length" was null or undefined when calling transitGenerateCmacWithMacLength().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitGenerateCmacWithMacLength().'
            );
        }

        if (requestParameters['TransitGenerateCmacWithMacLengthRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitGenerateCmacWithMacLengthRequest',
                'Required parameter "TransitGenerateCmacWithMacLengthRequest" was null or undefined when calling transitGenerateCmacWithMacLength().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/cmac/{name}/{url_mac_length}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"url_mac_length"}}`, encodeURIComponent(String(requestParameters['url_mac_length']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateCmacWithMacLengthRequestToJSON(requestParameters['TransitGenerateCmacWithMacLengthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitGenerateCmacWithMacLength(name: string, url_mac_length: string, transit_mount_path: string, TransitGenerateCmacWithMacLengthRequest: TransitGenerateCmacWithMacLengthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateCmacWithMacLengthRaw({ name: name, url_mac_length: url_mac_length, transit_mount_path: transit_mount_path, TransitGenerateCmacWithMacLengthRequest: TransitGenerateCmacWithMacLengthRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitGenerateCsrForKeyRaw(requestParameters: SecretsApiTransitGenerateCsrForKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateCsrForKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitGenerateCsrForKey().'
            );
        }

        if (requestParameters['TransitGenerateCsrForKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitGenerateCsrForKeyRequest',
                'Required parameter "TransitGenerateCsrForKeyRequest" was null or undefined when calling transitGenerateCsrForKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/csr`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateCsrForKeyRequestToJSON(requestParameters['TransitGenerateCsrForKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitGenerateCsrForKey(name: string, transit_mount_path: string, TransitGenerateCsrForKeyRequest: TransitGenerateCsrForKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateCsrForKeyRaw({ name: name, transit_mount_path: transit_mount_path, TransitGenerateCsrForKeyRequest: TransitGenerateCsrForKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate a data key
     */
    async transitGenerateDataKeyRaw(requestParameters: SecretsApiTransitGenerateDataKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateDataKey().'
            );
        }

        if (requestParameters['plaintext'] == null) {
            throw new runtime.RequiredError(
                'plaintext',
                'Required parameter "plaintext" was null or undefined when calling transitGenerateDataKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitGenerateDataKey().'
            );
        }

        if (requestParameters['TransitGenerateDataKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitGenerateDataKeyRequest',
                'Required parameter "TransitGenerateDataKeyRequest" was null or undefined when calling transitGenerateDataKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/datakey/{plaintext}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"plaintext"}}`, encodeURIComponent(String(requestParameters['plaintext']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateDataKeyRequestToJSON(requestParameters['TransitGenerateDataKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a data key
     */
    async transitGenerateDataKey(name: string, plaintext: string, transit_mount_path: string, TransitGenerateDataKeyRequest: TransitGenerateDataKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateDataKeyRaw({ name: name, plaintext: plaintext, transit_mount_path: transit_mount_path, TransitGenerateDataKeyRequest: TransitGenerateDataKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate an HMAC for input data using the named key
     */
    async transitGenerateHmacRaw(requestParameters: SecretsApiTransitGenerateHmacOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateHmac().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitGenerateHmac().'
            );
        }

        if (requestParameters['TransitGenerateHmacRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitGenerateHmacRequest',
                'Required parameter "TransitGenerateHmacRequest" was null or undefined when calling transitGenerateHmac().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/hmac/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateHmacRequestToJSON(requestParameters['TransitGenerateHmacRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate an HMAC for input data using the named key
     */
    async transitGenerateHmac(name: string, transit_mount_path: string, TransitGenerateHmacRequest: TransitGenerateHmacRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateHmacRaw({ name: name, transit_mount_path: transit_mount_path, TransitGenerateHmacRequest: TransitGenerateHmacRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate an HMAC for input data using the named key
     */
    async transitGenerateHmacWithAlgorithmRaw(requestParameters: SecretsApiTransitGenerateHmacWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitGenerateHmacWithAlgorithm().'
            );
        }

        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling transitGenerateHmacWithAlgorithm().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitGenerateHmacWithAlgorithm().'
            );
        }

        if (requestParameters['TransitGenerateHmacWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitGenerateHmacWithAlgorithmRequest',
                'Required parameter "TransitGenerateHmacWithAlgorithmRequest" was null or undefined when calling transitGenerateHmacWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/hmac/{name}/{urlalgorithm}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateHmacWithAlgorithmRequestToJSON(requestParameters['TransitGenerateHmacWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate an HMAC for input data using the named key
     */
    async transitGenerateHmacWithAlgorithm(name: string, urlalgorithm: string, transit_mount_path: string, TransitGenerateHmacWithAlgorithmRequest: TransitGenerateHmacWithAlgorithmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateHmacWithAlgorithmRaw({ name: name, urlalgorithm: urlalgorithm, transit_mount_path: transit_mount_path, TransitGenerateHmacWithAlgorithmRequest: TransitGenerateHmacWithAlgorithmRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomRaw(requestParameters: SecretsApiTransitGenerateRandomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitGenerateRandom().'
            );
        }

        if (requestParameters['TransitGenerateRandomRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitGenerateRandomRequest',
                'Required parameter "TransitGenerateRandomRequest" was null or undefined when calling transitGenerateRandom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/random`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateRandomRequestToJSON(requestParameters['TransitGenerateRandomRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandom(transit_mount_path: string, TransitGenerateRandomRequest: TransitGenerateRandomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateRandomRaw({ transit_mount_path: transit_mount_path, TransitGenerateRandomRequest: TransitGenerateRandomRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithBytesRaw(requestParameters: SecretsApiTransitGenerateRandomWithBytesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['urlbytes'] == null) {
            throw new runtime.RequiredError(
                'urlbytes',
                'Required parameter "urlbytes" was null or undefined when calling transitGenerateRandomWithBytes().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitGenerateRandomWithBytes().'
            );
        }

        if (requestParameters['TransitGenerateRandomWithBytesRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitGenerateRandomWithBytesRequest',
                'Required parameter "TransitGenerateRandomWithBytesRequest" was null or undefined when calling transitGenerateRandomWithBytes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/random/{urlbytes}`.replace(`{${"urlbytes"}}`, encodeURIComponent(String(requestParameters['urlbytes']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateRandomWithBytesRequestToJSON(requestParameters['TransitGenerateRandomWithBytesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithBytes(urlbytes: string, transit_mount_path: string, TransitGenerateRandomWithBytesRequest: TransitGenerateRandomWithBytesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateRandomWithBytesRaw({ urlbytes: urlbytes, transit_mount_path: transit_mount_path, TransitGenerateRandomWithBytesRequest: TransitGenerateRandomWithBytesRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithSourceRaw(requestParameters: SecretsApiTransitGenerateRandomWithSourceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling transitGenerateRandomWithSource().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitGenerateRandomWithSource().'
            );
        }

        if (requestParameters['TransitGenerateRandomWithSourceRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitGenerateRandomWithSourceRequest',
                'Required parameter "TransitGenerateRandomWithSourceRequest" was null or undefined when calling transitGenerateRandomWithSource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/random/{source}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateRandomWithSourceRequestToJSON(requestParameters['TransitGenerateRandomWithSourceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithSource(source: string, transit_mount_path: string, TransitGenerateRandomWithSourceRequest: TransitGenerateRandomWithSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateRandomWithSourceRaw({ source: source, transit_mount_path: transit_mount_path, TransitGenerateRandomWithSourceRequest: TransitGenerateRandomWithSourceRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithSourceAndBytesRaw(requestParameters: SecretsApiTransitGenerateRandomWithSourceAndBytesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().'
            );
        }

        if (requestParameters['urlbytes'] == null) {
            throw new runtime.RequiredError(
                'urlbytes',
                'Required parameter "urlbytes" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().'
            );
        }

        if (requestParameters['TransitGenerateRandomWithSourceAndBytesRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitGenerateRandomWithSourceAndBytesRequest',
                'Required parameter "TransitGenerateRandomWithSourceAndBytesRequest" was null or undefined when calling transitGenerateRandomWithSourceAndBytes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/random/{source}/{urlbytes}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"urlbytes"}}`, encodeURIComponent(String(requestParameters['urlbytes']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitGenerateRandomWithSourceAndBytesRequestToJSON(requestParameters['TransitGenerateRandomWithSourceAndBytesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate random bytes
     */
    async transitGenerateRandomWithSourceAndBytes(source: string, urlbytes: string, transit_mount_path: string, TransitGenerateRandomWithSourceAndBytesRequest: TransitGenerateRandomWithSourceAndBytesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitGenerateRandomWithSourceAndBytesRaw({ source: source, urlbytes: urlbytes, transit_mount_path: transit_mount_path, TransitGenerateRandomWithSourceAndBytesRequest: TransitGenerateRandomWithSourceAndBytesRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate a hash sum for input data
     */
    async transitHashRaw(requestParameters: SecretsApiTransitHashOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitHash().'
            );
        }

        if (requestParameters['TransitHashRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitHashRequest',
                'Required parameter "TransitHashRequest" was null or undefined when calling transitHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/hash`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitHashRequestToJSON(requestParameters['TransitHashRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a hash sum for input data
     */
    async transitHash(transit_mount_path: string, TransitHashRequest: TransitHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitHashRaw({ transit_mount_path: transit_mount_path, TransitHashRequest: TransitHashRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate a hash sum for input data
     */
    async transitHashWithAlgorithmRaw(requestParameters: SecretsApiTransitHashWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling transitHashWithAlgorithm().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitHashWithAlgorithm().'
            );
        }

        if (requestParameters['TransitHashWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitHashWithAlgorithmRequest',
                'Required parameter "TransitHashWithAlgorithmRequest" was null or undefined when calling transitHashWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/hash/{urlalgorithm}`.replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitHashWithAlgorithmRequestToJSON(requestParameters['TransitHashWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a hash sum for input data
     */
    async transitHashWithAlgorithm(urlalgorithm: string, transit_mount_path: string, TransitHashWithAlgorithmRequest: TransitHashWithAlgorithmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitHashWithAlgorithmRaw({ urlalgorithm: urlalgorithm, transit_mount_path: transit_mount_path, TransitHashWithAlgorithmRequest: TransitHashWithAlgorithmRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Imports an externally-generated key into a new transit key
     */
    async transitImportKeyRaw(requestParameters: SecretsApiTransitImportKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitImportKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitImportKey().'
            );
        }

        if (requestParameters['TransitImportKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitImportKeyRequest',
                'Required parameter "TransitImportKeyRequest" was null or undefined when calling transitImportKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/import`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitImportKeyRequestToJSON(requestParameters['TransitImportKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Imports an externally-generated key into a new transit key
     */
    async transitImportKey(name: string, transit_mount_path: string, TransitImportKeyRequest: TransitImportKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitImportKeyRaw({ name: name, transit_mount_path: transit_mount_path, TransitImportKeyRequest: TransitImportKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Imports an externally-generated key into an existing imported key
     */
    async transitImportKeyVersionRaw(requestParameters: SecretsApiTransitImportKeyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitImportKeyVersion().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitImportKeyVersion().'
            );
        }

        if (requestParameters['TransitImportKeyVersionRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitImportKeyVersionRequest',
                'Required parameter "TransitImportKeyVersionRequest" was null or undefined when calling transitImportKeyVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/import_version`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitImportKeyVersionRequestToJSON(requestParameters['TransitImportKeyVersionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Imports an externally-generated key into an existing imported key
     */
    async transitImportKeyVersion(name: string, transit_mount_path: string, TransitImportKeyVersionRequest: TransitImportKeyVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitImportKeyVersionRaw({ name: name, transit_mount_path: transit_mount_path, TransitImportKeyVersionRequest: TransitImportKeyVersionRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Managed named encryption keys
     */
    async transitListKeysRaw(requestParameters: SecretsApiTransitListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitListKeys().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling transitListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/keys/`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Managed named encryption keys
     */
    async transitListKeys(transit_mount_path: string, list: TransitListKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.transitListKeysRaw({ transit_mount_path: transit_mount_path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Returns the size of the active cache
     */
    async transitReadCacheConfigurationRaw(requestParameters: SecretsApiTransitReadCacheConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitReadCacheConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/cache-config`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the size of the active cache
     */
    async transitReadCacheConfiguration(transit_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitReadCacheConfigurationRaw({ transit_mount_path: transit_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitReadKeyRaw(requestParameters: SecretsApiTransitReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitReadKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitReadKey(name: string, transit_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitReadKeyRaw({ name: name, transit_mount_path: transit_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitReadKeysConfigurationRaw(requestParameters: SecretsApiTransitReadKeysConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitReadKeysConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/config/keys`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitReadKeysConfiguration(transit_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitReadKeysConfigurationRaw({ transit_mount_path: transit_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Returns the public key to use for wrapping imported keys
     */
    async transitReadWrappingKeyRaw(requestParameters: SecretsApiTransitReadWrappingKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitReadWrappingKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{transit_mount_path}/wrapping_key`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the public key to use for wrapping imported keys
     */
    async transitReadWrappingKey(transit_mount_path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitReadWrappingKeyRaw({ transit_mount_path: transit_mount_path }, initOverrides);
        return await response.value();
    }

    /**
     * Restore the named key
     */
    async transitRestoreAndRenameKeyRaw(requestParameters: SecretsApiTransitRestoreAndRenameKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitRestoreAndRenameKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitRestoreAndRenameKey().'
            );
        }

        if (requestParameters['TransitRestoreAndRenameKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitRestoreAndRenameKeyRequest',
                'Required parameter "TransitRestoreAndRenameKeyRequest" was null or undefined when calling transitRestoreAndRenameKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/restore/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitRestoreAndRenameKeyRequestToJSON(requestParameters['TransitRestoreAndRenameKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore the named key
     */
    async transitRestoreAndRenameKey(name: string, transit_mount_path: string, TransitRestoreAndRenameKeyRequest: TransitRestoreAndRenameKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitRestoreAndRenameKeyRaw({ name: name, transit_mount_path: transit_mount_path, TransitRestoreAndRenameKeyRequest: TransitRestoreAndRenameKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Restore the named key
     */
    async transitRestoreKeyRaw(requestParameters: SecretsApiTransitRestoreKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitRestoreKey().'
            );
        }

        if (requestParameters['TransitRestoreKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitRestoreKeyRequest',
                'Required parameter "TransitRestoreKeyRequest" was null or undefined when calling transitRestoreKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/restore`.replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitRestoreKeyRequestToJSON(requestParameters['TransitRestoreKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore the named key
     */
    async transitRestoreKey(transit_mount_path: string, TransitRestoreKeyRequest: TransitRestoreKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitRestoreKeyRaw({ transit_mount_path: transit_mount_path, TransitRestoreKeyRequest: TransitRestoreKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Rewrap ciphertext
     */
    async transitRewrapRaw(requestParameters: SecretsApiTransitRewrapOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitRewrap().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitRewrap().'
            );
        }

        if (requestParameters['TransitRewrapRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitRewrapRequest',
                'Required parameter "TransitRewrapRequest" was null or undefined when calling transitRewrap().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/rewrap/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitRewrapRequestToJSON(requestParameters['TransitRewrapRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rewrap ciphertext
     */
    async transitRewrap(name: string, transit_mount_path: string, TransitRewrapRequest: TransitRewrapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitRewrapRaw({ name: name, transit_mount_path: transit_mount_path, TransitRewrapRequest: TransitRewrapRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Rotate named encryption key
     */
    async transitRotateKeyRaw(requestParameters: SecretsApiTransitRotateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitRotateKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitRotateKey().'
            );
        }

        if (requestParameters['TransitRotateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitRotateKeyRequest',
                'Required parameter "TransitRotateKeyRequest" was null or undefined when calling transitRotateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitRotateKeyRequestToJSON(requestParameters['TransitRotateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rotate named encryption key
     */
    async transitRotateKey(name: string, transit_mount_path: string, TransitRotateKeyRequest: TransitRotateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitRotateKeyRaw({ name: name, transit_mount_path: transit_mount_path, TransitRotateKeyRequest: TransitRotateKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async transitSetCertificateForKeyRaw(requestParameters: SecretsApiTransitSetCertificateForKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitSetCertificateForKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitSetCertificateForKey().'
            );
        }

        if (requestParameters['TransitSetCertificateForKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitSetCertificateForKeyRequest',
                'Required parameter "TransitSetCertificateForKeyRequest" was null or undefined when calling transitSetCertificateForKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/set-certificate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitSetCertificateForKeyRequestToJSON(requestParameters['TransitSetCertificateForKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transitSetCertificateForKey(name: string, transit_mount_path: string, TransitSetCertificateForKeyRequest: TransitSetCertificateForKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitSetCertificateForKeyRaw({ name: name, transit_mount_path: transit_mount_path, TransitSetCertificateForKeyRequest: TransitSetCertificateForKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate a signature for input data using the named key
     */
    async transitSignRaw(requestParameters: SecretsApiTransitSignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitSign().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitSign().'
            );
        }

        if (requestParameters['TransitSignRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitSignRequest',
                'Required parameter "TransitSignRequest" was null or undefined when calling transitSign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/sign/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitSignRequestToJSON(requestParameters['TransitSignRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a signature for input data using the named key
     */
    async transitSign(name: string, transit_mount_path: string, TransitSignRequest: TransitSignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitSignRaw({ name: name, transit_mount_path: transit_mount_path, TransitSignRequest: TransitSignRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate a signature for input data using the named key
     */
    async transitSignWithAlgorithmRaw(requestParameters: SecretsApiTransitSignWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitSignWithAlgorithm().'
            );
        }

        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling transitSignWithAlgorithm().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitSignWithAlgorithm().'
            );
        }

        if (requestParameters['TransitSignWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitSignWithAlgorithmRequest',
                'Required parameter "TransitSignWithAlgorithmRequest" was null or undefined when calling transitSignWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/sign/{name}/{urlalgorithm}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitSignWithAlgorithmRequestToJSON(requestParameters['TransitSignWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate a signature for input data using the named key
     */
    async transitSignWithAlgorithm(name: string, urlalgorithm: string, transit_mount_path: string, TransitSignWithAlgorithmRequest: TransitSignWithAlgorithmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitSignWithAlgorithmRaw({ name: name, urlalgorithm: urlalgorithm, transit_mount_path: transit_mount_path, TransitSignWithAlgorithmRequest: TransitSignWithAlgorithmRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Trim key versions of a named key
     */
    async transitTrimKeyRaw(requestParameters: SecretsApiTransitTrimKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitTrimKey().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitTrimKey().'
            );
        }

        if (requestParameters['TransitTrimKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitTrimKeyRequest',
                'Required parameter "TransitTrimKeyRequest" was null or undefined when calling transitTrimKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/keys/{name}/trim`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitTrimKeyRequestToJSON(requestParameters['TransitTrimKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Trim key versions of a named key
     */
    async transitTrimKey(name: string, transit_mount_path: string, TransitTrimKeyRequest: TransitTrimKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitTrimKeyRaw({ name: name, transit_mount_path: transit_mount_path, TransitTrimKeyRequest: TransitTrimKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    async transitVerifyRaw(requestParameters: SecretsApiTransitVerifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitVerify().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitVerify().'
            );
        }

        if (requestParameters['TransitVerifyRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitVerifyRequest',
                'Required parameter "TransitVerifyRequest" was null or undefined when calling transitVerify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/verify/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitVerifyRequestToJSON(requestParameters['TransitVerifyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    async transitVerify(name: string, transit_mount_path: string, TransitVerifyRequest: TransitVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitVerifyRaw({ name: name, transit_mount_path: transit_mount_path, TransitVerifyRequest: TransitVerifyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    async transitVerifyWithAlgorithmRaw(requestParameters: SecretsApiTransitVerifyWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling transitVerifyWithAlgorithm().'
            );
        }

        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling transitVerifyWithAlgorithm().'
            );
        }

        if (requestParameters['transit_mount_path'] == null) {
            throw new runtime.RequiredError(
                'transit_mount_path',
                'Required parameter "transit_mount_path" was null or undefined when calling transitVerifyWithAlgorithm().'
            );
        }

        if (requestParameters['TransitVerifyWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'TransitVerifyWithAlgorithmRequest',
                'Required parameter "TransitVerifyWithAlgorithmRequest" was null or undefined when calling transitVerifyWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{transit_mount_path}/verify/{name}/{urlalgorithm}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))).replace(`{${"transit_mount_path"}}`, encodeURIComponent(String(requestParameters['transit_mount_path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransitVerifyWithAlgorithmRequestToJSON(requestParameters['TransitVerifyWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify a signature or HMAC for input data created using the named key
     */
    async transitVerifyWithAlgorithm(name: string, urlalgorithm: string, transit_mount_path: string, TransitVerifyWithAlgorithmRequest: TransitVerifyWithAlgorithmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.transitVerifyWithAlgorithmRaw({ name: name, urlalgorithm: urlalgorithm, transit_mount_path: transit_mount_path, TransitVerifyWithAlgorithmRequest: TransitVerifyWithAlgorithmRequest }, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum AliCloudListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AwsListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AwsListStaticRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum AzureListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum ConsulListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum CubbyholeListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum DatabaseListConnectionsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum DatabaseListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum DatabaseListStaticRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudKmsListKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListImpersonatedAccountsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListImpersonatedAccounts2ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListRolesetsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListRolesets2ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListStaticAccountsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleCloudListStaticAccounts2ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KeyManagementListKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KeyManagementListKeysInKmsProviderListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KeyManagementListKmsProvidersListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KeyManagementListKmsProvidersForKeyListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KmipListClientCertificatesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KmipListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KmipListScopesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KubernetesListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KvV1ListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum KvV2ListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapLibraryListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapLibraryListLibraryPathListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapLibraryListLibraryPath0ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListDynamicRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListRolePathListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListRolePath0ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListStaticRolePathListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListStaticRolePath0ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum LdapListStaticRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum MongoDbAtlasListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum NomadListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiGenerateIntermediateExportedEnum {
    INTERNAL = 'internal',
    EXTERNAL = 'external',
    KMS = 'kms'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiGenerateRootExportedEnum {
    INTERNAL = 'internal',
    EXTERNAL = 'external',
    KMS = 'kms'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiIssuersGenerateIntermediateExportedEnum {
    INTERNAL = 'internal',
    EXTERNAL = 'external',
    KMS = 'kms'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiIssuersGenerateRootExportedEnum {
    INTERNAL = 'internal',
    EXTERNAL = 'external',
    KMS = 'kms'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListAcmeAccountKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListCertMetadataListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListCertsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListCertsRevocationQueueListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListEabKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListIssuersListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListRevokedCertsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiListUnifiedRevokedCertsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PkiRotateRootExportedEnum {
    INTERNAL = 'internal',
    EXTERNAL = 'external',
    KMS = 'kms'
}
/**
  * @export
  * @enum {string}
  */
export enum RabbitMqListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SshListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TerraformCloudListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TotpListKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TransformListAlphabetsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TransformListFpeTransformationsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TransformListMaskingTransformationsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TransformListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TransformListStoresListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TransformListTemplatesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TransformListTokenizationKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TransformListTokenizationTransformationsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TransformListTransformationsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum TransitListKeysListEnum {
    TRUE = 'true'
}
