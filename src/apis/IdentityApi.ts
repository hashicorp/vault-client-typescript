/**
 * Copyright (c) HashiCorp, Inc.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AliasCreateRequest,
  AliasUpdateByIdRequest,
  EntitiesCreateDuplicatesRequest,
  EntityAliasCreateDuplicatesRequest,
  EntityAliasesCreateDuplicatesRequest,
  EntityBatchDeleteRequest,
  EntityCreateAliasRequest,
  EntityCreateRequest,
  EntityLookUpRequest,
  EntityMergeRequest,
  EntityUpdateAliasByIdRequest,
  EntityUpdateByIdRequest,
  EntityUpdateByNameRequest,
  GroupCreateAliasRequest,
  GroupCreateRequest,
  GroupLookUpRequest,
  GroupUpdateAliasByIdRequest,
  GroupUpdateByIdRequest,
  GroupUpdateByNameRequest,
  GroupsCreateDuplicatesRequest,
  MfaAdminDestroyTotpSecretRequest,
  MfaAdminGenerateTotpSecretRequest,
  MfaCreateDuoMethodRequest,
  MfaCreateOktaMethodRequest,
  MfaCreatePingIdMethodRequest,
  MfaCreateTotpMethodRequest,
  MfaGenerateTotpSecretRequest,
  MfaUpdateDuoMethodRequest,
  MfaUpdateOktaMethodRequest,
  MfaUpdatePingIdMethodRequest,
  MfaUpdateTotpMethodRequest,
  MfaWriteLoginEnforcementRequest,
  OidcConfigureRequest,
  OidcIntrospectRequest,
  OidcProviderAuthorizeWithParametersRequest,
  OidcProviderTokenRequest,
  OidcRotateKeyRequest,
  OidcWriteAssignmentRequest,
  OidcWriteClientRequest,
  OidcWriteKeyRequest,
  OidcWriteProviderRequest,
  OidcWriteRoleRequest,
  OidcWriteScopeRequest,
  PersonaCreateRequest,
  PersonaUpdateByIdRequest,
  StandardListResponse,
} from '../models/index';
import {
    AliasCreateRequestFromJSON,
    AliasCreateRequestToJSON,
    AliasUpdateByIdRequestFromJSON,
    AliasUpdateByIdRequestToJSON,
    EntitiesCreateDuplicatesRequestFromJSON,
    EntitiesCreateDuplicatesRequestToJSON,
    EntityAliasCreateDuplicatesRequestFromJSON,
    EntityAliasCreateDuplicatesRequestToJSON,
    EntityAliasesCreateDuplicatesRequestFromJSON,
    EntityAliasesCreateDuplicatesRequestToJSON,
    EntityBatchDeleteRequestFromJSON,
    EntityBatchDeleteRequestToJSON,
    EntityCreateAliasRequestFromJSON,
    EntityCreateAliasRequestToJSON,
    EntityCreateRequestFromJSON,
    EntityCreateRequestToJSON,
    EntityLookUpRequestFromJSON,
    EntityLookUpRequestToJSON,
    EntityMergeRequestFromJSON,
    EntityMergeRequestToJSON,
    EntityUpdateAliasByIdRequestFromJSON,
    EntityUpdateAliasByIdRequestToJSON,
    EntityUpdateByIdRequestFromJSON,
    EntityUpdateByIdRequestToJSON,
    EntityUpdateByNameRequestFromJSON,
    EntityUpdateByNameRequestToJSON,
    GroupCreateAliasRequestFromJSON,
    GroupCreateAliasRequestToJSON,
    GroupCreateRequestFromJSON,
    GroupCreateRequestToJSON,
    GroupLookUpRequestFromJSON,
    GroupLookUpRequestToJSON,
    GroupUpdateAliasByIdRequestFromJSON,
    GroupUpdateAliasByIdRequestToJSON,
    GroupUpdateByIdRequestFromJSON,
    GroupUpdateByIdRequestToJSON,
    GroupUpdateByNameRequestFromJSON,
    GroupUpdateByNameRequestToJSON,
    GroupsCreateDuplicatesRequestFromJSON,
    GroupsCreateDuplicatesRequestToJSON,
    MfaAdminDestroyTotpSecretRequestFromJSON,
    MfaAdminDestroyTotpSecretRequestToJSON,
    MfaAdminGenerateTotpSecretRequestFromJSON,
    MfaAdminGenerateTotpSecretRequestToJSON,
    MfaCreateDuoMethodRequestFromJSON,
    MfaCreateDuoMethodRequestToJSON,
    MfaCreateOktaMethodRequestFromJSON,
    MfaCreateOktaMethodRequestToJSON,
    MfaCreatePingIdMethodRequestFromJSON,
    MfaCreatePingIdMethodRequestToJSON,
    MfaCreateTotpMethodRequestFromJSON,
    MfaCreateTotpMethodRequestToJSON,
    MfaGenerateTotpSecretRequestFromJSON,
    MfaGenerateTotpSecretRequestToJSON,
    MfaUpdateDuoMethodRequestFromJSON,
    MfaUpdateDuoMethodRequestToJSON,
    MfaUpdateOktaMethodRequestFromJSON,
    MfaUpdateOktaMethodRequestToJSON,
    MfaUpdatePingIdMethodRequestFromJSON,
    MfaUpdatePingIdMethodRequestToJSON,
    MfaUpdateTotpMethodRequestFromJSON,
    MfaUpdateTotpMethodRequestToJSON,
    MfaWriteLoginEnforcementRequestFromJSON,
    MfaWriteLoginEnforcementRequestToJSON,
    OidcConfigureRequestFromJSON,
    OidcConfigureRequestToJSON,
    OidcIntrospectRequestFromJSON,
    OidcIntrospectRequestToJSON,
    OidcProviderAuthorizeWithParametersRequestFromJSON,
    OidcProviderAuthorizeWithParametersRequestToJSON,
    OidcProviderTokenRequestFromJSON,
    OidcProviderTokenRequestToJSON,
    OidcRotateKeyRequestFromJSON,
    OidcRotateKeyRequestToJSON,
    OidcWriteAssignmentRequestFromJSON,
    OidcWriteAssignmentRequestToJSON,
    OidcWriteClientRequestFromJSON,
    OidcWriteClientRequestToJSON,
    OidcWriteKeyRequestFromJSON,
    OidcWriteKeyRequestToJSON,
    OidcWriteProviderRequestFromJSON,
    OidcWriteProviderRequestToJSON,
    OidcWriteRoleRequestFromJSON,
    OidcWriteRoleRequestToJSON,
    OidcWriteScopeRequestFromJSON,
    OidcWriteScopeRequestToJSON,
    PersonaCreateRequestFromJSON,
    PersonaCreateRequestToJSON,
    PersonaUpdateByIdRequestFromJSON,
    PersonaUpdateByIdRequestToJSON,
    StandardListResponseFromJSON,
    StandardListResponseToJSON,
} from '../models/index';

export interface IdentityApiAliasCreateOperationRequest {
    AliasCreateRequest: AliasCreateRequest;
}

export interface IdentityApiAliasDeleteByIdRequest {
    id: string;
}

export interface IdentityApiAliasListByIdRequest {
    list: AliasListByIdListEnum;
}

export interface IdentityApiAliasReadByIdRequest {
    id: string;
}

export interface IdentityApiAliasUpdateByIdOperationRequest {
    id: string;
    AliasUpdateByIdRequest: AliasUpdateByIdRequest;
}

export interface IdentityApiEntitiesCreateDuplicatesOperationRequest {
    EntitiesCreateDuplicatesRequest: EntitiesCreateDuplicatesRequest;
}

export interface IdentityApiEntityAliasCreateDuplicatesOperationRequest {
    EntityAliasCreateDuplicatesRequest: EntityAliasCreateDuplicatesRequest;
}

export interface IdentityApiEntityAliasesCreateDuplicatesOperationRequest {
    EntityAliasesCreateDuplicatesRequest: EntityAliasesCreateDuplicatesRequest;
}

export interface IdentityApiEntityBatchDeleteOperationRequest {
    EntityBatchDeleteRequest: EntityBatchDeleteRequest;
}

export interface IdentityApiEntityCreateOperationRequest {
    EntityCreateRequest: EntityCreateRequest;
}

export interface IdentityApiEntityCreateAliasOperationRequest {
    EntityCreateAliasRequest: EntityCreateAliasRequest;
}

export interface IdentityApiEntityDeleteAliasByIdRequest {
    id: string;
}

export interface IdentityApiEntityDeleteByIdRequest {
    id: string;
}

export interface IdentityApiEntityDeleteByNameRequest {
    name: string;
}

export interface IdentityApiEntityListAliasesByIdRequest {
    list: EntityListAliasesByIdListEnum;
}

export interface IdentityApiEntityListByIdRequest {
    list: EntityListByIdListEnum;
}

export interface IdentityApiEntityListByNameRequest {
    list: EntityListByNameListEnum;
}

export interface IdentityApiEntityListFromStorageRequest {
    list: EntityListFromStorageListEnum;
}

export interface IdentityApiEntityLookUpOperationRequest {
    EntityLookUpRequest: EntityLookUpRequest;
}

export interface IdentityApiEntityMergeOperationRequest {
    EntityMergeRequest: EntityMergeRequest;
}

export interface IdentityApiEntityReadAliasByIdRequest {
    id: string;
}

export interface IdentityApiEntityReadByIdRequest {
    id: string;
}

export interface IdentityApiEntityReadByNameRequest {
    name: string;
}

export interface IdentityApiEntityUpdateAliasByIdOperationRequest {
    id: string;
    EntityUpdateAliasByIdRequest: EntityUpdateAliasByIdRequest;
}

export interface IdentityApiEntityUpdateByIdOperationRequest {
    id: string;
    EntityUpdateByIdRequest: EntityUpdateByIdRequest;
}

export interface IdentityApiEntityUpdateByNameOperationRequest {
    name: string;
    EntityUpdateByNameRequest: EntityUpdateByNameRequest;
}

export interface IdentityApiGroupCreateOperationRequest {
    GroupCreateRequest: GroupCreateRequest;
}

export interface IdentityApiGroupCreateAliasOperationRequest {
    GroupCreateAliasRequest: GroupCreateAliasRequest;
}

export interface IdentityApiGroupDeleteAliasByIdRequest {
    id: string;
}

export interface IdentityApiGroupDeleteByIdRequest {
    id: string;
}

export interface IdentityApiGroupDeleteByNameRequest {
    name: string;
}

export interface IdentityApiGroupListAliasesByIdRequest {
    list: GroupListAliasesByIdListEnum;
}

export interface IdentityApiGroupListByIdRequest {
    list: GroupListByIdListEnum;
}

export interface IdentityApiGroupListByNameRequest {
    list: GroupListByNameListEnum;
}

export interface IdentityApiGroupListFromStorageRequest {
    list: GroupListFromStorageListEnum;
}

export interface IdentityApiGroupLookUpOperationRequest {
    GroupLookUpRequest: GroupLookUpRequest;
}

export interface IdentityApiGroupReadAliasByIdRequest {
    id: string;
}

export interface IdentityApiGroupReadByIdRequest {
    id: string;
}

export interface IdentityApiGroupReadByNameRequest {
    name: string;
}

export interface IdentityApiGroupUpdateAliasByIdOperationRequest {
    id: string;
    GroupUpdateAliasByIdRequest: GroupUpdateAliasByIdRequest;
}

export interface IdentityApiGroupUpdateByIdOperationRequest {
    id: string;
    GroupUpdateByIdRequest: GroupUpdateByIdRequest;
}

export interface IdentityApiGroupUpdateByNameOperationRequest {
    name: string;
    GroupUpdateByNameRequest: GroupUpdateByNameRequest;
}

export interface IdentityApiGroupsCreateDuplicatesOperationRequest {
    GroupsCreateDuplicatesRequest: GroupsCreateDuplicatesRequest;
}

export interface IdentityApiMfaAdminDestroyTotpSecretOperationRequest {
    MfaAdminDestroyTotpSecretRequest: MfaAdminDestroyTotpSecretRequest;
}

export interface IdentityApiMfaAdminGenerateTotpSecretOperationRequest {
    MfaAdminGenerateTotpSecretRequest: MfaAdminGenerateTotpSecretRequest;
}

export interface IdentityApiMfaCreateDuoMethodOperationRequest {
    MfaCreateDuoMethodRequest: MfaCreateDuoMethodRequest;
}

export interface IdentityApiMfaCreateOktaMethodOperationRequest {
    MfaCreateOktaMethodRequest: MfaCreateOktaMethodRequest;
}

export interface IdentityApiMfaCreatePingIdMethodOperationRequest {
    MfaCreatePingIdMethodRequest: MfaCreatePingIdMethodRequest;
}

export interface IdentityApiMfaCreateTotpMethodOperationRequest {
    MfaCreateTotpMethodRequest: MfaCreateTotpMethodRequest;
}

export interface IdentityApiMfaDeleteDuoMethodRequest {
    method_id: string;
}

export interface IdentityApiMfaDeleteLoginEnforcementRequest {
    name: string;
}

export interface IdentityApiMfaDeleteOktaMethodRequest {
    method_id: string;
}

export interface IdentityApiMfaDeletePingIdMethodRequest {
    method_id: string;
}

export interface IdentityApiMfaDeleteTotpMethodRequest {
    method_id: string;
}

export interface IdentityApiMfaGenerateTotpSecretOperationRequest {
    MfaGenerateTotpSecretRequest: MfaGenerateTotpSecretRequest;
}

export interface IdentityApiMfaListDuoMethodsRequest {
    list: MfaListDuoMethodsListEnum;
}

export interface IdentityApiMfaListLoginEnforcementsRequest {
    list: MfaListLoginEnforcementsListEnum;
}

export interface IdentityApiMfaListMethodsRequest {
    list: MfaListMethodsListEnum;
}

export interface IdentityApiMfaListOktaMethodsRequest {
    list: MfaListOktaMethodsListEnum;
}

export interface IdentityApiMfaListPingIdMethodsRequest {
    list: MfaListPingIdMethodsListEnum;
}

export interface IdentityApiMfaListTotpMethodsRequest {
    list: MfaListTotpMethodsListEnum;
}

export interface IdentityApiMfaReadDuoMethodRequest {
    method_id: string;
}

export interface IdentityApiMfaReadLoginEnforcementRequest {
    name: string;
}

export interface IdentityApiMfaReadMethodRequest {
    method_id: string;
}

export interface IdentityApiMfaReadOktaMethodRequest {
    method_id: string;
}

export interface IdentityApiMfaReadPingIdMethodRequest {
    method_id: string;
}

export interface IdentityApiMfaReadTotpMethodRequest {
    method_id: string;
}

export interface IdentityApiMfaUpdateDuoMethodOperationRequest {
    method_id: string;
    MfaUpdateDuoMethodRequest: MfaUpdateDuoMethodRequest;
}

export interface IdentityApiMfaUpdateOktaMethodOperationRequest {
    method_id: string;
    MfaUpdateOktaMethodRequest: MfaUpdateOktaMethodRequest;
}

export interface IdentityApiMfaUpdatePingIdMethodOperationRequest {
    method_id: string;
    MfaUpdatePingIdMethodRequest: MfaUpdatePingIdMethodRequest;
}

export interface IdentityApiMfaUpdateTotpMethodOperationRequest {
    method_id: string;
    MfaUpdateTotpMethodRequest: MfaUpdateTotpMethodRequest;
}

export interface IdentityApiMfaWriteLoginEnforcementOperationRequest {
    name: string;
    MfaWriteLoginEnforcementRequest: MfaWriteLoginEnforcementRequest;
}

export interface IdentityApiOidcConfigureOperationRequest {
    OidcConfigureRequest: OidcConfigureRequest;
}

export interface IdentityApiOidcDeleteAssignmentRequest {
    name: string;
}

export interface IdentityApiOidcDeleteClientRequest {
    name: string;
}

export interface IdentityApiOidcDeleteKeyRequest {
    name: string;
}

export interface IdentityApiOidcDeleteProviderRequest {
    name: string;
}

export interface IdentityApiOidcDeleteRoleRequest {
    name: string;
}

export interface IdentityApiOidcDeleteScopeRequest {
    name: string;
}

export interface IdentityApiOidcGenerateTokenRequest {
    name: string;
}

export interface IdentityApiOidcIntrospectOperationRequest {
    OidcIntrospectRequest: OidcIntrospectRequest;
}

export interface IdentityApiOidcListAssignmentsRequest {
    list: OidcListAssignmentsListEnum;
}

export interface IdentityApiOidcListClientsRequest {
    list: OidcListClientsListEnum;
}

export interface IdentityApiOidcListKeysRequest {
    list: OidcListKeysListEnum;
}

export interface IdentityApiOidcListProvidersRequest {
    list: OidcListProvidersListEnum;
    allowed_client_id?: string;
}

export interface IdentityApiOidcListRolesRequest {
    list: OidcListRolesListEnum;
}

export interface IdentityApiOidcListScopesRequest {
    list: OidcListScopesListEnum;
}

export interface IdentityApiOidcProviderAuthorizeRequest {
    name: string;
    client_id?: string;
    code_challenge?: string;
    code_challenge_method?: string;
    max_age?: number;
    nonce?: string;
    redirect_uri?: string;
    response_type?: string;
    scope?: string;
    state?: string;
}

export interface IdentityApiOidcProviderAuthorizeWithParametersOperationRequest {
    name: string;
    OidcProviderAuthorizeWithParametersRequest: OidcProviderAuthorizeWithParametersRequest;
}

export interface IdentityApiOidcProviderTokenOperationRequest {
    name: string;
    OidcProviderTokenRequest: OidcProviderTokenRequest;
}

export interface IdentityApiOidcProviderUserInfoRequest {
    name: string;
}

export interface IdentityApiOidcProviderUserInfo2Request {
    name: string;
}

export interface IdentityApiOidcReadAssignmentRequest {
    name: string;
}

export interface IdentityApiOidcReadClientRequest {
    name: string;
}

export interface IdentityApiOidcReadKeyRequest {
    name: string;
}

export interface IdentityApiOidcReadOidcChildWellKnownKeysRequest {
    child: string;
}

export interface IdentityApiOidcReadOidcChildWellKnownOpenidConfigurationRequest {
    child: string;
}

export interface IdentityApiOidcReadProviderRequest {
    name: string;
}

export interface IdentityApiOidcReadProviderOpenIdConfigurationRequest {
    name: string;
}

export interface IdentityApiOidcReadProviderPublicKeysRequest {
    name: string;
}

export interface IdentityApiOidcReadRoleRequest {
    name: string;
}

export interface IdentityApiOidcReadScopeRequest {
    name: string;
}

export interface IdentityApiOidcRotateKeyOperationRequest {
    name: string;
    OidcRotateKeyRequest: OidcRotateKeyRequest;
}

export interface IdentityApiOidcWriteAssignmentOperationRequest {
    name: string;
    OidcWriteAssignmentRequest: OidcWriteAssignmentRequest;
}

export interface IdentityApiOidcWriteClientOperationRequest {
    name: string;
    OidcWriteClientRequest: OidcWriteClientRequest;
}

export interface IdentityApiOidcWriteKeyOperationRequest {
    name: string;
    OidcWriteKeyRequest: OidcWriteKeyRequest;
}

export interface IdentityApiOidcWriteProviderOperationRequest {
    name: string;
    OidcWriteProviderRequest: OidcWriteProviderRequest;
}

export interface IdentityApiOidcWriteRoleOperationRequest {
    name: string;
    OidcWriteRoleRequest: OidcWriteRoleRequest;
}

export interface IdentityApiOidcWriteScopeOperationRequest {
    name: string;
    OidcWriteScopeRequest: OidcWriteScopeRequest;
}

export interface IdentityApiPersonaCreateOperationRequest {
    PersonaCreateRequest: PersonaCreateRequest;
}

export interface IdentityApiPersonaDeleteByIdRequest {
    id: string;
}

export interface IdentityApiPersonaListByIdRequest {
    list: PersonaListByIdListEnum;
}

export interface IdentityApiPersonaReadByIdRequest {
    id: string;
}

export interface IdentityApiPersonaUpdateByIdOperationRequest {
    id: string;
    PersonaUpdateByIdRequest: PersonaUpdateByIdRequest;
}

/**
 * 
 */
export class IdentityApi extends runtime.BaseAPI {

    /**
     * Create a new alias.
     */
    async aliasCreateRaw(requestParameters: IdentityApiAliasCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['AliasCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'AliasCreateRequest',
                'Required parameter "AliasCreateRequest" was null or undefined when calling aliasCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/alias`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliasCreateRequestToJSON(requestParameters['AliasCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new alias.
     */
    async aliasCreate(AliasCreateRequest: AliasCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliasCreateRaw({ AliasCreateRequest: AliasCreateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async aliasDeleteByIdRaw(requestParameters: IdentityApiAliasDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling aliasDeleteById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliasDeleteById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliasDeleteByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * List all the alias IDs.
     */
    async aliasListByIdRaw(requestParameters: IdentityApiAliasListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling aliasListById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/alias/id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List all the alias IDs.
     */
    async aliasListById(list: AliasListByIdListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.aliasListByIdRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async aliasReadByIdRaw(requestParameters: IdentityApiAliasReadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling aliasReadById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliasReadById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliasReadByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async aliasUpdateByIdRaw(requestParameters: IdentityApiAliasUpdateByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling aliasUpdateById().'
            );
        }

        if (requestParameters['AliasUpdateByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'AliasUpdateByIdRequest',
                'Required parameter "AliasUpdateByIdRequest" was null or undefined when calling aliasUpdateById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliasUpdateByIdRequestToJSON(requestParameters['AliasUpdateByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aliasUpdateById(id: string, AliasUpdateByIdRequest: AliasUpdateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.aliasUpdateByIdRaw({ id: id, AliasUpdateByIdRequest: AliasUpdateByIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entitiesCreateDuplicatesRaw(requestParameters: IdentityApiEntitiesCreateDuplicatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['EntitiesCreateDuplicatesRequest'] == null) {
            throw new runtime.RequiredError(
                'EntitiesCreateDuplicatesRequest',
                'Required parameter "EntitiesCreateDuplicatesRequest" was null or undefined when calling entitiesCreateDuplicates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/duplicate/entities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitiesCreateDuplicatesRequestToJSON(requestParameters['EntitiesCreateDuplicatesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entitiesCreateDuplicates(EntitiesCreateDuplicatesRequest: EntitiesCreateDuplicatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entitiesCreateDuplicatesRaw({ EntitiesCreateDuplicatesRequest: EntitiesCreateDuplicatesRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityAliasCreateDuplicatesRaw(requestParameters: IdentityApiEntityAliasCreateDuplicatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['EntityAliasCreateDuplicatesRequest'] == null) {
            throw new runtime.RequiredError(
                'EntityAliasCreateDuplicatesRequest',
                'Required parameter "EntityAliasCreateDuplicatesRequest" was null or undefined when calling entityAliasCreateDuplicates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/duplicate/local-entity-alias`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityAliasCreateDuplicatesRequestToJSON(requestParameters['EntityAliasCreateDuplicatesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityAliasCreateDuplicates(EntityAliasCreateDuplicatesRequest: EntityAliasCreateDuplicatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityAliasCreateDuplicatesRaw({ EntityAliasCreateDuplicatesRequest: EntityAliasCreateDuplicatesRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityAliasesCreateDuplicatesRaw(requestParameters: IdentityApiEntityAliasesCreateDuplicatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['EntityAliasesCreateDuplicatesRequest'] == null) {
            throw new runtime.RequiredError(
                'EntityAliasesCreateDuplicatesRequest',
                'Required parameter "EntityAliasesCreateDuplicatesRequest" was null or undefined when calling entityAliasesCreateDuplicates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/duplicate/entity-aliases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityAliasesCreateDuplicatesRequestToJSON(requestParameters['EntityAliasesCreateDuplicatesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityAliasesCreateDuplicates(EntityAliasesCreateDuplicatesRequest: EntityAliasesCreateDuplicatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityAliasesCreateDuplicatesRaw({ EntityAliasesCreateDuplicatesRequest: EntityAliasesCreateDuplicatesRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityBatchDeleteRaw(requestParameters: IdentityApiEntityBatchDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['EntityBatchDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'EntityBatchDeleteRequest',
                'Required parameter "EntityBatchDeleteRequest" was null or undefined when calling entityBatchDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity/batch-delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityBatchDeleteRequestToJSON(requestParameters['EntityBatchDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityBatchDelete(EntityBatchDeleteRequest: EntityBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityBatchDeleteRaw({ EntityBatchDeleteRequest: EntityBatchDeleteRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityCreateRaw(requestParameters: IdentityApiEntityCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['EntityCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'EntityCreateRequest',
                'Required parameter "EntityCreateRequest" was null or undefined when calling entityCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityCreateRequestToJSON(requestParameters['EntityCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityCreate(EntityCreateRequest: EntityCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityCreateRaw({ EntityCreateRequest: EntityCreateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new alias.
     */
    async entityCreateAliasRaw(requestParameters: IdentityApiEntityCreateAliasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['EntityCreateAliasRequest'] == null) {
            throw new runtime.RequiredError(
                'EntityCreateAliasRequest',
                'Required parameter "EntityCreateAliasRequest" was null or undefined when calling entityCreateAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity-alias`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityCreateAliasRequestToJSON(requestParameters['EntityCreateAliasRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new alias.
     */
    async entityCreateAlias(EntityCreateAliasRequest: EntityCreateAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityCreateAliasRaw({ EntityCreateAliasRequest: EntityCreateAliasRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityDeleteAliasByIdRaw(requestParameters: IdentityApiEntityDeleteAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling entityDeleteAliasById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityDeleteAliasById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityDeleteAliasByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityDeleteByIdRaw(requestParameters: IdentityApiEntityDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling entityDeleteById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityDeleteById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityDeleteByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityDeleteByNameRaw(requestParameters: IdentityApiEntityDeleteByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling entityDeleteByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityDeleteByName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityDeleteByNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * List all the alias IDs.
     */
    async entityListAliasesByIdRaw(requestParameters: IdentityApiEntityListAliasesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling entityListAliasesById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity-alias/id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List all the alias IDs.
     */
    async entityListAliasesById(list: EntityListAliasesByIdListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.entityListAliasesByIdRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityListByIdRaw(requestParameters: IdentityApiEntityListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling entityListById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async entityListById(list: EntityListByIdListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.entityListByIdRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityListByNameRaw(requestParameters: IdentityApiEntityListByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling entityListByName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/name/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async entityListByName(list: EntityListByNameListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.entityListByNameRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityListFromStorageRaw(requestParameters: IdentityApiEntityListFromStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling entityListFromStorage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/from-storage/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async entityListFromStorage(list: EntityListFromStorageListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.entityListFromStorageRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Query entities based on various properties.
     */
    async entityLookUpRaw(requestParameters: IdentityApiEntityLookUpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['EntityLookUpRequest'] == null) {
            throw new runtime.RequiredError(
                'EntityLookUpRequest',
                'Required parameter "EntityLookUpRequest" was null or undefined when calling entityLookUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/lookup/entity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityLookUpRequestToJSON(requestParameters['EntityLookUpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Query entities based on various properties.
     */
    async entityLookUp(EntityLookUpRequest: EntityLookUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityLookUpRaw({ EntityLookUpRequest: EntityLookUpRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityMergeRaw(requestParameters: IdentityApiEntityMergeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['EntityMergeRequest'] == null) {
            throw new runtime.RequiredError(
                'EntityMergeRequest',
                'Required parameter "EntityMergeRequest" was null or undefined when calling entityMerge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity/merge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityMergeRequestToJSON(requestParameters['EntityMergeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityMerge(EntityMergeRequest: EntityMergeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityMergeRaw({ EntityMergeRequest: EntityMergeRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityReadAliasByIdRaw(requestParameters: IdentityApiEntityReadAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling entityReadAliasById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityReadAliasById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityReadAliasByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityReadByIdRaw(requestParameters: IdentityApiEntityReadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling entityReadById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityReadById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityReadByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityReadByNameRaw(requestParameters: IdentityApiEntityReadByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling entityReadByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/entity/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityReadByName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityReadByNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityUpdateAliasByIdRaw(requestParameters: IdentityApiEntityUpdateAliasByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling entityUpdateAliasById().'
            );
        }

        if (requestParameters['EntityUpdateAliasByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'EntityUpdateAliasByIdRequest',
                'Required parameter "EntityUpdateAliasByIdRequest" was null or undefined when calling entityUpdateAliasById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityUpdateAliasByIdRequestToJSON(requestParameters['EntityUpdateAliasByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityUpdateAliasById(id: string, EntityUpdateAliasByIdRequest: EntityUpdateAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityUpdateAliasByIdRaw({ id: id, EntityUpdateAliasByIdRequest: EntityUpdateAliasByIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityUpdateByIdRaw(requestParameters: IdentityApiEntityUpdateByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling entityUpdateById().'
            );
        }

        if (requestParameters['EntityUpdateByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'EntityUpdateByIdRequest',
                'Required parameter "EntityUpdateByIdRequest" was null or undefined when calling entityUpdateById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityUpdateByIdRequestToJSON(requestParameters['EntityUpdateByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityUpdateById(id: string, EntityUpdateByIdRequest: EntityUpdateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityUpdateByIdRaw({ id: id, EntityUpdateByIdRequest: EntityUpdateByIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async entityUpdateByNameRaw(requestParameters: IdentityApiEntityUpdateByNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling entityUpdateByName().'
            );
        }

        if (requestParameters['EntityUpdateByNameRequest'] == null) {
            throw new runtime.RequiredError(
                'EntityUpdateByNameRequest',
                'Required parameter "EntityUpdateByNameRequest" was null or undefined when calling entityUpdateByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/entity/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityUpdateByNameRequestToJSON(requestParameters['EntityUpdateByNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async entityUpdateByName(name: string, EntityUpdateByNameRequest: EntityUpdateByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.entityUpdateByNameRaw({ name: name, EntityUpdateByNameRequest: EntityUpdateByNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupCreateRaw(requestParameters: IdentityApiGroupCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['GroupCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'GroupCreateRequest',
                'Required parameter "GroupCreateRequest" was null or undefined when calling groupCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupCreateRequestToJSON(requestParameters['GroupCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupCreate(GroupCreateRequest: GroupCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupCreateRaw({ GroupCreateRequest: GroupCreateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupCreateAliasRaw(requestParameters: IdentityApiGroupCreateAliasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['GroupCreateAliasRequest'] == null) {
            throw new runtime.RequiredError(
                'GroupCreateAliasRequest',
                'Required parameter "GroupCreateAliasRequest" was null or undefined when calling groupCreateAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/group-alias`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupCreateAliasRequestToJSON(requestParameters['GroupCreateAliasRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupCreateAlias(GroupCreateAliasRequest: GroupCreateAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupCreateAliasRaw({ GroupCreateAliasRequest: GroupCreateAliasRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupDeleteAliasByIdRaw(requestParameters: IdentityApiGroupDeleteAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupDeleteAliasById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupDeleteAliasById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupDeleteAliasByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupDeleteByIdRaw(requestParameters: IdentityApiGroupDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupDeleteById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupDeleteById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupDeleteByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupDeleteByNameRaw(requestParameters: IdentityApiGroupDeleteByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling groupDeleteByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupDeleteByName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupDeleteByNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * List all the group alias IDs.
     */
    async groupListAliasesByIdRaw(requestParameters: IdentityApiGroupListAliasesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling groupListAliasesById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group-alias/id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List all the group alias IDs.
     */
    async groupListAliasesById(list: GroupListAliasesByIdListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.groupListAliasesByIdRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List all the group IDs.
     */
    async groupListByIdRaw(requestParameters: IdentityApiGroupListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling groupListById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List all the group IDs.
     */
    async groupListById(list: GroupListByIdListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.groupListByIdRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupListByNameRaw(requestParameters: IdentityApiGroupListByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling groupListByName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/name/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async groupListByName(list: GroupListByNameListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.groupListByNameRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupListFromStorageRaw(requestParameters: IdentityApiGroupListFromStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling groupListFromStorage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/from-storage/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async groupListFromStorage(list: GroupListFromStorageListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.groupListFromStorageRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Query groups based on various properties.
     */
    async groupLookUpRaw(requestParameters: IdentityApiGroupLookUpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['GroupLookUpRequest'] == null) {
            throw new runtime.RequiredError(
                'GroupLookUpRequest',
                'Required parameter "GroupLookUpRequest" was null or undefined when calling groupLookUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/lookup/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupLookUpRequestToJSON(requestParameters['GroupLookUpRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Query groups based on various properties.
     */
    async groupLookUp(GroupLookUpRequest: GroupLookUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupLookUpRaw({ GroupLookUpRequest: GroupLookUpRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupReadAliasByIdRaw(requestParameters: IdentityApiGroupReadAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupReadAliasById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupReadAliasById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupReadAliasByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupReadByIdRaw(requestParameters: IdentityApiGroupReadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupReadById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupReadById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupReadByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupReadByNameRaw(requestParameters: IdentityApiGroupReadByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling groupReadByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/group/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupReadByName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupReadByNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupUpdateAliasByIdRaw(requestParameters: IdentityApiGroupUpdateAliasByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupUpdateAliasById().'
            );
        }

        if (requestParameters['GroupUpdateAliasByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'GroupUpdateAliasByIdRequest',
                'Required parameter "GroupUpdateAliasByIdRequest" was null or undefined when calling groupUpdateAliasById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/group-alias/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateAliasByIdRequestToJSON(requestParameters['GroupUpdateAliasByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupUpdateAliasById(id: string, GroupUpdateAliasByIdRequest: GroupUpdateAliasByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupUpdateAliasByIdRaw({ id: id, GroupUpdateAliasByIdRequest: GroupUpdateAliasByIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupUpdateByIdRaw(requestParameters: IdentityApiGroupUpdateByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupUpdateById().'
            );
        }

        if (requestParameters['GroupUpdateByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'GroupUpdateByIdRequest',
                'Required parameter "GroupUpdateByIdRequest" was null or undefined when calling groupUpdateById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/group/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateByIdRequestToJSON(requestParameters['GroupUpdateByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupUpdateById(id: string, GroupUpdateByIdRequest: GroupUpdateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupUpdateByIdRaw({ id: id, GroupUpdateByIdRequest: GroupUpdateByIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupUpdateByNameRaw(requestParameters: IdentityApiGroupUpdateByNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling groupUpdateByName().'
            );
        }

        if (requestParameters['GroupUpdateByNameRequest'] == null) {
            throw new runtime.RequiredError(
                'GroupUpdateByNameRequest',
                'Required parameter "GroupUpdateByNameRequest" was null or undefined when calling groupUpdateByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/group/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateByNameRequestToJSON(requestParameters['GroupUpdateByNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupUpdateByName(name: string, GroupUpdateByNameRequest: GroupUpdateByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupUpdateByNameRaw({ name: name, GroupUpdateByNameRequest: GroupUpdateByNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupsCreateDuplicatesRaw(requestParameters: IdentityApiGroupsCreateDuplicatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['GroupsCreateDuplicatesRequest'] == null) {
            throw new runtime.RequiredError(
                'GroupsCreateDuplicatesRequest',
                'Required parameter "GroupsCreateDuplicatesRequest" was null or undefined when calling groupsCreateDuplicates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/duplicate/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupsCreateDuplicatesRequestToJSON(requestParameters['GroupsCreateDuplicatesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupsCreateDuplicates(GroupsCreateDuplicatesRequest: GroupsCreateDuplicatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.groupsCreateDuplicatesRaw({ GroupsCreateDuplicatesRequest: GroupsCreateDuplicatesRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Destroys a TOTP secret for the given MFA method ID on the given entity
     */
    async mfaAdminDestroyTotpSecretRaw(requestParameters: IdentityApiMfaAdminDestroyTotpSecretOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['MfaAdminDestroyTotpSecretRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaAdminDestroyTotpSecretRequest',
                'Required parameter "MfaAdminDestroyTotpSecretRequest" was null or undefined when calling mfaAdminDestroyTotpSecret().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/totp/admin-destroy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaAdminDestroyTotpSecretRequestToJSON(requestParameters['MfaAdminDestroyTotpSecretRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Destroys a TOTP secret for the given MFA method ID on the given entity
     */
    async mfaAdminDestroyTotpSecret(MfaAdminDestroyTotpSecretRequest: MfaAdminDestroyTotpSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaAdminDestroyTotpSecretRaw({ MfaAdminDestroyTotpSecretRequest: MfaAdminDestroyTotpSecretRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update or create TOTP secret for the given method ID on the given entity.
     */
    async mfaAdminGenerateTotpSecretRaw(requestParameters: IdentityApiMfaAdminGenerateTotpSecretOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['MfaAdminGenerateTotpSecretRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaAdminGenerateTotpSecretRequest',
                'Required parameter "MfaAdminGenerateTotpSecretRequest" was null or undefined when calling mfaAdminGenerateTotpSecret().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/totp/admin-generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaAdminGenerateTotpSecretRequestToJSON(requestParameters['MfaAdminGenerateTotpSecretRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update or create TOTP secret for the given method ID on the given entity.
     */
    async mfaAdminGenerateTotpSecret(MfaAdminGenerateTotpSecretRequest: MfaAdminGenerateTotpSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaAdminGenerateTotpSecretRaw({ MfaAdminGenerateTotpSecretRequest: MfaAdminGenerateTotpSecretRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create the given MFA method
     */
    async mfaCreateDuoMethodRaw(requestParameters: IdentityApiMfaCreateDuoMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['MfaCreateDuoMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaCreateDuoMethodRequest',
                'Required parameter "MfaCreateDuoMethodRequest" was null or undefined when calling mfaCreateDuoMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/duo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaCreateDuoMethodRequestToJSON(requestParameters['MfaCreateDuoMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create the given MFA method
     */
    async mfaCreateDuoMethod(MfaCreateDuoMethodRequest: MfaCreateDuoMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaCreateDuoMethodRaw({ MfaCreateDuoMethodRequest: MfaCreateDuoMethodRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create the given MFA method
     */
    async mfaCreateOktaMethodRaw(requestParameters: IdentityApiMfaCreateOktaMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['MfaCreateOktaMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaCreateOktaMethodRequest',
                'Required parameter "MfaCreateOktaMethodRequest" was null or undefined when calling mfaCreateOktaMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/okta`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaCreateOktaMethodRequestToJSON(requestParameters['MfaCreateOktaMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create the given MFA method
     */
    async mfaCreateOktaMethod(MfaCreateOktaMethodRequest: MfaCreateOktaMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaCreateOktaMethodRaw({ MfaCreateOktaMethodRequest: MfaCreateOktaMethodRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create the given MFA method
     */
    async mfaCreatePingIdMethodRaw(requestParameters: IdentityApiMfaCreatePingIdMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['MfaCreatePingIdMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaCreatePingIdMethodRequest',
                'Required parameter "MfaCreatePingIdMethodRequest" was null or undefined when calling mfaCreatePingIdMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/pingid`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaCreatePingIdMethodRequestToJSON(requestParameters['MfaCreatePingIdMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create the given MFA method
     */
    async mfaCreatePingIdMethod(MfaCreatePingIdMethodRequest: MfaCreatePingIdMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaCreatePingIdMethodRaw({ MfaCreatePingIdMethodRequest: MfaCreatePingIdMethodRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create the given MFA method
     */
    async mfaCreateTotpMethodRaw(requestParameters: IdentityApiMfaCreateTotpMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['MfaCreateTotpMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaCreateTotpMethodRequest',
                'Required parameter "MfaCreateTotpMethodRequest" was null or undefined when calling mfaCreateTotpMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/totp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaCreateTotpMethodRequestToJSON(requestParameters['MfaCreateTotpMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create the given MFA method
     */
    async mfaCreateTotpMethod(MfaCreateTotpMethodRequest: MfaCreateTotpMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaCreateTotpMethodRaw({ MfaCreateTotpMethodRequest: MfaCreateTotpMethodRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeleteDuoMethodRaw(requestParameters: IdentityApiMfaDeleteDuoMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaDeleteDuoMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/duo/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeleteDuoMethod(method_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaDeleteDuoMethodRaw({ method_id: method_id }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a login enforcement
     */
    async mfaDeleteLoginEnforcementRaw(requestParameters: IdentityApiMfaDeleteLoginEnforcementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mfaDeleteLoginEnforcement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/login-enforcement/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a login enforcement
     */
    async mfaDeleteLoginEnforcement(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaDeleteLoginEnforcementRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeleteOktaMethodRaw(requestParameters: IdentityApiMfaDeleteOktaMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaDeleteOktaMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/okta/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeleteOktaMethod(method_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaDeleteOktaMethodRaw({ method_id: method_id }, initOverrides);
        return await response.value();
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeletePingIdMethodRaw(requestParameters: IdentityApiMfaDeletePingIdMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaDeletePingIdMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/pingid/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeletePingIdMethod(method_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaDeletePingIdMethodRaw({ method_id: method_id }, initOverrides);
        return await response.value();
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeleteTotpMethodRaw(requestParameters: IdentityApiMfaDeleteTotpMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaDeleteTotpMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/totp/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the given MFA method
     */
    async mfaDeleteTotpMethod(method_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaDeleteTotpMethodRaw({ method_id: method_id }, initOverrides);
        return await response.value();
    }

    /**
     * Update or create TOTP secret for the given method ID on the given entity.
     */
    async mfaGenerateTotpSecretRaw(requestParameters: IdentityApiMfaGenerateTotpSecretOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['MfaGenerateTotpSecretRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaGenerateTotpSecretRequest',
                'Required parameter "MfaGenerateTotpSecretRequest" was null or undefined when calling mfaGenerateTotpSecret().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/totp/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaGenerateTotpSecretRequestToJSON(requestParameters['MfaGenerateTotpSecretRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update or create TOTP secret for the given method ID on the given entity.
     */
    async mfaGenerateTotpSecret(MfaGenerateTotpSecretRequest: MfaGenerateTotpSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaGenerateTotpSecretRaw({ MfaGenerateTotpSecretRequest: MfaGenerateTotpSecretRequest }, initOverrides);
        return await response.value();
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListDuoMethodsRaw(requestParameters: IdentityApiMfaListDuoMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mfaListDuoMethods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/duo/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListDuoMethods(list: MfaListDuoMethodsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mfaListDuoMethodsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List login enforcements
     */
    async mfaListLoginEnforcementsRaw(requestParameters: IdentityApiMfaListLoginEnforcementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mfaListLoginEnforcements().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/login-enforcement/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List login enforcements
     */
    async mfaListLoginEnforcements(list: MfaListLoginEnforcementsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mfaListLoginEnforcementsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List MFA method configurations for all MFA methods
     */
    async mfaListMethodsRaw(requestParameters: IdentityApiMfaListMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mfaListMethods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List MFA method configurations for all MFA methods
     */
    async mfaListMethods(list: MfaListMethodsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mfaListMethodsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListOktaMethodsRaw(requestParameters: IdentityApiMfaListOktaMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mfaListOktaMethods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/okta/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListOktaMethods(list: MfaListOktaMethodsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mfaListOktaMethodsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListPingIdMethodsRaw(requestParameters: IdentityApiMfaListPingIdMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mfaListPingIdMethods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/pingid/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListPingIdMethods(list: MfaListPingIdMethodsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mfaListPingIdMethodsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListTotpMethodsRaw(requestParameters: IdentityApiMfaListTotpMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling mfaListTotpMethods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/totp/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List MFA method configurations for the given MFA method
     */
    async mfaListTotpMethods(list: MfaListTotpMethodsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.mfaListTotpMethodsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadDuoMethodRaw(requestParameters: IdentityApiMfaReadDuoMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaReadDuoMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/duo/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadDuoMethod(method_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaReadDuoMethodRaw({ method_id: method_id }, initOverrides);
        return await response.value();
    }

    /**
     * Read the current login enforcement
     */
    async mfaReadLoginEnforcementRaw(requestParameters: IdentityApiMfaReadLoginEnforcementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mfaReadLoginEnforcement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/login-enforcement/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current login enforcement
     */
    async mfaReadLoginEnforcement(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaReadLoginEnforcementRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Read the current configuration for the given ID regardless of the MFA method type
     */
    async mfaReadMethodRaw(requestParameters: IdentityApiMfaReadMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaReadMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current configuration for the given ID regardless of the MFA method type
     */
    async mfaReadMethod(method_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaReadMethodRaw({ method_id: method_id }, initOverrides);
        return await response.value();
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadOktaMethodRaw(requestParameters: IdentityApiMfaReadOktaMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaReadOktaMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/okta/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadOktaMethod(method_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaReadOktaMethodRaw({ method_id: method_id }, initOverrides);
        return await response.value();
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadPingIdMethodRaw(requestParameters: IdentityApiMfaReadPingIdMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaReadPingIdMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/pingid/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadPingIdMethod(method_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaReadPingIdMethodRaw({ method_id: method_id }, initOverrides);
        return await response.value();
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadTotpMethodRaw(requestParameters: IdentityApiMfaReadTotpMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaReadTotpMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/mfa/method/totp/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current configuration for the given MFA method
     */
    async mfaReadTotpMethod(method_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaReadTotpMethodRaw({ method_id: method_id }, initOverrides);
        return await response.value();
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdateDuoMethodRaw(requestParameters: IdentityApiMfaUpdateDuoMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaUpdateDuoMethod().'
            );
        }

        if (requestParameters['MfaUpdateDuoMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaUpdateDuoMethodRequest',
                'Required parameter "MfaUpdateDuoMethodRequest" was null or undefined when calling mfaUpdateDuoMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/duo/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaUpdateDuoMethodRequestToJSON(requestParameters['MfaUpdateDuoMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdateDuoMethod(method_id: string, MfaUpdateDuoMethodRequest: MfaUpdateDuoMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaUpdateDuoMethodRaw({ method_id: method_id, MfaUpdateDuoMethodRequest: MfaUpdateDuoMethodRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdateOktaMethodRaw(requestParameters: IdentityApiMfaUpdateOktaMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaUpdateOktaMethod().'
            );
        }

        if (requestParameters['MfaUpdateOktaMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaUpdateOktaMethodRequest',
                'Required parameter "MfaUpdateOktaMethodRequest" was null or undefined when calling mfaUpdateOktaMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/okta/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaUpdateOktaMethodRequestToJSON(requestParameters['MfaUpdateOktaMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdateOktaMethod(method_id: string, MfaUpdateOktaMethodRequest: MfaUpdateOktaMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaUpdateOktaMethodRaw({ method_id: method_id, MfaUpdateOktaMethodRequest: MfaUpdateOktaMethodRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdatePingIdMethodRaw(requestParameters: IdentityApiMfaUpdatePingIdMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaUpdatePingIdMethod().'
            );
        }

        if (requestParameters['MfaUpdatePingIdMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaUpdatePingIdMethodRequest',
                'Required parameter "MfaUpdatePingIdMethodRequest" was null or undefined when calling mfaUpdatePingIdMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/pingid/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaUpdatePingIdMethodRequestToJSON(requestParameters['MfaUpdatePingIdMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdatePingIdMethod(method_id: string, MfaUpdatePingIdMethodRequest: MfaUpdatePingIdMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaUpdatePingIdMethodRaw({ method_id: method_id, MfaUpdatePingIdMethodRequest: MfaUpdatePingIdMethodRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdateTotpMethodRaw(requestParameters: IdentityApiMfaUpdateTotpMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['method_id'] == null) {
            throw new runtime.RequiredError(
                'method_id',
                'Required parameter "method_id" was null or undefined when calling mfaUpdateTotpMethod().'
            );
        }

        if (requestParameters['MfaUpdateTotpMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaUpdateTotpMethodRequest',
                'Required parameter "MfaUpdateTotpMethodRequest" was null or undefined when calling mfaUpdateTotpMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/method/totp/{method_id}`.replace(`{${"method_id"}}`, encodeURIComponent(String(requestParameters['method_id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaUpdateTotpMethodRequestToJSON(requestParameters['MfaUpdateTotpMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the configuration for the given MFA method
     */
    async mfaUpdateTotpMethod(method_id: string, MfaUpdateTotpMethodRequest: MfaUpdateTotpMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaUpdateTotpMethodRaw({ method_id: method_id, MfaUpdateTotpMethodRequest: MfaUpdateTotpMethodRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create or update a login enforcement
     */
    async mfaWriteLoginEnforcementRaw(requestParameters: IdentityApiMfaWriteLoginEnforcementOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling mfaWriteLoginEnforcement().'
            );
        }

        if (requestParameters['MfaWriteLoginEnforcementRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaWriteLoginEnforcementRequest',
                'Required parameter "MfaWriteLoginEnforcementRequest" was null or undefined when calling mfaWriteLoginEnforcement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/mfa/login-enforcement/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaWriteLoginEnforcementRequestToJSON(requestParameters['MfaWriteLoginEnforcementRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create or update a login enforcement
     */
    async mfaWriteLoginEnforcement(name: string, MfaWriteLoginEnforcementRequest: MfaWriteLoginEnforcementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaWriteLoginEnforcementRaw({ name: name, MfaWriteLoginEnforcementRequest: MfaWriteLoginEnforcementRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcConfigureRaw(requestParameters: IdentityApiOidcConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['OidcConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'OidcConfigureRequest',
                'Required parameter "OidcConfigureRequest" was null or undefined when calling oidcConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/config`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcConfigureRequestToJSON(requestParameters['OidcConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcConfigure(OidcConfigureRequest: OidcConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcConfigureRaw({ OidcConfigureRequest: OidcConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcDeleteAssignmentRaw(requestParameters: IdentityApiOidcDeleteAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcDeleteAssignment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/assignment/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcDeleteAssignment(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcDeleteAssignmentRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcDeleteClientRaw(requestParameters: IdentityApiOidcDeleteClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcDeleteClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/client/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcDeleteClient(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcDeleteClientRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * CRUD operations for OIDC keys.
     */
    async oidcDeleteKeyRaw(requestParameters: IdentityApiOidcDeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcDeleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/key/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CRUD operations for OIDC keys.
     */
    async oidcDeleteKey(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcDeleteKeyRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcDeleteProviderRaw(requestParameters: IdentityApiOidcDeleteProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcDeleteProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcDeleteProvider(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcDeleteProviderRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * CRUD operations on OIDC Roles
     */
    async oidcDeleteRoleRaw(requestParameters: IdentityApiOidcDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcDeleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CRUD operations on OIDC Roles
     */
    async oidcDeleteRole(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcDeleteRoleRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcDeleteScopeRaw(requestParameters: IdentityApiOidcDeleteScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcDeleteScope().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/scope/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcDeleteScope(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcDeleteScopeRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Generate an OIDC token
     */
    async oidcGenerateTokenRaw(requestParameters: IdentityApiOidcGenerateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcGenerateToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/token/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate an OIDC token
     */
    async oidcGenerateToken(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcGenerateTokenRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Verify the authenticity of an OIDC token
     */
    async oidcIntrospectRaw(requestParameters: IdentityApiOidcIntrospectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['OidcIntrospectRequest'] == null) {
            throw new runtime.RequiredError(
                'OidcIntrospectRequest',
                'Required parameter "OidcIntrospectRequest" was null or undefined when calling oidcIntrospect().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/introspect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcIntrospectRequestToJSON(requestParameters['OidcIntrospectRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify the authenticity of an OIDC token
     */
    async oidcIntrospect(OidcIntrospectRequest: OidcIntrospectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcIntrospectRaw({ OidcIntrospectRequest: OidcIntrospectRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcListAssignmentsRaw(requestParameters: IdentityApiOidcListAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oidcListAssignments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/assignment/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async oidcListAssignments(list: OidcListAssignmentsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oidcListAssignmentsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcListClientsRaw(requestParameters: IdentityApiOidcListClientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oidcListClients().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/client/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async oidcListClients(list: OidcListClientsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oidcListClientsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List OIDC keys
     */
    async oidcListKeysRaw(requestParameters: IdentityApiOidcListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oidcListKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/key/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List OIDC keys
     */
    async oidcListKeys(list: OidcListKeysListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oidcListKeysRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcListProvidersRaw(requestParameters: IdentityApiOidcListProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oidcListProviders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['allowed_client_id'] != null) {
            queryParameters['allowed_client_id'] = requestParameters['allowed_client_id'];
        }

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async oidcListProviders(list: OidcListProvidersListEnum, allowed_client_id?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oidcListProvidersRaw({ list: list, allowed_client_id: allowed_client_id }, initOverrides);
        return await response.value();
    }

    /**
     * List configured OIDC roles
     */
    async oidcListRolesRaw(requestParameters: IdentityApiOidcListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oidcListRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/role/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List configured OIDC roles
     */
    async oidcListRoles(list: OidcListRolesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oidcListRolesRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcListScopesRaw(requestParameters: IdentityApiOidcListScopesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling oidcListScopes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/scope/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async oidcListScopes(list: OidcListScopesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.oidcListScopesRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcProviderAuthorizeRaw(requestParameters: IdentityApiOidcProviderAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcProviderAuthorize().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['client_id'] != null) {
            queryParameters['client_id'] = requestParameters['client_id'];
        }

        if (requestParameters['code_challenge'] != null) {
            queryParameters['code_challenge'] = requestParameters['code_challenge'];
        }

        if (requestParameters['code_challenge_method'] != null) {
            queryParameters['code_challenge_method'] = requestParameters['code_challenge_method'];
        }

        if (requestParameters['max_age'] != null) {
            queryParameters['max_age'] = requestParameters['max_age'];
        }

        if (requestParameters['nonce'] != null) {
            queryParameters['nonce'] = requestParameters['nonce'];
        }

        if (requestParameters['redirect_uri'] != null) {
            queryParameters['redirect_uri'] = requestParameters['redirect_uri'];
        }

        if (requestParameters['response_type'] != null) {
            queryParameters['response_type'] = requestParameters['response_type'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/authorize`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcProviderAuthorize(name: string, client_id?: string, code_challenge?: string, code_challenge_method?: string, max_age?: number, nonce?: string, redirect_uri?: string, response_type?: string, scope?: string, state?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcProviderAuthorizeRaw({ name: name, client_id: client_id, code_challenge: code_challenge, code_challenge_method: code_challenge_method, max_age: max_age, nonce: nonce, redirect_uri: redirect_uri, response_type: response_type, scope: scope, state: state }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcProviderAuthorizeWithParametersRaw(requestParameters: IdentityApiOidcProviderAuthorizeWithParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcProviderAuthorizeWithParameters().'
            );
        }

        if (requestParameters['OidcProviderAuthorizeWithParametersRequest'] == null) {
            throw new runtime.RequiredError(
                'OidcProviderAuthorizeWithParametersRequest',
                'Required parameter "OidcProviderAuthorizeWithParametersRequest" was null or undefined when calling oidcProviderAuthorizeWithParameters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/authorize`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcProviderAuthorizeWithParametersRequestToJSON(requestParameters['OidcProviderAuthorizeWithParametersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcProviderAuthorizeWithParameters(name: string, OidcProviderAuthorizeWithParametersRequest: OidcProviderAuthorizeWithParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcProviderAuthorizeWithParametersRaw({ name: name, OidcProviderAuthorizeWithParametersRequest: OidcProviderAuthorizeWithParametersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcProviderTokenRaw(requestParameters: IdentityApiOidcProviderTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcProviderToken().'
            );
        }

        if (requestParameters['OidcProviderTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'OidcProviderTokenRequest',
                'Required parameter "OidcProviderTokenRequest" was null or undefined when calling oidcProviderToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcProviderTokenRequestToJSON(requestParameters['OidcProviderTokenRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcProviderToken(name: string, OidcProviderTokenRequest: OidcProviderTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcProviderTokenRaw({ name: name, OidcProviderTokenRequest: OidcProviderTokenRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcProviderUserInfoRaw(requestParameters: IdentityApiOidcProviderUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcProviderUserInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/userinfo`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcProviderUserInfo(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcProviderUserInfoRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcProviderUserInfo2Raw(requestParameters: IdentityApiOidcProviderUserInfo2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcProviderUserInfo2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/userinfo`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcProviderUserInfo2(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcProviderUserInfo2Raw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcReadAssignmentRaw(requestParameters: IdentityApiOidcReadAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadAssignment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/assignment/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadAssignment(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadAssignmentRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcReadClientRaw(requestParameters: IdentityApiOidcReadClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/client/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadClient(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadClientRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcReadConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     * CRUD operations for OIDC keys.
     */
    async oidcReadKeyRaw(requestParameters: IdentityApiOidcReadKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/key/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CRUD operations for OIDC keys.
     */
    async oidcReadKey(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadKeyRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve public keys
     */
    async oidcReadOidcChildWellKnownKeysRaw(requestParameters: IdentityApiOidcReadOidcChildWellKnownKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['child'] == null) {
            throw new runtime.RequiredError(
                'child',
                'Required parameter "child" was null or undefined when calling oidcReadOidcChildWellKnownKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/{child}/.well-known/keys`.replace(`{${"child"}}`, encodeURIComponent(String(requestParameters['child']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve public keys
     */
    async oidcReadOidcChildWellKnownKeys(child: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadOidcChildWellKnownKeysRaw({ child: child }, initOverrides);
        return await response.value();
    }

    /**
     * Query OIDC configurations
     */
    async oidcReadOidcChildWellKnownOpenidConfigurationRaw(requestParameters: IdentityApiOidcReadOidcChildWellKnownOpenidConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['child'] == null) {
            throw new runtime.RequiredError(
                'child',
                'Required parameter "child" was null or undefined when calling oidcReadOidcChildWellKnownOpenidConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/{child}/.well-known/openid-configuration`.replace(`{${"child"}}`, encodeURIComponent(String(requestParameters['child']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Query OIDC configurations
     */
    async oidcReadOidcChildWellKnownOpenidConfiguration(child: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadOidcChildWellKnownOpenidConfigurationRaw({ child: child }, initOverrides);
        return await response.value();
    }

    /**
     * Query OIDC configurations
     */
    async oidcReadOpenIdConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/.well-known/openid-configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Query OIDC configurations
     */
    async oidcReadOpenIdConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadOpenIdConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcReadProviderRaw(requestParameters: IdentityApiOidcReadProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadProvider(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadProviderRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcReadProviderOpenIdConfigurationRaw(requestParameters: IdentityApiOidcReadProviderOpenIdConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadProviderOpenIdConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/.well-known/openid-configuration`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadProviderOpenIdConfiguration(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadProviderOpenIdConfigurationRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcReadProviderPublicKeysRaw(requestParameters: IdentityApiOidcReadProviderPublicKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadProviderPublicKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/provider/{name}/.well-known/keys`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadProviderPublicKeys(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadProviderPublicKeysRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve public keys
     */
    async oidcReadPublicKeysRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/.well-known/keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve public keys
     */
    async oidcReadPublicKeys(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadPublicKeysRaw(initOverrides);
        return await response.value();
    }

    /**
     * CRUD operations on OIDC Roles
     */
    async oidcReadRoleRaw(requestParameters: IdentityApiOidcReadRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CRUD operations on OIDC Roles
     */
    async oidcReadRole(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadRoleRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcReadScopeRaw(requestParameters: IdentityApiOidcReadScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcReadScope().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/oidc/scope/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcReadScope(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcReadScopeRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Rotate a named OIDC key.
     */
    async oidcRotateKeyRaw(requestParameters: IdentityApiOidcRotateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcRotateKey().'
            );
        }

        if (requestParameters['OidcRotateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'OidcRotateKeyRequest',
                'Required parameter "OidcRotateKeyRequest" was null or undefined when calling oidcRotateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/key/{name}/rotate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcRotateKeyRequestToJSON(requestParameters['OidcRotateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rotate a named OIDC key.
     */
    async oidcRotateKey(name: string, OidcRotateKeyRequest: OidcRotateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcRotateKeyRaw({ name: name, OidcRotateKeyRequest: OidcRotateKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcWriteAssignmentRaw(requestParameters: IdentityApiOidcWriteAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcWriteAssignment().'
            );
        }

        if (requestParameters['OidcWriteAssignmentRequest'] == null) {
            throw new runtime.RequiredError(
                'OidcWriteAssignmentRequest',
                'Required parameter "OidcWriteAssignmentRequest" was null or undefined when calling oidcWriteAssignment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/assignment/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcWriteAssignmentRequestToJSON(requestParameters['OidcWriteAssignmentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcWriteAssignment(name: string, OidcWriteAssignmentRequest: OidcWriteAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcWriteAssignmentRaw({ name: name, OidcWriteAssignmentRequest: OidcWriteAssignmentRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcWriteClientRaw(requestParameters: IdentityApiOidcWriteClientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcWriteClient().'
            );
        }

        if (requestParameters['OidcWriteClientRequest'] == null) {
            throw new runtime.RequiredError(
                'OidcWriteClientRequest',
                'Required parameter "OidcWriteClientRequest" was null or undefined when calling oidcWriteClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/client/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcWriteClientRequestToJSON(requestParameters['OidcWriteClientRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcWriteClient(name: string, OidcWriteClientRequest: OidcWriteClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcWriteClientRaw({ name: name, OidcWriteClientRequest: OidcWriteClientRequest }, initOverrides);
        return await response.value();
    }

    /**
     * CRUD operations for OIDC keys.
     */
    async oidcWriteKeyRaw(requestParameters: IdentityApiOidcWriteKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcWriteKey().'
            );
        }

        if (requestParameters['OidcWriteKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'OidcWriteKeyRequest',
                'Required parameter "OidcWriteKeyRequest" was null or undefined when calling oidcWriteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/key/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcWriteKeyRequestToJSON(requestParameters['OidcWriteKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CRUD operations for OIDC keys.
     */
    async oidcWriteKey(name: string, OidcWriteKeyRequest: OidcWriteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcWriteKeyRaw({ name: name, OidcWriteKeyRequest: OidcWriteKeyRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcWriteProviderRaw(requestParameters: IdentityApiOidcWriteProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcWriteProvider().'
            );
        }

        if (requestParameters['OidcWriteProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'OidcWriteProviderRequest',
                'Required parameter "OidcWriteProviderRequest" was null or undefined when calling oidcWriteProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/provider/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcWriteProviderRequestToJSON(requestParameters['OidcWriteProviderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcWriteProvider(name: string, OidcWriteProviderRequest: OidcWriteProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcWriteProviderRaw({ name: name, OidcWriteProviderRequest: OidcWriteProviderRequest }, initOverrides);
        return await response.value();
    }

    /**
     * CRUD operations on OIDC Roles
     */
    async oidcWriteRoleRaw(requestParameters: IdentityApiOidcWriteRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcWriteRole().'
            );
        }

        if (requestParameters['OidcWriteRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'OidcWriteRoleRequest',
                'Required parameter "OidcWriteRoleRequest" was null or undefined when calling oidcWriteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/role/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcWriteRoleRequestToJSON(requestParameters['OidcWriteRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CRUD operations on OIDC Roles
     */
    async oidcWriteRole(name: string, OidcWriteRoleRequest: OidcWriteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcWriteRoleRaw({ name: name, OidcWriteRoleRequest: OidcWriteRoleRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oidcWriteScopeRaw(requestParameters: IdentityApiOidcWriteScopeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling oidcWriteScope().'
            );
        }

        if (requestParameters['OidcWriteScopeRequest'] == null) {
            throw new runtime.RequiredError(
                'OidcWriteScopeRequest',
                'Required parameter "OidcWriteScopeRequest" was null or undefined when calling oidcWriteScope().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/oidc/scope/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcWriteScopeRequestToJSON(requestParameters['OidcWriteScopeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oidcWriteScope(name: string, OidcWriteScopeRequest: OidcWriteScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.oidcWriteScopeRaw({ name: name, OidcWriteScopeRequest: OidcWriteScopeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new alias.
     */
    async personaCreateRaw(requestParameters: IdentityApiPersonaCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['PersonaCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'PersonaCreateRequest',
                'Required parameter "PersonaCreateRequest" was null or undefined when calling personaCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/persona`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonaCreateRequestToJSON(requestParameters['PersonaCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new alias.
     */
    async personaCreate(PersonaCreateRequest: PersonaCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.personaCreateRaw({ PersonaCreateRequest: PersonaCreateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async personaDeleteByIdRaw(requestParameters: IdentityApiPersonaDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling personaDeleteById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/persona/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async personaDeleteById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.personaDeleteByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * List all the alias IDs.
     */
    async personaListByIdRaw(requestParameters: IdentityApiPersonaListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling personaListById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/persona/id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List all the alias IDs.
     */
    async personaListById(list: PersonaListByIdListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.personaListByIdRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async personaReadByIdRaw(requestParameters: IdentityApiPersonaReadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling personaReadById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/identity/persona/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async personaReadById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.personaReadByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async personaUpdateByIdRaw(requestParameters: IdentityApiPersonaUpdateByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling personaUpdateById().'
            );
        }

        if (requestParameters['PersonaUpdateByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'PersonaUpdateByIdRequest',
                'Required parameter "PersonaUpdateByIdRequest" was null or undefined when calling personaUpdateById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identity/persona/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonaUpdateByIdRequestToJSON(requestParameters['PersonaUpdateByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async personaUpdateById(id: string, PersonaUpdateByIdRequest: PersonaUpdateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.personaUpdateByIdRaw({ id: id, PersonaUpdateByIdRequest: PersonaUpdateByIdRequest }, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum AliasListByIdListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum EntityListAliasesByIdListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum EntityListByIdListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum EntityListByNameListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum EntityListFromStorageListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GroupListAliasesByIdListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GroupListByIdListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GroupListByNameListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum GroupListFromStorageListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum MfaListDuoMethodsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum MfaListLoginEnforcementsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum MfaListMethodsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum MfaListOktaMethodsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum MfaListPingIdMethodsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum MfaListTotpMethodsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum OidcListAssignmentsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum OidcListClientsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum OidcListKeysListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum OidcListProvidersListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum OidcListRolesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum OidcListScopesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PersonaListByIdListEnum {
    TRUE = 'true'
}
