/* tslint:disable */
/* eslint-disable */
/**
 * HashiCorp Vault API
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuditingCalculateHashRequest,
  AuditingCalculateHashResponse,
  AuditingEnableDeviceRequest,
  AuditingEnableRequestHeaderRequest,
  AuditingListRequestHeadersResponse,
  AuthEnableMethodRequest,
  AuthReadConfigurationResponse,
  AuthReadTuningInformationResponse,
  AuthTuneConfigurationParametersRequest,
  CollectHostInformationResponse,
  CorsConfigureRequest,
  CorsReadConfigurationResponse,
  CreateCustomMessageRequest,
  DecodeTokenRequest,
  EncryptionKeyConfigureRotationRequest,
  EncryptionKeyReadRotationConfigurationResponse,
  GenerateHashRequest,
  GenerateHashResponse,
  GenerateHashWithAlgorithmRequest,
  GenerateHashWithAlgorithmResponse,
  GenerateRandomRequest,
  GenerateRandomResponse,
  GenerateRandomWithBytesRequest,
  GenerateRandomWithBytesResponse,
  GenerateRandomWithSourceAndBytesRequest,
  GenerateRandomWithSourceAndBytesResponse,
  GenerateRandomWithSourceRequest,
  GenerateRandomWithSourceResponse,
  GenerateUtilizationReportResponse,
  HaStatusResponse,
  InitializeRequest,
  InternalClientActivityConfigureRequest,
  InternalCountEntitiesResponse,
  InternalGenerateOpenApiDocumentWithParametersRequest,
  InternalUiListEnabledFeatureFlagsResponse,
  InternalUiListEnabledVisibleMountsResponse,
  InternalUiListNamespacesResponse,
  InternalUiReadAuthenticatedActiveCustomMessagesResponse,
  InternalUiReadMountInformationResponse,
  InternalUiReadResultantAclResponse,
  InternalUiReadUnauthenticatedActiveCustomMessagesResponse,
  LeaderStatusResponse,
  LeasesCountResponse,
  LeasesListResponse,
  LeasesLookUpResponse,
  LeasesReadLeaseRequest,
  LeasesReadLeaseResponse,
  LeasesRenewLease2Request,
  LeasesRenewLeaseRequest,
  LeasesRenewLeaseWithId2Request,
  LeasesRenewLeaseWithIdRequest,
  LeasesRevokeLease2Request,
  LeasesRevokeLeaseRequest,
  LeasesRevokeLeaseWithId2Request,
  LeasesRevokeLeaseWithIdRequest,
  LeasesRevokeLeaseWithPrefix2Request,
  LeasesRevokeLeaseWithPrefixRequest,
  LoggersUpdateVerbosityLevelForRequest,
  LoggersUpdateVerbosityLevelRequest,
  MfaValidateRequest,
  MountsEnableSecretsEngineRequest,
  MountsReadConfigurationResponse,
  MountsReadTuningInformationResponse,
  MountsTuneConfigurationParametersRequest,
  PluginsCatalogListPluginsResponse,
  PluginsCatalogListPluginsWithTypeResponse,
  PluginsCatalogPinsCreatePinnedVersionRequest,
  PluginsCatalogPinsListPinnedVersionsResponse,
  PluginsCatalogPinsReadPinnedVersionResponse,
  PluginsCatalogReadPluginConfigurationResponse,
  PluginsCatalogReadPluginConfigurationWithTypeResponse,
  PluginsCatalogRegisterPluginRequest,
  PluginsCatalogRegisterPluginWithTypeRequest,
  PluginsReloadBackendsRequest,
  PluginsReloadBackendsResponse,
  PluginsRuntimesCatalogListPluginsRuntimesResponse,
  PluginsRuntimesCatalogReadPluginRuntimeConfigurationResponse,
  PluginsRuntimesCatalogRegisterPluginRuntimeRequest,
  PoliciesGeneratePasswordFromPasswordPolicyResponse,
  PoliciesListAclPolicies2Response,
  PoliciesListAclPolicies3Response,
  PoliciesListAclPoliciesResponse,
  PoliciesReadAclPolicy2Response,
  PoliciesReadAclPolicyResponse,
  PoliciesReadPasswordPolicyResponse,
  PoliciesWriteAclPolicy2Request,
  PoliciesWriteAclPolicyRequest,
  PoliciesWritePasswordPolicyRequest,
  QueryTokenAccessorCapabilitiesRequest,
  QueryTokenCapabilitiesRequest,
  QueryTokenSelfCapabilitiesRequest,
  RateLimitQuotasConfigureRequest,
  RateLimitQuotasReadConfigurationResponse,
  RateLimitQuotasReadResponse,
  RateLimitQuotasWriteRequest,
  RawReadResponse,
  RawWriteRequest,
  ReadWrappingProperties2Response,
  ReadWrappingPropertiesRequest,
  ReadWrappingPropertiesResponse,
  RekeyAttemptInitializeRequest,
  RekeyAttemptInitializeResponse,
  RekeyAttemptReadProgressResponse,
  RekeyAttemptUpdateRequest,
  RekeyAttemptUpdateResponse,
  RekeyReadBackupKeyResponse,
  RekeyReadBackupRecoveryKeyResponse,
  RekeyVerificationCancelResponse,
  RekeyVerificationReadProgressResponse,
  RekeyVerificationUpdateRequest,
  RekeyVerificationUpdateResponse,
  ReloadPluginsRequest,
  ReloadPluginsResponse,
  RemountRequest,
  RemountResponse,
  RemountStatusResponse,
  RewrapRequest,
  RootTokenGenerationInitialize2Request,
  RootTokenGenerationInitialize2Response,
  RootTokenGenerationInitializeRequest,
  RootTokenGenerationInitializeResponse,
  RootTokenGenerationReadProgress2Response,
  RootTokenGenerationReadProgressResponse,
  RootTokenGenerationUpdateRequest,
  RootTokenGenerationUpdateResponse,
  SealStatusResponse,
  StandardListResponse,
  SubscriptionsCreateResponse,
  SubscriptionsListEventsSubscriptionsResponse,
  SubscriptionsReadEventsSubscriptionsResponse,
  SubscriptionsWriteEventsSubscriptionsRequest,
  SubscriptionsWriteEventsSubscriptionsResponse,
  SystemDeleteSyncConfigResponse,
  SystemDeleteSyncGithubAppsNameResponse,
  SystemListSyncAssociationsResponse,
  SystemListSyncDestinationsResponse,
  SystemListSyncDestinationsTypeResponse,
  SystemListSyncGithubAppsResponse,
  SystemPatchNamespacesPathRequest,
  SystemPatchSyncConfigRequest,
  SystemPatchSyncConfigResponse,
  SystemPatchSyncDestinationsAwsSmNameRequest,
  SystemPatchSyncDestinationsAwsSmNameResponse,
  SystemPatchSyncDestinationsAzureKvNameRequest,
  SystemPatchSyncDestinationsAzureKvNameResponse,
  SystemPatchSyncDestinationsGcpSmNameRequest,
  SystemPatchSyncDestinationsGcpSmNameResponse,
  SystemPatchSyncDestinationsGhNameRequest,
  SystemPatchSyncDestinationsGhNameResponse,
  SystemPatchSyncDestinationsInMemNameRequest,
  SystemPatchSyncDestinationsInMemNameResponse,
  SystemPatchSyncDestinationsVercelProjectNameRequest,
  SystemPatchSyncDestinationsVercelProjectNameResponse,
  SystemReadConfigGroupPolicyApplicationResponse,
  SystemReadStorageRaftSnapshotLoadIdResponse,
  SystemReadSyncAssociationsDestinationsResponse,
  SystemReadSyncAssociationsMountSecretNameResponse,
  SystemReadSyncConfigResponse,
  SystemReadSyncDestinationsAwsSmNameResponse,
  SystemReadSyncDestinationsAzureKvNameResponse,
  SystemReadSyncDestinationsGcpSmNameResponse,
  SystemReadSyncDestinationsGhNameResponse,
  SystemReadSyncDestinationsInMemNameResponse,
  SystemReadSyncDestinationsTypeNameAssociationsResponse,
  SystemReadSyncDestinationsVercelProjectNameResponse,
  SystemReadSyncGithubAppsNameResponse,
  SystemWriteConfigControlGroupRequest,
  SystemWriteConfigGroupPolicyApplicationRequest,
  SystemWriteControlGroupAuthorizeRequest,
  SystemWriteControlGroupRequestRequest,
  SystemWriteInternalCountersActivityWriteRequest,
  SystemWriteManagedKeysTypeNameRequest,
  SystemWriteManagedKeysTypeNameTestSignRequest,
  SystemWriteMfaMethodDuoNameRequest,
  SystemWriteMfaMethodOktaNameRequest,
  SystemWriteMfaMethodPingidNameRequest,
  SystemWriteMfaMethodTotpNameAdminDestroyRequest,
  SystemWriteMfaMethodTotpNameAdminGenerateRequest,
  SystemWriteMfaMethodTotpNameRequest,
  SystemWriteNamespacesApiLockUnlockPathRequest,
  SystemWriteNamespacesApiLockUnlockRequest,
  SystemWriteNamespacesPathRequest,
  SystemWritePoliciesEgpNameRequest,
  SystemWritePoliciesRgpNameRequest,
  SystemWriteQuotasLeaseCountNameRequest,
  SystemWriteReplicationDrPrimaryEnableRequest,
  SystemWriteReplicationDrPrimaryRevokeSecondaryRequest,
  SystemWriteReplicationDrPrimarySecondaryTokenRequest,
  SystemWriteReplicationDrSecondaryDisableRequest,
  SystemWriteReplicationDrSecondaryEnableRequest,
  SystemWriteReplicationDrSecondaryMerkleCheckRequest,
  SystemWriteReplicationDrSecondaryOperationTokenDeleteRequest,
  SystemWriteReplicationDrSecondaryPromoteRequest,
  SystemWriteReplicationDrSecondaryRecoverRequest,
  SystemWriteReplicationDrSecondaryReindexRequest,
  SystemWriteReplicationDrSecondaryUpdatePrimaryRequest,
  SystemWriteReplicationForceCorruptionRequest,
  SystemWriteReplicationPerformancePrimaryEnableRequest,
  SystemWriteReplicationPerformancePrimaryPathsFilterIdRequest,
  SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequest,
  SystemWriteReplicationPerformancePrimarySecondaryTokenRequest,
  SystemWriteReplicationPerformanceSecondaryEnableRequest,
  SystemWriteReplicationPerformanceSecondaryPromoteRequest,
  SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest,
  SystemWriteReplicationPrimaryEnableRequest,
  SystemWriteReplicationPrimaryRevokeSecondaryRequest,
  SystemWriteReplicationPrimarySecondaryTokenRequest,
  SystemWriteReplicationReindexRequest,
  SystemWriteReplicationSecondaryEnableRequest,
  SystemWriteReplicationSecondaryPromoteRequest,
  SystemWriteReplicationSecondaryUpdatePrimaryRequest,
  SystemWriteStorageRaftSnapshotAutoConfigNameRequest,
  SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequest,
  SystemWriteStorageRaftSnapshotLoadResponse,
  SystemWriteSyncDestinationsAwsSmNameRequest,
  SystemWriteSyncDestinationsAwsSmNameResponse,
  SystemWriteSyncDestinationsAzureKvNameRequest,
  SystemWriteSyncDestinationsAzureKvNameResponse,
  SystemWriteSyncDestinationsGcpSmNameRequest,
  SystemWriteSyncDestinationsGcpSmNameResponse,
  SystemWriteSyncDestinationsGhNameRequest,
  SystemWriteSyncDestinationsGhNameResponse,
  SystemWriteSyncDestinationsInMemNameRequest,
  SystemWriteSyncDestinationsInMemNameResponse,
  SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequest,
  SystemWriteSyncDestinationsTypeNameAssociationsRemoveResponse,
  SystemWriteSyncDestinationsTypeNameAssociationsSetRequest,
  SystemWriteSyncDestinationsTypeNameAssociationsSetResponse,
  SystemWriteSyncDestinationsVercelProjectNameRequest,
  SystemWriteSyncDestinationsVercelProjectNameResponse,
  SystemWriteSyncGithubAppsNameRequest,
  SystemWriteSyncGithubAppsNameResponse,
  SystemWriteUtilizationRequest,
  SystemWriteUtilizationResponse,
  UiConfigListCustomMessagesResponse,
  UiConfigReadCustomMessageResponse,
  UiConfigUpdateCustomMessageRequest,
  UiConfigUpdateCustomMessageResponse,
  UiHeadersConfigureRequest,
  UiHeadersListResponse,
  UiHeadersReadConfigurationResponse,
  UiLoginDefaultAuthConfigureRequest,
  UiLoginDefaultAuthListResponse,
  UnsealRequest,
  UnsealResponse,
  UnwrapRequest,
  VersionHistoryResponse,
  WellKnownListLabels2Response,
  WellKnownListLabelsResponse,
  WellKnownReadLabelResponse,
} from '../models/index';
import {
    AuditingCalculateHashRequestFromJSON,
    AuditingCalculateHashRequestToJSON,
    AuditingCalculateHashResponseFromJSON,
    AuditingCalculateHashResponseToJSON,
    AuditingEnableDeviceRequestFromJSON,
    AuditingEnableDeviceRequestToJSON,
    AuditingEnableRequestHeaderRequestFromJSON,
    AuditingEnableRequestHeaderRequestToJSON,
    AuditingListRequestHeadersResponseFromJSON,
    AuditingListRequestHeadersResponseToJSON,
    AuthEnableMethodRequestFromJSON,
    AuthEnableMethodRequestToJSON,
    AuthReadConfigurationResponseFromJSON,
    AuthReadConfigurationResponseToJSON,
    AuthReadTuningInformationResponseFromJSON,
    AuthReadTuningInformationResponseToJSON,
    AuthTuneConfigurationParametersRequestFromJSON,
    AuthTuneConfigurationParametersRequestToJSON,
    CollectHostInformationResponseFromJSON,
    CollectHostInformationResponseToJSON,
    CorsConfigureRequestFromJSON,
    CorsConfigureRequestToJSON,
    CorsReadConfigurationResponseFromJSON,
    CorsReadConfigurationResponseToJSON,
    CreateCustomMessageRequestFromJSON,
    CreateCustomMessageRequestToJSON,
    DecodeTokenRequestFromJSON,
    DecodeTokenRequestToJSON,
    EncryptionKeyConfigureRotationRequestFromJSON,
    EncryptionKeyConfigureRotationRequestToJSON,
    EncryptionKeyReadRotationConfigurationResponseFromJSON,
    EncryptionKeyReadRotationConfigurationResponseToJSON,
    GenerateHashRequestFromJSON,
    GenerateHashRequestToJSON,
    GenerateHashResponseFromJSON,
    GenerateHashResponseToJSON,
    GenerateHashWithAlgorithmRequestFromJSON,
    GenerateHashWithAlgorithmRequestToJSON,
    GenerateHashWithAlgorithmResponseFromJSON,
    GenerateHashWithAlgorithmResponseToJSON,
    GenerateRandomRequestFromJSON,
    GenerateRandomRequestToJSON,
    GenerateRandomResponseFromJSON,
    GenerateRandomResponseToJSON,
    GenerateRandomWithBytesRequestFromJSON,
    GenerateRandomWithBytesRequestToJSON,
    GenerateRandomWithBytesResponseFromJSON,
    GenerateRandomWithBytesResponseToJSON,
    GenerateRandomWithSourceAndBytesRequestFromJSON,
    GenerateRandomWithSourceAndBytesRequestToJSON,
    GenerateRandomWithSourceAndBytesResponseFromJSON,
    GenerateRandomWithSourceAndBytesResponseToJSON,
    GenerateRandomWithSourceRequestFromJSON,
    GenerateRandomWithSourceRequestToJSON,
    GenerateRandomWithSourceResponseFromJSON,
    GenerateRandomWithSourceResponseToJSON,
    GenerateUtilizationReportResponseFromJSON,
    GenerateUtilizationReportResponseToJSON,
    HaStatusResponseFromJSON,
    HaStatusResponseToJSON,
    InitializeRequestFromJSON,
    InitializeRequestToJSON,
    InternalClientActivityConfigureRequestFromJSON,
    InternalClientActivityConfigureRequestToJSON,
    InternalCountEntitiesResponseFromJSON,
    InternalCountEntitiesResponseToJSON,
    InternalGenerateOpenApiDocumentWithParametersRequestFromJSON,
    InternalGenerateOpenApiDocumentWithParametersRequestToJSON,
    InternalUiListEnabledFeatureFlagsResponseFromJSON,
    InternalUiListEnabledFeatureFlagsResponseToJSON,
    InternalUiListEnabledVisibleMountsResponseFromJSON,
    InternalUiListEnabledVisibleMountsResponseToJSON,
    InternalUiListNamespacesResponseFromJSON,
    InternalUiListNamespacesResponseToJSON,
    InternalUiReadAuthenticatedActiveCustomMessagesResponseFromJSON,
    InternalUiReadAuthenticatedActiveCustomMessagesResponseToJSON,
    InternalUiReadMountInformationResponseFromJSON,
    InternalUiReadMountInformationResponseToJSON,
    InternalUiReadResultantAclResponseFromJSON,
    InternalUiReadResultantAclResponseToJSON,
    InternalUiReadUnauthenticatedActiveCustomMessagesResponseFromJSON,
    InternalUiReadUnauthenticatedActiveCustomMessagesResponseToJSON,
    LeaderStatusResponseFromJSON,
    LeaderStatusResponseToJSON,
    LeasesCountResponseFromJSON,
    LeasesCountResponseToJSON,
    LeasesListResponseFromJSON,
    LeasesListResponseToJSON,
    LeasesLookUpResponseFromJSON,
    LeasesLookUpResponseToJSON,
    LeasesReadLeaseRequestFromJSON,
    LeasesReadLeaseRequestToJSON,
    LeasesReadLeaseResponseFromJSON,
    LeasesReadLeaseResponseToJSON,
    LeasesRenewLease2RequestFromJSON,
    LeasesRenewLease2RequestToJSON,
    LeasesRenewLeaseRequestFromJSON,
    LeasesRenewLeaseRequestToJSON,
    LeasesRenewLeaseWithId2RequestFromJSON,
    LeasesRenewLeaseWithId2RequestToJSON,
    LeasesRenewLeaseWithIdRequestFromJSON,
    LeasesRenewLeaseWithIdRequestToJSON,
    LeasesRevokeLease2RequestFromJSON,
    LeasesRevokeLease2RequestToJSON,
    LeasesRevokeLeaseRequestFromJSON,
    LeasesRevokeLeaseRequestToJSON,
    LeasesRevokeLeaseWithId2RequestFromJSON,
    LeasesRevokeLeaseWithId2RequestToJSON,
    LeasesRevokeLeaseWithIdRequestFromJSON,
    LeasesRevokeLeaseWithIdRequestToJSON,
    LeasesRevokeLeaseWithPrefix2RequestFromJSON,
    LeasesRevokeLeaseWithPrefix2RequestToJSON,
    LeasesRevokeLeaseWithPrefixRequestFromJSON,
    LeasesRevokeLeaseWithPrefixRequestToJSON,
    LoggersUpdateVerbosityLevelForRequestFromJSON,
    LoggersUpdateVerbosityLevelForRequestToJSON,
    LoggersUpdateVerbosityLevelRequestFromJSON,
    LoggersUpdateVerbosityLevelRequestToJSON,
    MfaValidateRequestFromJSON,
    MfaValidateRequestToJSON,
    MountsEnableSecretsEngineRequestFromJSON,
    MountsEnableSecretsEngineRequestToJSON,
    MountsReadConfigurationResponseFromJSON,
    MountsReadConfigurationResponseToJSON,
    MountsReadTuningInformationResponseFromJSON,
    MountsReadTuningInformationResponseToJSON,
    MountsTuneConfigurationParametersRequestFromJSON,
    MountsTuneConfigurationParametersRequestToJSON,
    PluginsCatalogListPluginsResponseFromJSON,
    PluginsCatalogListPluginsResponseToJSON,
    PluginsCatalogListPluginsWithTypeResponseFromJSON,
    PluginsCatalogListPluginsWithTypeResponseToJSON,
    PluginsCatalogPinsCreatePinnedVersionRequestFromJSON,
    PluginsCatalogPinsCreatePinnedVersionRequestToJSON,
    PluginsCatalogPinsListPinnedVersionsResponseFromJSON,
    PluginsCatalogPinsListPinnedVersionsResponseToJSON,
    PluginsCatalogPinsReadPinnedVersionResponseFromJSON,
    PluginsCatalogPinsReadPinnedVersionResponseToJSON,
    PluginsCatalogReadPluginConfigurationResponseFromJSON,
    PluginsCatalogReadPluginConfigurationResponseToJSON,
    PluginsCatalogReadPluginConfigurationWithTypeResponseFromJSON,
    PluginsCatalogReadPluginConfigurationWithTypeResponseToJSON,
    PluginsCatalogRegisterPluginRequestFromJSON,
    PluginsCatalogRegisterPluginRequestToJSON,
    PluginsCatalogRegisterPluginWithTypeRequestFromJSON,
    PluginsCatalogRegisterPluginWithTypeRequestToJSON,
    PluginsReloadBackendsRequestFromJSON,
    PluginsReloadBackendsRequestToJSON,
    PluginsReloadBackendsResponseFromJSON,
    PluginsReloadBackendsResponseToJSON,
    PluginsRuntimesCatalogListPluginsRuntimesResponseFromJSON,
    PluginsRuntimesCatalogListPluginsRuntimesResponseToJSON,
    PluginsRuntimesCatalogReadPluginRuntimeConfigurationResponseFromJSON,
    PluginsRuntimesCatalogReadPluginRuntimeConfigurationResponseToJSON,
    PluginsRuntimesCatalogRegisterPluginRuntimeRequestFromJSON,
    PluginsRuntimesCatalogRegisterPluginRuntimeRequestToJSON,
    PoliciesGeneratePasswordFromPasswordPolicyResponseFromJSON,
    PoliciesGeneratePasswordFromPasswordPolicyResponseToJSON,
    PoliciesListAclPolicies2ResponseFromJSON,
    PoliciesListAclPolicies2ResponseToJSON,
    PoliciesListAclPolicies3ResponseFromJSON,
    PoliciesListAclPolicies3ResponseToJSON,
    PoliciesListAclPoliciesResponseFromJSON,
    PoliciesListAclPoliciesResponseToJSON,
    PoliciesReadAclPolicy2ResponseFromJSON,
    PoliciesReadAclPolicy2ResponseToJSON,
    PoliciesReadAclPolicyResponseFromJSON,
    PoliciesReadAclPolicyResponseToJSON,
    PoliciesReadPasswordPolicyResponseFromJSON,
    PoliciesReadPasswordPolicyResponseToJSON,
    PoliciesWriteAclPolicy2RequestFromJSON,
    PoliciesWriteAclPolicy2RequestToJSON,
    PoliciesWriteAclPolicyRequestFromJSON,
    PoliciesWriteAclPolicyRequestToJSON,
    PoliciesWritePasswordPolicyRequestFromJSON,
    PoliciesWritePasswordPolicyRequestToJSON,
    QueryTokenAccessorCapabilitiesRequestFromJSON,
    QueryTokenAccessorCapabilitiesRequestToJSON,
    QueryTokenCapabilitiesRequestFromJSON,
    QueryTokenCapabilitiesRequestToJSON,
    QueryTokenSelfCapabilitiesRequestFromJSON,
    QueryTokenSelfCapabilitiesRequestToJSON,
    RateLimitQuotasConfigureRequestFromJSON,
    RateLimitQuotasConfigureRequestToJSON,
    RateLimitQuotasReadConfigurationResponseFromJSON,
    RateLimitQuotasReadConfigurationResponseToJSON,
    RateLimitQuotasReadResponseFromJSON,
    RateLimitQuotasReadResponseToJSON,
    RateLimitQuotasWriteRequestFromJSON,
    RateLimitQuotasWriteRequestToJSON,
    RawReadResponseFromJSON,
    RawReadResponseToJSON,
    RawWriteRequestFromJSON,
    RawWriteRequestToJSON,
    ReadWrappingProperties2ResponseFromJSON,
    ReadWrappingProperties2ResponseToJSON,
    ReadWrappingPropertiesRequestFromJSON,
    ReadWrappingPropertiesRequestToJSON,
    ReadWrappingPropertiesResponseFromJSON,
    ReadWrappingPropertiesResponseToJSON,
    RekeyAttemptInitializeRequestFromJSON,
    RekeyAttemptInitializeRequestToJSON,
    RekeyAttemptInitializeResponseFromJSON,
    RekeyAttemptInitializeResponseToJSON,
    RekeyAttemptReadProgressResponseFromJSON,
    RekeyAttemptReadProgressResponseToJSON,
    RekeyAttemptUpdateRequestFromJSON,
    RekeyAttemptUpdateRequestToJSON,
    RekeyAttemptUpdateResponseFromJSON,
    RekeyAttemptUpdateResponseToJSON,
    RekeyReadBackupKeyResponseFromJSON,
    RekeyReadBackupKeyResponseToJSON,
    RekeyReadBackupRecoveryKeyResponseFromJSON,
    RekeyReadBackupRecoveryKeyResponseToJSON,
    RekeyVerificationCancelResponseFromJSON,
    RekeyVerificationCancelResponseToJSON,
    RekeyVerificationReadProgressResponseFromJSON,
    RekeyVerificationReadProgressResponseToJSON,
    RekeyVerificationUpdateRequestFromJSON,
    RekeyVerificationUpdateRequestToJSON,
    RekeyVerificationUpdateResponseFromJSON,
    RekeyVerificationUpdateResponseToJSON,
    ReloadPluginsRequestFromJSON,
    ReloadPluginsRequestToJSON,
    ReloadPluginsResponseFromJSON,
    ReloadPluginsResponseToJSON,
    RemountRequestFromJSON,
    RemountRequestToJSON,
    RemountResponseFromJSON,
    RemountResponseToJSON,
    RemountStatusResponseFromJSON,
    RemountStatusResponseToJSON,
    RewrapRequestFromJSON,
    RewrapRequestToJSON,
    RootTokenGenerationInitialize2RequestFromJSON,
    RootTokenGenerationInitialize2RequestToJSON,
    RootTokenGenerationInitialize2ResponseFromJSON,
    RootTokenGenerationInitialize2ResponseToJSON,
    RootTokenGenerationInitializeRequestFromJSON,
    RootTokenGenerationInitializeRequestToJSON,
    RootTokenGenerationInitializeResponseFromJSON,
    RootTokenGenerationInitializeResponseToJSON,
    RootTokenGenerationReadProgress2ResponseFromJSON,
    RootTokenGenerationReadProgress2ResponseToJSON,
    RootTokenGenerationReadProgressResponseFromJSON,
    RootTokenGenerationReadProgressResponseToJSON,
    RootTokenGenerationUpdateRequestFromJSON,
    RootTokenGenerationUpdateRequestToJSON,
    RootTokenGenerationUpdateResponseFromJSON,
    RootTokenGenerationUpdateResponseToJSON,
    SealStatusResponseFromJSON,
    SealStatusResponseToJSON,
    StandardListResponseFromJSON,
    StandardListResponseToJSON,
    SubscriptionsCreateResponseFromJSON,
    SubscriptionsCreateResponseToJSON,
    SubscriptionsListEventsSubscriptionsResponseFromJSON,
    SubscriptionsListEventsSubscriptionsResponseToJSON,
    SubscriptionsReadEventsSubscriptionsResponseFromJSON,
    SubscriptionsReadEventsSubscriptionsResponseToJSON,
    SubscriptionsWriteEventsSubscriptionsRequestFromJSON,
    SubscriptionsWriteEventsSubscriptionsRequestToJSON,
    SubscriptionsWriteEventsSubscriptionsResponseFromJSON,
    SubscriptionsWriteEventsSubscriptionsResponseToJSON,
    SystemDeleteSyncConfigResponseFromJSON,
    SystemDeleteSyncConfigResponseToJSON,
    SystemDeleteSyncGithubAppsNameResponseFromJSON,
    SystemDeleteSyncGithubAppsNameResponseToJSON,
    SystemListSyncAssociationsResponseFromJSON,
    SystemListSyncAssociationsResponseToJSON,
    SystemListSyncDestinationsResponseFromJSON,
    SystemListSyncDestinationsResponseToJSON,
    SystemListSyncDestinationsTypeResponseFromJSON,
    SystemListSyncDestinationsTypeResponseToJSON,
    SystemListSyncGithubAppsResponseFromJSON,
    SystemListSyncGithubAppsResponseToJSON,
    SystemPatchNamespacesPathRequestFromJSON,
    SystemPatchNamespacesPathRequestToJSON,
    SystemPatchSyncConfigRequestFromJSON,
    SystemPatchSyncConfigRequestToJSON,
    SystemPatchSyncConfigResponseFromJSON,
    SystemPatchSyncConfigResponseToJSON,
    SystemPatchSyncDestinationsAwsSmNameRequestFromJSON,
    SystemPatchSyncDestinationsAwsSmNameRequestToJSON,
    SystemPatchSyncDestinationsAwsSmNameResponseFromJSON,
    SystemPatchSyncDestinationsAwsSmNameResponseToJSON,
    SystemPatchSyncDestinationsAzureKvNameRequestFromJSON,
    SystemPatchSyncDestinationsAzureKvNameRequestToJSON,
    SystemPatchSyncDestinationsAzureKvNameResponseFromJSON,
    SystemPatchSyncDestinationsAzureKvNameResponseToJSON,
    SystemPatchSyncDestinationsGcpSmNameRequestFromJSON,
    SystemPatchSyncDestinationsGcpSmNameRequestToJSON,
    SystemPatchSyncDestinationsGcpSmNameResponseFromJSON,
    SystemPatchSyncDestinationsGcpSmNameResponseToJSON,
    SystemPatchSyncDestinationsGhNameRequestFromJSON,
    SystemPatchSyncDestinationsGhNameRequestToJSON,
    SystemPatchSyncDestinationsGhNameResponseFromJSON,
    SystemPatchSyncDestinationsGhNameResponseToJSON,
    SystemPatchSyncDestinationsInMemNameRequestFromJSON,
    SystemPatchSyncDestinationsInMemNameRequestToJSON,
    SystemPatchSyncDestinationsInMemNameResponseFromJSON,
    SystemPatchSyncDestinationsInMemNameResponseToJSON,
    SystemPatchSyncDestinationsVercelProjectNameRequestFromJSON,
    SystemPatchSyncDestinationsVercelProjectNameRequestToJSON,
    SystemPatchSyncDestinationsVercelProjectNameResponseFromJSON,
    SystemPatchSyncDestinationsVercelProjectNameResponseToJSON,
    SystemReadConfigGroupPolicyApplicationResponseFromJSON,
    SystemReadConfigGroupPolicyApplicationResponseToJSON,
    SystemReadStorageRaftSnapshotLoadIdResponseFromJSON,
    SystemReadStorageRaftSnapshotLoadIdResponseToJSON,
    SystemReadSyncAssociationsDestinationsResponseFromJSON,
    SystemReadSyncAssociationsDestinationsResponseToJSON,
    SystemReadSyncAssociationsMountSecretNameResponseFromJSON,
    SystemReadSyncAssociationsMountSecretNameResponseToJSON,
    SystemReadSyncConfigResponseFromJSON,
    SystemReadSyncConfigResponseToJSON,
    SystemReadSyncDestinationsAwsSmNameResponseFromJSON,
    SystemReadSyncDestinationsAwsSmNameResponseToJSON,
    SystemReadSyncDestinationsAzureKvNameResponseFromJSON,
    SystemReadSyncDestinationsAzureKvNameResponseToJSON,
    SystemReadSyncDestinationsGcpSmNameResponseFromJSON,
    SystemReadSyncDestinationsGcpSmNameResponseToJSON,
    SystemReadSyncDestinationsGhNameResponseFromJSON,
    SystemReadSyncDestinationsGhNameResponseToJSON,
    SystemReadSyncDestinationsInMemNameResponseFromJSON,
    SystemReadSyncDestinationsInMemNameResponseToJSON,
    SystemReadSyncDestinationsTypeNameAssociationsResponseFromJSON,
    SystemReadSyncDestinationsTypeNameAssociationsResponseToJSON,
    SystemReadSyncDestinationsVercelProjectNameResponseFromJSON,
    SystemReadSyncDestinationsVercelProjectNameResponseToJSON,
    SystemReadSyncGithubAppsNameResponseFromJSON,
    SystemReadSyncGithubAppsNameResponseToJSON,
    SystemWriteConfigControlGroupRequestFromJSON,
    SystemWriteConfigControlGroupRequestToJSON,
    SystemWriteConfigGroupPolicyApplicationRequestFromJSON,
    SystemWriteConfigGroupPolicyApplicationRequestToJSON,
    SystemWriteControlGroupAuthorizeRequestFromJSON,
    SystemWriteControlGroupAuthorizeRequestToJSON,
    SystemWriteControlGroupRequestRequestFromJSON,
    SystemWriteControlGroupRequestRequestToJSON,
    SystemWriteInternalCountersActivityWriteRequestFromJSON,
    SystemWriteInternalCountersActivityWriteRequestToJSON,
    SystemWriteManagedKeysTypeNameRequestFromJSON,
    SystemWriteManagedKeysTypeNameRequestToJSON,
    SystemWriteManagedKeysTypeNameTestSignRequestFromJSON,
    SystemWriteManagedKeysTypeNameTestSignRequestToJSON,
    SystemWriteMfaMethodDuoNameRequestFromJSON,
    SystemWriteMfaMethodDuoNameRequestToJSON,
    SystemWriteMfaMethodOktaNameRequestFromJSON,
    SystemWriteMfaMethodOktaNameRequestToJSON,
    SystemWriteMfaMethodPingidNameRequestFromJSON,
    SystemWriteMfaMethodPingidNameRequestToJSON,
    SystemWriteMfaMethodTotpNameAdminDestroyRequestFromJSON,
    SystemWriteMfaMethodTotpNameAdminDestroyRequestToJSON,
    SystemWriteMfaMethodTotpNameAdminGenerateRequestFromJSON,
    SystemWriteMfaMethodTotpNameAdminGenerateRequestToJSON,
    SystemWriteMfaMethodTotpNameRequestFromJSON,
    SystemWriteMfaMethodTotpNameRequestToJSON,
    SystemWriteNamespacesApiLockUnlockPathRequestFromJSON,
    SystemWriteNamespacesApiLockUnlockPathRequestToJSON,
    SystemWriteNamespacesApiLockUnlockRequestFromJSON,
    SystemWriteNamespacesApiLockUnlockRequestToJSON,
    SystemWriteNamespacesPathRequestFromJSON,
    SystemWriteNamespacesPathRequestToJSON,
    SystemWritePoliciesEgpNameRequestFromJSON,
    SystemWritePoliciesEgpNameRequestToJSON,
    SystemWritePoliciesRgpNameRequestFromJSON,
    SystemWritePoliciesRgpNameRequestToJSON,
    SystemWriteQuotasLeaseCountNameRequestFromJSON,
    SystemWriteQuotasLeaseCountNameRequestToJSON,
    SystemWriteReplicationDrPrimaryEnableRequestFromJSON,
    SystemWriteReplicationDrPrimaryEnableRequestToJSON,
    SystemWriteReplicationDrPrimaryRevokeSecondaryRequestFromJSON,
    SystemWriteReplicationDrPrimaryRevokeSecondaryRequestToJSON,
    SystemWriteReplicationDrPrimarySecondaryTokenRequestFromJSON,
    SystemWriteReplicationDrPrimarySecondaryTokenRequestToJSON,
    SystemWriteReplicationDrSecondaryDisableRequestFromJSON,
    SystemWriteReplicationDrSecondaryDisableRequestToJSON,
    SystemWriteReplicationDrSecondaryEnableRequestFromJSON,
    SystemWriteReplicationDrSecondaryEnableRequestToJSON,
    SystemWriteReplicationDrSecondaryMerkleCheckRequestFromJSON,
    SystemWriteReplicationDrSecondaryMerkleCheckRequestToJSON,
    SystemWriteReplicationDrSecondaryOperationTokenDeleteRequestFromJSON,
    SystemWriteReplicationDrSecondaryOperationTokenDeleteRequestToJSON,
    SystemWriteReplicationDrSecondaryPromoteRequestFromJSON,
    SystemWriteReplicationDrSecondaryPromoteRequestToJSON,
    SystemWriteReplicationDrSecondaryRecoverRequestFromJSON,
    SystemWriteReplicationDrSecondaryRecoverRequestToJSON,
    SystemWriteReplicationDrSecondaryReindexRequestFromJSON,
    SystemWriteReplicationDrSecondaryReindexRequestToJSON,
    SystemWriteReplicationDrSecondaryUpdatePrimaryRequestFromJSON,
    SystemWriteReplicationDrSecondaryUpdatePrimaryRequestToJSON,
    SystemWriteReplicationForceCorruptionRequestFromJSON,
    SystemWriteReplicationForceCorruptionRequestToJSON,
    SystemWriteReplicationPerformancePrimaryEnableRequestFromJSON,
    SystemWriteReplicationPerformancePrimaryEnableRequestToJSON,
    SystemWriteReplicationPerformancePrimaryPathsFilterIdRequestFromJSON,
    SystemWriteReplicationPerformancePrimaryPathsFilterIdRequestToJSON,
    SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequestFromJSON,
    SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequestToJSON,
    SystemWriteReplicationPerformancePrimarySecondaryTokenRequestFromJSON,
    SystemWriteReplicationPerformancePrimarySecondaryTokenRequestToJSON,
    SystemWriteReplicationPerformanceSecondaryEnableRequestFromJSON,
    SystemWriteReplicationPerformanceSecondaryEnableRequestToJSON,
    SystemWriteReplicationPerformanceSecondaryPromoteRequestFromJSON,
    SystemWriteReplicationPerformanceSecondaryPromoteRequestToJSON,
    SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequestFromJSON,
    SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequestToJSON,
    SystemWriteReplicationPrimaryEnableRequestFromJSON,
    SystemWriteReplicationPrimaryEnableRequestToJSON,
    SystemWriteReplicationPrimaryRevokeSecondaryRequestFromJSON,
    SystemWriteReplicationPrimaryRevokeSecondaryRequestToJSON,
    SystemWriteReplicationPrimarySecondaryTokenRequestFromJSON,
    SystemWriteReplicationPrimarySecondaryTokenRequestToJSON,
    SystemWriteReplicationReindexRequestFromJSON,
    SystemWriteReplicationReindexRequestToJSON,
    SystemWriteReplicationSecondaryEnableRequestFromJSON,
    SystemWriteReplicationSecondaryEnableRequestToJSON,
    SystemWriteReplicationSecondaryPromoteRequestFromJSON,
    SystemWriteReplicationSecondaryPromoteRequestToJSON,
    SystemWriteReplicationSecondaryUpdatePrimaryRequestFromJSON,
    SystemWriteReplicationSecondaryUpdatePrimaryRequestToJSON,
    SystemWriteStorageRaftSnapshotAutoConfigNameRequestFromJSON,
    SystemWriteStorageRaftSnapshotAutoConfigNameRequestToJSON,
    SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequestFromJSON,
    SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequestToJSON,
    SystemWriteStorageRaftSnapshotLoadResponseFromJSON,
    SystemWriteStorageRaftSnapshotLoadResponseToJSON,
    SystemWriteSyncDestinationsAwsSmNameRequestFromJSON,
    SystemWriteSyncDestinationsAwsSmNameRequestToJSON,
    SystemWriteSyncDestinationsAwsSmNameResponseFromJSON,
    SystemWriteSyncDestinationsAwsSmNameResponseToJSON,
    SystemWriteSyncDestinationsAzureKvNameRequestFromJSON,
    SystemWriteSyncDestinationsAzureKvNameRequestToJSON,
    SystemWriteSyncDestinationsAzureKvNameResponseFromJSON,
    SystemWriteSyncDestinationsAzureKvNameResponseToJSON,
    SystemWriteSyncDestinationsGcpSmNameRequestFromJSON,
    SystemWriteSyncDestinationsGcpSmNameRequestToJSON,
    SystemWriteSyncDestinationsGcpSmNameResponseFromJSON,
    SystemWriteSyncDestinationsGcpSmNameResponseToJSON,
    SystemWriteSyncDestinationsGhNameRequestFromJSON,
    SystemWriteSyncDestinationsGhNameRequestToJSON,
    SystemWriteSyncDestinationsGhNameResponseFromJSON,
    SystemWriteSyncDestinationsGhNameResponseToJSON,
    SystemWriteSyncDestinationsInMemNameRequestFromJSON,
    SystemWriteSyncDestinationsInMemNameRequestToJSON,
    SystemWriteSyncDestinationsInMemNameResponseFromJSON,
    SystemWriteSyncDestinationsInMemNameResponseToJSON,
    SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequestFromJSON,
    SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequestToJSON,
    SystemWriteSyncDestinationsTypeNameAssociationsRemoveResponseFromJSON,
    SystemWriteSyncDestinationsTypeNameAssociationsRemoveResponseToJSON,
    SystemWriteSyncDestinationsTypeNameAssociationsSetRequestFromJSON,
    SystemWriteSyncDestinationsTypeNameAssociationsSetRequestToJSON,
    SystemWriteSyncDestinationsTypeNameAssociationsSetResponseFromJSON,
    SystemWriteSyncDestinationsTypeNameAssociationsSetResponseToJSON,
    SystemWriteSyncDestinationsVercelProjectNameRequestFromJSON,
    SystemWriteSyncDestinationsVercelProjectNameRequestToJSON,
    SystemWriteSyncDestinationsVercelProjectNameResponseFromJSON,
    SystemWriteSyncDestinationsVercelProjectNameResponseToJSON,
    SystemWriteSyncGithubAppsNameRequestFromJSON,
    SystemWriteSyncGithubAppsNameRequestToJSON,
    SystemWriteSyncGithubAppsNameResponseFromJSON,
    SystemWriteSyncGithubAppsNameResponseToJSON,
    SystemWriteUtilizationRequestFromJSON,
    SystemWriteUtilizationRequestToJSON,
    SystemWriteUtilizationResponseFromJSON,
    SystemWriteUtilizationResponseToJSON,
    UiConfigListCustomMessagesResponseFromJSON,
    UiConfigListCustomMessagesResponseToJSON,
    UiConfigReadCustomMessageResponseFromJSON,
    UiConfigReadCustomMessageResponseToJSON,
    UiConfigUpdateCustomMessageRequestFromJSON,
    UiConfigUpdateCustomMessageRequestToJSON,
    UiConfigUpdateCustomMessageResponseFromJSON,
    UiConfigUpdateCustomMessageResponseToJSON,
    UiHeadersConfigureRequestFromJSON,
    UiHeadersConfigureRequestToJSON,
    UiHeadersListResponseFromJSON,
    UiHeadersListResponseToJSON,
    UiHeadersReadConfigurationResponseFromJSON,
    UiHeadersReadConfigurationResponseToJSON,
    UiLoginDefaultAuthConfigureRequestFromJSON,
    UiLoginDefaultAuthConfigureRequestToJSON,
    UiLoginDefaultAuthListResponseFromJSON,
    UiLoginDefaultAuthListResponseToJSON,
    UnsealRequestFromJSON,
    UnsealRequestToJSON,
    UnsealResponseFromJSON,
    UnsealResponseToJSON,
    UnwrapRequestFromJSON,
    UnwrapRequestToJSON,
    VersionHistoryResponseFromJSON,
    VersionHistoryResponseToJSON,
    WellKnownListLabels2ResponseFromJSON,
    WellKnownListLabels2ResponseToJSON,
    WellKnownListLabelsResponseFromJSON,
    WellKnownListLabelsResponseToJSON,
    WellKnownReadLabelResponseFromJSON,
    WellKnownReadLabelResponseToJSON,
} from '../models/index';

export interface SystemApiAuditingCalculateHashOperationRequest {
    path: string;
    AuditingCalculateHashRequest: AuditingCalculateHashRequest;
}

export interface SystemApiAuditingDisableDeviceRequest {
    path: string;
}

export interface SystemApiAuditingDisableRequestHeaderRequest {
    header: string;
}

export interface SystemApiAuditingEnableDeviceOperationRequest {
    path: string;
    AuditingEnableDeviceRequest: AuditingEnableDeviceRequest;
}

export interface SystemApiAuditingEnableRequestHeaderOperationRequest {
    header: string;
    AuditingEnableRequestHeaderRequest: AuditingEnableRequestHeaderRequest;
}

export interface SystemApiAuditingReadRequestHeaderInformationRequest {
    header: string;
}

export interface SystemApiAuthDisableMethodRequest {
    path: string;
}

export interface SystemApiAuthEnableMethodOperationRequest {
    path: string;
    AuthEnableMethodRequest: AuthEnableMethodRequest;
}

export interface SystemApiAuthReadConfigurationRequest {
    path: string;
}

export interface SystemApiAuthReadTuningInformationRequest {
    path: string;
}

export interface SystemApiAuthTuneConfigurationParametersOperationRequest {
    path: string;
    AuthTuneConfigurationParametersRequest: AuthTuneConfigurationParametersRequest;
}

export interface SystemApiCorsConfigureOperationRequest {
    CorsConfigureRequest: CorsConfigureRequest;
}

export interface SystemApiCreateCustomMessageOperationRequest {
    CreateCustomMessageRequest: CreateCustomMessageRequest;
}

export interface SystemApiDecodeTokenOperationRequest {
    DecodeTokenRequest: DecodeTokenRequest;
}

export interface SystemApiEncryptionKeyConfigureRotationOperationRequest {
    EncryptionKeyConfigureRotationRequest: EncryptionKeyConfigureRotationRequest;
}

export interface SystemApiGenerateHashOperationRequest {
    GenerateHashRequest: GenerateHashRequest;
}

export interface SystemApiGenerateHashWithAlgorithmOperationRequest {
    urlalgorithm: string;
    GenerateHashWithAlgorithmRequest: GenerateHashWithAlgorithmRequest;
}

export interface SystemApiGenerateRandomOperationRequest {
    GenerateRandomRequest: GenerateRandomRequest;
}

export interface SystemApiGenerateRandomWithBytesOperationRequest {
    urlbytes: string;
    GenerateRandomWithBytesRequest: GenerateRandomWithBytesRequest;
}

export interface SystemApiGenerateRandomWithSourceOperationRequest {
    source: string;
    GenerateRandomWithSourceRequest: GenerateRandomWithSourceRequest;
}

export interface SystemApiGenerateRandomWithSourceAndBytesOperationRequest {
    source: string;
    urlbytes: string;
    GenerateRandomWithSourceAndBytesRequest: GenerateRandomWithSourceAndBytesRequest;
}

export interface SystemApiInitializeOperationRequest {
    InitializeRequest: InitializeRequest;
}

export interface SystemApiInternalClientActivityConfigureOperationRequest {
    InternalClientActivityConfigureRequest: InternalClientActivityConfigureRequest;
}

export interface SystemApiInternalGenerateOpenApiDocumentRequest {
    context?: string;
    generic_mount_paths?: boolean;
}

export interface SystemApiInternalGenerateOpenApiDocumentWithParametersOperationRequest {
    InternalGenerateOpenApiDocumentWithParametersRequest: InternalGenerateOpenApiDocumentWithParametersRequest;
}

export interface SystemApiInternalInspectRouterRequest {
    tag: string;
}

export interface SystemApiInternalUiReadMountInformationRequest {
    path: string;
}

export interface SystemApiLeasesForceRevokeLeaseWithPrefixRequest {
    prefix: string;
}

export interface SystemApiLeasesForceRevokeLeaseWithPrefix2Request {
    prefix: string;
}

export interface SystemApiLeasesLookUpRequest {
    prefix: string;
    list: LeasesLookUpListEnum;
}

export interface SystemApiLeasesReadLeaseOperationRequest {
    LeasesReadLeaseRequest: LeasesReadLeaseRequest;
}

export interface SystemApiLeasesRenewLeaseOperationRequest {
    LeasesRenewLeaseRequest: LeasesRenewLeaseRequest;
}

export interface SystemApiLeasesRenewLease2OperationRequest {
    LeasesRenewLease2Request: LeasesRenewLease2Request;
}

export interface SystemApiLeasesRenewLeaseWithIdOperationRequest {
    url_lease_id: string;
    LeasesRenewLeaseWithIdRequest: LeasesRenewLeaseWithIdRequest;
}

export interface SystemApiLeasesRenewLeaseWithId2OperationRequest {
    url_lease_id: string;
    LeasesRenewLeaseWithId2Request: LeasesRenewLeaseWithId2Request;
}

export interface SystemApiLeasesRevokeLeaseOperationRequest {
    LeasesRevokeLeaseRequest: LeasesRevokeLeaseRequest;
}

export interface SystemApiLeasesRevokeLease2OperationRequest {
    LeasesRevokeLease2Request: LeasesRevokeLease2Request;
}

export interface SystemApiLeasesRevokeLeaseWithIdOperationRequest {
    url_lease_id: string;
    LeasesRevokeLeaseWithIdRequest: LeasesRevokeLeaseWithIdRequest;
}

export interface SystemApiLeasesRevokeLeaseWithId2OperationRequest {
    url_lease_id: string;
    LeasesRevokeLeaseWithId2Request: LeasesRevokeLeaseWithId2Request;
}

export interface SystemApiLeasesRevokeLeaseWithPrefixOperationRequest {
    prefix: string;
    LeasesRevokeLeaseWithPrefixRequest: LeasesRevokeLeaseWithPrefixRequest;
}

export interface SystemApiLeasesRevokeLeaseWithPrefix2OperationRequest {
    prefix: string;
    LeasesRevokeLeaseWithPrefix2Request: LeasesRevokeLeaseWithPrefix2Request;
}

export interface SystemApiLockedUsersUnlockRequest {
    alias_identifier: string;
    mount_accessor: string;
}

export interface SystemApiLoggersReadVerbosityLevelForRequest {
    name: string;
}

export interface SystemApiLoggersRevertVerbosityLevelForRequest {
    name: string;
}

export interface SystemApiLoggersUpdateVerbosityLevelOperationRequest {
    LoggersUpdateVerbosityLevelRequest: LoggersUpdateVerbosityLevelRequest;
}

export interface SystemApiLoggersUpdateVerbosityLevelForOperationRequest {
    name: string;
    LoggersUpdateVerbosityLevelForRequest: LoggersUpdateVerbosityLevelForRequest;
}

export interface SystemApiMetricsRequest {
    format?: string;
}

export interface SystemApiMfaValidateOperationRequest {
    MfaValidateRequest: MfaValidateRequest;
}

export interface SystemApiMonitorRequest {
    log_format?: string;
    log_level?: string;
}

export interface SystemApiMountsDisableSecretsEngineRequest {
    path: string;
}

export interface SystemApiMountsEnableSecretsEngineOperationRequest {
    path: string;
    MountsEnableSecretsEngineRequest: MountsEnableSecretsEngineRequest;
}

export interface SystemApiMountsReadConfigurationRequest {
    path: string;
}

export interface SystemApiMountsReadTuningInformationRequest {
    path: string;
}

export interface SystemApiMountsTuneConfigurationParametersOperationRequest {
    path: string;
    MountsTuneConfigurationParametersRequest: MountsTuneConfigurationParametersRequest;
}

export interface SystemApiPluginsCatalogListPluginsWithTypeRequest {
    type: string;
    list: PluginsCatalogListPluginsWithTypeListEnum;
}

export interface SystemApiPluginsCatalogPinsCreatePinnedVersionOperationRequest {
    name: string;
    type: string;
    PluginsCatalogPinsCreatePinnedVersionRequest: PluginsCatalogPinsCreatePinnedVersionRequest;
}

export interface SystemApiPluginsCatalogPinsReadPinnedVersionRequest {
    name: string;
    type: string;
}

export interface SystemApiPluginsCatalogPinsRemovePinnedVersionRequest {
    name: string;
    type: string;
}

export interface SystemApiPluginsCatalogReadPluginConfigurationRequest {
    name: string;
}

export interface SystemApiPluginsCatalogReadPluginConfigurationWithTypeRequest {
    name: string;
    type: string;
}

export interface SystemApiPluginsCatalogRegisterPluginOperationRequest {
    name: string;
    PluginsCatalogRegisterPluginRequest: PluginsCatalogRegisterPluginRequest;
}

export interface SystemApiPluginsCatalogRegisterPluginWithTypeOperationRequest {
    name: string;
    type: string;
    PluginsCatalogRegisterPluginWithTypeRequest: PluginsCatalogRegisterPluginWithTypeRequest;
}

export interface SystemApiPluginsCatalogRemovePluginRequest {
    name: string;
}

export interface SystemApiPluginsCatalogRemovePluginWithTypeRequest {
    name: string;
    type: string;
}

export interface SystemApiPluginsReloadBackendsOperationRequest {
    PluginsReloadBackendsRequest: PluginsReloadBackendsRequest;
}

export interface SystemApiPluginsRuntimesCatalogListPluginsRuntimes0Request {
    list: PluginsRuntimesCatalogListPluginsRuntimes0ListEnum;
}

export interface SystemApiPluginsRuntimesCatalogReadPluginRuntimeConfigurationRequest {
    name: string;
    type: string;
}

export interface SystemApiPluginsRuntimesCatalogRegisterPluginRuntimeOperationRequest {
    name: string;
    type: string;
    PluginsRuntimesCatalogRegisterPluginRuntimeRequest: PluginsRuntimesCatalogRegisterPluginRuntimeRequest;
}

export interface SystemApiPluginsRuntimesCatalogRemovePluginRuntimeRequest {
    name: string;
    type: string;
}

export interface SystemApiPoliciesDeleteAclPolicyRequest {
    name: string;
}

export interface SystemApiPoliciesDeleteAclPolicy2Request {
    name: string;
}

export interface SystemApiPoliciesDeletePasswordPolicyRequest {
    name: string;
}

export interface SystemApiPoliciesGeneratePasswordFromPasswordPolicyRequest {
    name: string;
}

export interface SystemApiPoliciesListAclPoliciesRequest {
    list: PoliciesListAclPoliciesListEnum;
}

export interface SystemApiPoliciesListAclPolicies3Request {
    list: PoliciesListAclPolicies3ListEnum;
}

export interface SystemApiPoliciesListPasswordPoliciesRequest {
    list: PoliciesListPasswordPoliciesListEnum;
}

export interface SystemApiPoliciesReadAclPolicyRequest {
    name: string;
}

export interface SystemApiPoliciesReadAclPolicy2Request {
    name: string;
}

export interface SystemApiPoliciesReadPasswordPolicyRequest {
    name: string;
}

export interface SystemApiPoliciesWriteAclPolicyOperationRequest {
    name: string;
    PoliciesWriteAclPolicyRequest: PoliciesWriteAclPolicyRequest;
}

export interface SystemApiPoliciesWriteAclPolicy2OperationRequest {
    name: string;
    PoliciesWriteAclPolicy2Request: PoliciesWriteAclPolicy2Request;
}

export interface SystemApiPoliciesWritePasswordPolicyOperationRequest {
    name: string;
    PoliciesWritePasswordPolicyRequest: PoliciesWritePasswordPolicyRequest;
}

export interface SystemApiQueryTokenAccessorCapabilitiesOperationRequest {
    QueryTokenAccessorCapabilitiesRequest: QueryTokenAccessorCapabilitiesRequest;
}

export interface SystemApiQueryTokenCapabilitiesOperationRequest {
    QueryTokenCapabilitiesRequest: QueryTokenCapabilitiesRequest;
}

export interface SystemApiQueryTokenSelfCapabilitiesOperationRequest {
    QueryTokenSelfCapabilitiesRequest: QueryTokenSelfCapabilitiesRequest;
}

export interface SystemApiRateLimitQuotasConfigureOperationRequest {
    RateLimitQuotasConfigureRequest: RateLimitQuotasConfigureRequest;
}

export interface SystemApiRateLimitQuotasDeleteRequest {
    name: string;
}

export interface SystemApiRateLimitQuotasListRequest {
    list: RateLimitQuotasListListEnum;
}

export interface SystemApiRateLimitQuotasReadRequest {
    name: string;
}

export interface SystemApiRateLimitQuotasWriteOperationRequest {
    name: string;
    RateLimitQuotasWriteRequest: RateLimitQuotasWriteRequest;
}

export interface SystemApiRawDeleteRequest {
    path: string;
}

export interface SystemApiRawListRequest {
    path: string;
    list: RawListListEnum;
}

export interface SystemApiRawReadRequest {
    path: string;
}

export interface SystemApiRawWriteOperationRequest {
    path: string;
    RawWriteRequest: RawWriteRequest;
}

export interface SystemApiReadWrappingPropertiesOperationRequest {
    ReadWrappingPropertiesRequest: ReadWrappingPropertiesRequest;
}

export interface SystemApiReadWrappingProperties2Request {
    token?: string;
}

export interface SystemApiRekeyAttemptInitializeOperationRequest {
    RekeyAttemptInitializeRequest: RekeyAttemptInitializeRequest;
}

export interface SystemApiRekeyAttemptUpdateOperationRequest {
    RekeyAttemptUpdateRequest: RekeyAttemptUpdateRequest;
}

export interface SystemApiRekeyVerificationUpdateOperationRequest {
    RekeyVerificationUpdateRequest: RekeyVerificationUpdateRequest;
}

export interface SystemApiReloadPluginsOperationRequest {
    name: string;
    type: string;
    ReloadPluginsRequest: ReloadPluginsRequest;
}

export interface SystemApiReloadSubsystemRequest {
    subsystem: string;
}

export interface SystemApiRemountOperationRequest {
    RemountRequest: RemountRequest;
}

export interface SystemApiRemountStatusRequest {
    migration_id: string;
}

export interface SystemApiRewrapOperationRequest {
    RewrapRequest: RewrapRequest;
}

export interface SystemApiRootTokenGenerationInitializeOperationRequest {
    RootTokenGenerationInitializeRequest: RootTokenGenerationInitializeRequest;
}

export interface SystemApiRootTokenGenerationInitialize2OperationRequest {
    RootTokenGenerationInitialize2Request: RootTokenGenerationInitialize2Request;
}

export interface SystemApiRootTokenGenerationUpdateOperationRequest {
    RootTokenGenerationUpdateRequest: RootTokenGenerationUpdateRequest;
}

export interface SystemApiSubscriptionsCreateRequest {
    id: string;
    plugin: string;
}

export interface SystemApiSubscriptionsCreate0Request {
    id: string;
    plugin: string;
}

export interface SystemApiSubscriptionsListEventsSubscriptionsRequest {
    list: SubscriptionsListEventsSubscriptionsListEnum;
}

export interface SystemApiSubscriptionsWriteEventsSubscriptionsOperationRequest {
    SubscriptionsWriteEventsSubscriptionsRequest: SubscriptionsWriteEventsSubscriptionsRequest;
}

export interface SystemApiSystemDeleteManagedKeysTypeNameRequest {
    name: string;
    type: string;
}

export interface SystemApiSystemDeleteMfaMethodDuoNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteMfaMethodOktaNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteMfaMethodPingidNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteMfaMethodTotpNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteNamespacesPathRequest {
    path: string;
}

export interface SystemApiSystemDeletePoliciesEgpNameRequest {
    name: string;
}

export interface SystemApiSystemDeletePoliciesRgpNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteQuotasLeaseCountNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteReplicationPerformancePrimaryPathsFilterIdRequest {
    id: string;
}

export interface SystemApiSystemDeleteStorageRaftSnapshotAutoConfigNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteStorageRaftSnapshotLoadIdRequest {
    id: string;
}

export interface SystemApiSystemDeleteSyncDestinationsAwsSmNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteSyncDestinationsAzureKvNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteSyncDestinationsGcpSmNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteSyncDestinationsGhNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteSyncDestinationsInMemNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteSyncDestinationsVercelProjectNameRequest {
    name: string;
}

export interface SystemApiSystemDeleteSyncGithubAppsNameRequest {
    name: string;
}

export interface SystemApiSystemListManagedKeysTypeRequest {
    type: string;
    list: SystemListManagedKeysTypeListEnum;
}

export interface SystemApiSystemListMfaMethodRequest {
    list: SystemListMfaMethodListEnum;
}

export interface SystemApiSystemListNamespacesRequest {
    list: SystemListNamespacesListEnum;
}

export interface SystemApiSystemListPoliciesEgpRequest {
    list: SystemListPoliciesEgpListEnum;
}

export interface SystemApiSystemListPoliciesRgpRequest {
    list: SystemListPoliciesRgpListEnum;
}

export interface SystemApiSystemListQuotasLeaseCountRequest {
    list: SystemListQuotasLeaseCountListEnum;
}

export interface SystemApiSystemListStorageRaftSnapshotAutoConfigRequest {
    list: SystemListStorageRaftSnapshotAutoConfigListEnum;
}

export interface SystemApiSystemListStorageRaftSnapshotLoadRequest {
    list: SystemListStorageRaftSnapshotLoadListEnum;
}

export interface SystemApiSystemListSyncAssociationsRequest {
    list: SystemListSyncAssociationsListEnum;
}

export interface SystemApiSystemListSyncDestinationsRequest {
    list: SystemListSyncDestinationsListEnum;
}

export interface SystemApiSystemListSyncDestinationsTypeRequest {
    type: string;
    list: SystemListSyncDestinationsTypeListEnum;
}

export interface SystemApiSystemListSyncGithubAppsRequest {
    list: SystemListSyncGithubAppsListEnum;
}

export interface SystemApiSystemPatchNamespacesPathOperationRequest {
    path: string;
    SystemPatchNamespacesPathRequest: SystemPatchNamespacesPathRequest;
}

export interface SystemApiSystemPatchSyncConfigOperationRequest {
    SystemPatchSyncConfigRequest: SystemPatchSyncConfigRequest;
}

export interface SystemApiSystemPatchSyncDestinationsAwsSmNameOperationRequest {
    name: string;
    SystemPatchSyncDestinationsAwsSmNameRequest: SystemPatchSyncDestinationsAwsSmNameRequest;
}

export interface SystemApiSystemPatchSyncDestinationsAzureKvNameOperationRequest {
    name: string;
    SystemPatchSyncDestinationsAzureKvNameRequest: SystemPatchSyncDestinationsAzureKvNameRequest;
}

export interface SystemApiSystemPatchSyncDestinationsGcpSmNameOperationRequest {
    name: string;
    SystemPatchSyncDestinationsGcpSmNameRequest: SystemPatchSyncDestinationsGcpSmNameRequest;
}

export interface SystemApiSystemPatchSyncDestinationsGhNameOperationRequest {
    name: string;
    SystemPatchSyncDestinationsGhNameRequest: SystemPatchSyncDestinationsGhNameRequest;
}

export interface SystemApiSystemPatchSyncDestinationsInMemNameOperationRequest {
    name: string;
    SystemPatchSyncDestinationsInMemNameRequest: SystemPatchSyncDestinationsInMemNameRequest;
}

export interface SystemApiSystemPatchSyncDestinationsVercelProjectNameOperationRequest {
    name: string;
    SystemPatchSyncDestinationsVercelProjectNameRequest: SystemPatchSyncDestinationsVercelProjectNameRequest;
}

export interface SystemApiSystemReadManagedKeysTypeNameRequest {
    name: string;
    type: string;
}

export interface SystemApiSystemReadMfaMethodDuoNameRequest {
    name: string;
}

export interface SystemApiSystemReadMfaMethodOktaNameRequest {
    name: string;
}

export interface SystemApiSystemReadMfaMethodPingidNameRequest {
    name: string;
}

export interface SystemApiSystemReadMfaMethodTotpNameRequest {
    name: string;
}

export interface SystemApiSystemReadMfaMethodTotpNameGenerateRequest {
    name: string;
}

export interface SystemApiSystemReadNamespacesPathRequest {
    path: string;
}

export interface SystemApiSystemReadPoliciesEgpNameRequest {
    name: string;
}

export interface SystemApiSystemReadPoliciesRgpNameRequest {
    name: string;
}

export interface SystemApiSystemReadQuotasLeaseCountNameRequest {
    name: string;
}

export interface SystemApiSystemReadReplicationPerformancePrimaryDynamicFilterIdRequest {
    id: string;
}

export interface SystemApiSystemReadReplicationPerformancePrimaryPathsFilterIdRequest {
    id: string;
}

export interface SystemApiSystemReadReplicationPerformanceSecondaryDynamicFilterIdRequest {
    id: string;
}

export interface SystemApiSystemReadStorageRaftSnapshotAutoConfigNameRequest {
    name: string;
}

export interface SystemApiSystemReadStorageRaftSnapshotAutoStatusNameRequest {
    name: string;
}

export interface SystemApiSystemReadStorageRaftSnapshotLoadIdRequest {
    id: string;
}

export interface SystemApiSystemReadSyncAssociationsMountSecretNameRequest {
    mount: string;
    secret_name: string;
}

export interface SystemApiSystemReadSyncDestinationsAwsSmNameRequest {
    name: string;
}

export interface SystemApiSystemReadSyncDestinationsAzureKvNameRequest {
    name: string;
}

export interface SystemApiSystemReadSyncDestinationsGcpSmNameRequest {
    name: string;
}

export interface SystemApiSystemReadSyncDestinationsGhNameRequest {
    name: string;
}

export interface SystemApiSystemReadSyncDestinationsInMemNameRequest {
    name: string;
}

export interface SystemApiSystemReadSyncDestinationsTypeNameAssociationsRequest {
    name: string;
    type: string;
}

export interface SystemApiSystemReadSyncDestinationsVercelProjectNameRequest {
    name: string;
}

export interface SystemApiSystemReadSyncGithubAppsNameRequest {
    name: string;
}

export interface SystemApiSystemWriteConfigControlGroupOperationRequest {
    SystemWriteConfigControlGroupRequest: SystemWriteConfigControlGroupRequest;
}

export interface SystemApiSystemWriteConfigGroupPolicyApplicationOperationRequest {
    SystemWriteConfigGroupPolicyApplicationRequest: SystemWriteConfigGroupPolicyApplicationRequest;
}

export interface SystemApiSystemWriteControlGroupAuthorizeOperationRequest {
    SystemWriteControlGroupAuthorizeRequest: SystemWriteControlGroupAuthorizeRequest;
}

export interface SystemApiSystemWriteControlGroupRequestOperationRequest {
    SystemWriteControlGroupRequestRequest: SystemWriteControlGroupRequestRequest;
}

export interface SystemApiSystemWriteInternalCountersActivityWriteOperationRequest {
    SystemWriteInternalCountersActivityWriteRequest: SystemWriteInternalCountersActivityWriteRequest;
}

export interface SystemApiSystemWriteManagedKeysTypeNameOperationRequest {
    name: string;
    type: string;
    SystemWriteManagedKeysTypeNameRequest: SystemWriteManagedKeysTypeNameRequest;
}

export interface SystemApiSystemWriteManagedKeysTypeNameTestSignOperationRequest {
    name: string;
    type: string;
    SystemWriteManagedKeysTypeNameTestSignRequest: SystemWriteManagedKeysTypeNameTestSignRequest;
}

export interface SystemApiSystemWriteMfaMethodDuoNameOperationRequest {
    name: string;
    SystemWriteMfaMethodDuoNameRequest: SystemWriteMfaMethodDuoNameRequest;
}

export interface SystemApiSystemWriteMfaMethodOktaNameOperationRequest {
    name: string;
    SystemWriteMfaMethodOktaNameRequest: SystemWriteMfaMethodOktaNameRequest;
}

export interface SystemApiSystemWriteMfaMethodPingidNameOperationRequest {
    name: string;
    SystemWriteMfaMethodPingidNameRequest: SystemWriteMfaMethodPingidNameRequest;
}

export interface SystemApiSystemWriteMfaMethodTotpNameOperationRequest {
    name: string;
    SystemWriteMfaMethodTotpNameRequest: SystemWriteMfaMethodTotpNameRequest;
}

export interface SystemApiSystemWriteMfaMethodTotpNameAdminDestroyOperationRequest {
    name: string;
    SystemWriteMfaMethodTotpNameAdminDestroyRequest: SystemWriteMfaMethodTotpNameAdminDestroyRequest;
}

export interface SystemApiSystemWriteMfaMethodTotpNameAdminGenerateOperationRequest {
    name: string;
    SystemWriteMfaMethodTotpNameAdminGenerateRequest: SystemWriteMfaMethodTotpNameAdminGenerateRequest;
}

export interface SystemApiSystemWriteNamespacesApiLockLockPathRequest {
    path: string;
}

export interface SystemApiSystemWriteNamespacesApiLockUnlockOperationRequest {
    SystemWriteNamespacesApiLockUnlockRequest: SystemWriteNamespacesApiLockUnlockRequest;
}

export interface SystemApiSystemWriteNamespacesApiLockUnlockPathOperationRequest {
    path: string;
    SystemWriteNamespacesApiLockUnlockPathRequest: SystemWriteNamespacesApiLockUnlockPathRequest;
}

export interface SystemApiSystemWriteNamespacesPathOperationRequest {
    path: string;
    SystemWriteNamespacesPathRequest: SystemWriteNamespacesPathRequest;
}

export interface SystemApiSystemWritePoliciesEgpNameOperationRequest {
    name: string;
    SystemWritePoliciesEgpNameRequest: SystemWritePoliciesEgpNameRequest;
}

export interface SystemApiSystemWritePoliciesRgpNameOperationRequest {
    name: string;
    SystemWritePoliciesRgpNameRequest: SystemWritePoliciesRgpNameRequest;
}

export interface SystemApiSystemWriteQuotasLeaseCountNameOperationRequest {
    name: string;
    SystemWriteQuotasLeaseCountNameRequest: SystemWriteQuotasLeaseCountNameRequest;
}

export interface SystemApiSystemWriteReplicationDrPrimaryEnableOperationRequest {
    SystemWriteReplicationDrPrimaryEnableRequest: SystemWriteReplicationDrPrimaryEnableRequest;
}

export interface SystemApiSystemWriteReplicationDrPrimaryRevokeSecondaryOperationRequest {
    SystemWriteReplicationDrPrimaryRevokeSecondaryRequest: SystemWriteReplicationDrPrimaryRevokeSecondaryRequest;
}

export interface SystemApiSystemWriteReplicationDrPrimarySecondaryTokenOperationRequest {
    SystemWriteReplicationDrPrimarySecondaryTokenRequest: SystemWriteReplicationDrPrimarySecondaryTokenRequest;
}

export interface SystemApiSystemWriteReplicationDrSecondaryConfigReloadSubsystemRequest {
    subsystem: string;
}

export interface SystemApiSystemWriteReplicationDrSecondaryDisableOperationRequest {
    SystemWriteReplicationDrSecondaryDisableRequest: SystemWriteReplicationDrSecondaryDisableRequest;
}

export interface SystemApiSystemWriteReplicationDrSecondaryEnableOperationRequest {
    SystemWriteReplicationDrSecondaryEnableRequest: SystemWriteReplicationDrSecondaryEnableRequest;
}

export interface SystemApiSystemWriteReplicationDrSecondaryMerkleCheckOperationRequest {
    SystemWriteReplicationDrSecondaryMerkleCheckRequest: SystemWriteReplicationDrSecondaryMerkleCheckRequest;
}

export interface SystemApiSystemWriteReplicationDrSecondaryOperationTokenDeleteOperationRequest {
    SystemWriteReplicationDrSecondaryOperationTokenDeleteRequest: SystemWriteReplicationDrSecondaryOperationTokenDeleteRequest;
}

export interface SystemApiSystemWriteReplicationDrSecondaryPromoteOperationRequest {
    SystemWriteReplicationDrSecondaryPromoteRequest: SystemWriteReplicationDrSecondaryPromoteRequest;
}

export interface SystemApiSystemWriteReplicationDrSecondaryRecoverOperationRequest {
    SystemWriteReplicationDrSecondaryRecoverRequest: SystemWriteReplicationDrSecondaryRecoverRequest;
}

export interface SystemApiSystemWriteReplicationDrSecondaryReindexOperationRequest {
    SystemWriteReplicationDrSecondaryReindexRequest: SystemWriteReplicationDrSecondaryReindexRequest;
}

export interface SystemApiSystemWriteReplicationDrSecondaryUpdatePrimaryOperationRequest {
    SystemWriteReplicationDrSecondaryUpdatePrimaryRequest: SystemWriteReplicationDrSecondaryUpdatePrimaryRequest;
}

export interface SystemApiSystemWriteReplicationForceCorruptionOperationRequest {
    SystemWriteReplicationForceCorruptionRequest: SystemWriteReplicationForceCorruptionRequest;
}

export interface SystemApiSystemWriteReplicationPerformancePrimaryEnableOperationRequest {
    SystemWriteReplicationPerformancePrimaryEnableRequest: SystemWriteReplicationPerformancePrimaryEnableRequest;
}

export interface SystemApiSystemWriteReplicationPerformancePrimaryPathsFilterIdOperationRequest {
    id: string;
    SystemWriteReplicationPerformancePrimaryPathsFilterIdRequest: SystemWriteReplicationPerformancePrimaryPathsFilterIdRequest;
}

export interface SystemApiSystemWriteReplicationPerformancePrimaryRevokeSecondaryOperationRequest {
    SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequest: SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequest;
}

export interface SystemApiSystemWriteReplicationPerformancePrimarySecondaryTokenOperationRequest {
    SystemWriteReplicationPerformancePrimarySecondaryTokenRequest: SystemWriteReplicationPerformancePrimarySecondaryTokenRequest;
}

export interface SystemApiSystemWriteReplicationPerformanceSecondaryEnableOperationRequest {
    SystemWriteReplicationPerformanceSecondaryEnableRequest: SystemWriteReplicationPerformanceSecondaryEnableRequest;
}

export interface SystemApiSystemWriteReplicationPerformanceSecondaryPromoteOperationRequest {
    SystemWriteReplicationPerformanceSecondaryPromoteRequest: SystemWriteReplicationPerformanceSecondaryPromoteRequest;
}

export interface SystemApiSystemWriteReplicationPerformanceSecondaryUpdatePrimaryOperationRequest {
    SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest: SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest;
}

export interface SystemApiSystemWriteReplicationPrimaryEnableOperationRequest {
    SystemWriteReplicationPrimaryEnableRequest: SystemWriteReplicationPrimaryEnableRequest;
}

export interface SystemApiSystemWriteReplicationPrimaryRevokeSecondaryOperationRequest {
    SystemWriteReplicationPrimaryRevokeSecondaryRequest: SystemWriteReplicationPrimaryRevokeSecondaryRequest;
}

export interface SystemApiSystemWriteReplicationPrimarySecondaryTokenOperationRequest {
    SystemWriteReplicationPrimarySecondaryTokenRequest: SystemWriteReplicationPrimarySecondaryTokenRequest;
}

export interface SystemApiSystemWriteReplicationReindexOperationRequest {
    SystemWriteReplicationReindexRequest: SystemWriteReplicationReindexRequest;
}

export interface SystemApiSystemWriteReplicationSecondaryEnableOperationRequest {
    SystemWriteReplicationSecondaryEnableRequest: SystemWriteReplicationSecondaryEnableRequest;
}

export interface SystemApiSystemWriteReplicationSecondaryPromoteOperationRequest {
    SystemWriteReplicationSecondaryPromoteRequest: SystemWriteReplicationSecondaryPromoteRequest;
}

export interface SystemApiSystemWriteReplicationSecondaryUpdatePrimaryOperationRequest {
    SystemWriteReplicationSecondaryUpdatePrimaryRequest: SystemWriteReplicationSecondaryUpdatePrimaryRequest;
}

export interface SystemApiSystemWriteStorageRaftSnapshotAutoConfigNameOperationRequest {
    name: string;
    SystemWriteStorageRaftSnapshotAutoConfigNameRequest: SystemWriteStorageRaftSnapshotAutoConfigNameRequest;
}

export interface SystemApiSystemWriteStorageRaftSnapshotAutoSnapshotLoadNameOperationRequest {
    name: string;
    SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequest: SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequest;
}

export interface SystemApiSystemWriteSyncDestinationsAwsSmNameOperationRequest {
    name: string;
    SystemWriteSyncDestinationsAwsSmNameRequest: SystemWriteSyncDestinationsAwsSmNameRequest;
}

export interface SystemApiSystemWriteSyncDestinationsAzureKvNameOperationRequest {
    name: string;
    SystemWriteSyncDestinationsAzureKvNameRequest: SystemWriteSyncDestinationsAzureKvNameRequest;
}

export interface SystemApiSystemWriteSyncDestinationsGcpSmNameOperationRequest {
    name: string;
    SystemWriteSyncDestinationsGcpSmNameRequest: SystemWriteSyncDestinationsGcpSmNameRequest;
}

export interface SystemApiSystemWriteSyncDestinationsGhNameOperationRequest {
    name: string;
    SystemWriteSyncDestinationsGhNameRequest: SystemWriteSyncDestinationsGhNameRequest;
}

export interface SystemApiSystemWriteSyncDestinationsInMemNameOperationRequest {
    name: string;
    SystemWriteSyncDestinationsInMemNameRequest: SystemWriteSyncDestinationsInMemNameRequest;
}

export interface SystemApiSystemWriteSyncDestinationsTypeNameAssociationsRemoveOperationRequest {
    name: string;
    type: string;
    SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequest: SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequest;
}

export interface SystemApiSystemWriteSyncDestinationsTypeNameAssociationsSetOperationRequest {
    name: string;
    type: string;
    SystemWriteSyncDestinationsTypeNameAssociationsSetRequest: SystemWriteSyncDestinationsTypeNameAssociationsSetRequest;
}

export interface SystemApiSystemWriteSyncDestinationsVercelProjectNameOperationRequest {
    name: string;
    SystemWriteSyncDestinationsVercelProjectNameRequest: SystemWriteSyncDestinationsVercelProjectNameRequest;
}

export interface SystemApiSystemWriteSyncGithubAppsNameOperationRequest {
    name: string;
    SystemWriteSyncGithubAppsNameRequest: SystemWriteSyncGithubAppsNameRequest;
}

export interface SystemApiSystemWriteUtilizationOperationRequest {
    SystemWriteUtilizationRequest: SystemWriteUtilizationRequest;
}

export interface SystemApiUiConfigDeleteCustomMessageRequest {
    id: string;
}

export interface SystemApiUiConfigListCustomMessagesRequest {
    list: UiConfigListCustomMessagesListEnum;
    active?: boolean;
    authenticated?: boolean;
    type?: string;
}

export interface SystemApiUiConfigReadCustomMessageRequest {
    id: string;
}

export interface SystemApiUiConfigUpdateCustomMessageOperationRequest {
    id: string;
    UiConfigUpdateCustomMessageRequest: UiConfigUpdateCustomMessageRequest;
}

export interface SystemApiUiHeadersConfigureOperationRequest {
    header: string;
    UiHeadersConfigureRequest: UiHeadersConfigureRequest;
}

export interface SystemApiUiHeadersDeleteConfigurationRequest {
    header: string;
}

export interface SystemApiUiHeadersListRequest {
    list: UiHeadersListListEnum;
}

export interface SystemApiUiHeadersReadConfigurationRequest {
    header: string;
}

export interface SystemApiUiLoginDefaultAuthConfigureOperationRequest {
    name: string;
    UiLoginDefaultAuthConfigureRequest: UiLoginDefaultAuthConfigureRequest;
}

export interface SystemApiUiLoginDefaultAuthDeleteConfigurationRequest {
    name: string;
}

export interface SystemApiUiLoginDefaultAuthListRequest {
    list: UiLoginDefaultAuthListListEnum;
}

export interface SystemApiUiLoginDefaultAuthReadConfigurationRequest {
    name: string;
}

export interface SystemApiUnsealOperationRequest {
    UnsealRequest: UnsealRequest;
}

export interface SystemApiUnwrapOperationRequest {
    UnwrapRequest: UnwrapRequest;
}

export interface SystemApiVersionHistoryRequest {
    list: VersionHistoryListEnum;
}

export interface SystemApiWellKnownListLabelsRequest {
    list: WellKnownListLabelsListEnum;
}

export interface SystemApiWellKnownReadLabelRequest {
    label: string;
}

export interface SystemApiWrapRequest {
    request_body: { [key: string]: any; };
}

/**
 * 
 */
export class SystemApi extends runtime.BaseAPI {

    /**
     * Activate a flagged feature.
     */
    async activationFlagsActivateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/activation-flags/activation-test/activate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Activate a flagged feature.
     */
    async activationFlagsActivate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.activationFlagsActivateRaw(initOverrides);
        return await response.value();
    }

    /**
     * Activate a flagged feature.
     */
    async activationFlagsActivate_1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/activation-flags/force-identity-deduplication/activate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Activate a flagged feature.
     */
    async activationFlagsActivate_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.activationFlagsActivate_1Raw(initOverrides);
        return await response.value();
    }

    /**
     * Activate a flagged feature.
     */
    async activationFlagsActivate_2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/activation-flags/secrets-import/activate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Activate a flagged feature.
     */
    async activationFlagsActivate_2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.activationFlagsActivate_2Raw(initOverrides);
        return await response.value();
    }

    /**
     * Activate a flagged feature.
     */
    async activationFlagsActivate_3Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/activation-flags/secrets-sync/activate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Activate a flagged feature.
     */
    async activationFlagsActivate_3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.activationFlagsActivate_3Raw(initOverrides);
        return await response.value();
    }

    /**
     */
    async auditingCalculateHashRaw(requestParameters: SystemApiAuditingCalculateHashOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditingCalculateHashResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling auditingCalculateHash().'
            );
        }

        if (requestParameters['AuditingCalculateHashRequest'] == null) {
            throw new runtime.RequiredError(
                'AuditingCalculateHashRequest',
                'Required parameter "AuditingCalculateHashRequest" was null or undefined when calling auditingCalculateHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/audit-hash/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuditingCalculateHashRequestToJSON(requestParameters['AuditingCalculateHashRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditingCalculateHashResponseFromJSON(jsonValue));
    }

    /**
     */
    async auditingCalculateHash(path: string, AuditingCalculateHashRequest: AuditingCalculateHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditingCalculateHashResponse> {
        const response = await this.auditingCalculateHashRaw({ path: path, AuditingCalculateHashRequest: AuditingCalculateHashRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Disable the audit device at the given path.
     */
    async auditingDisableDeviceRaw(requestParameters: SystemApiAuditingDisableDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling auditingDisableDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/audit/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable the audit device at the given path.
     */
    async auditingDisableDevice(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.auditingDisableDeviceRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * Disable auditing of the given request header.
     */
    async auditingDisableRequestHeaderRaw(requestParameters: SystemApiAuditingDisableRequestHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['header'] == null) {
            throw new runtime.RequiredError(
                'header',
                'Required parameter "header" was null or undefined when calling auditingDisableRequestHeader().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/auditing/request-headers/{header}`.replace(`{${"header"}}`, encodeURIComponent(String(requestParameters['header']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable auditing of the given request header.
     */
    async auditingDisableRequestHeader(header: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.auditingDisableRequestHeaderRaw({ header: header }, initOverrides);
        return await response.value();
    }

    /**
     * Enable a new audit device at the supplied path.
     */
    async auditingEnableDeviceRaw(requestParameters: SystemApiAuditingEnableDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling auditingEnableDevice().'
            );
        }

        if (requestParameters['AuditingEnableDeviceRequest'] == null) {
            throw new runtime.RequiredError(
                'AuditingEnableDeviceRequest',
                'Required parameter "AuditingEnableDeviceRequest" was null or undefined when calling auditingEnableDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/audit/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuditingEnableDeviceRequestToJSON(requestParameters['AuditingEnableDeviceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable a new audit device at the supplied path.
     */
    async auditingEnableDevice(path: string, AuditingEnableDeviceRequest: AuditingEnableDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.auditingEnableDeviceRaw({ path: path, AuditingEnableDeviceRequest: AuditingEnableDeviceRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Enable auditing of a header.
     */
    async auditingEnableRequestHeaderRaw(requestParameters: SystemApiAuditingEnableRequestHeaderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['header'] == null) {
            throw new runtime.RequiredError(
                'header',
                'Required parameter "header" was null or undefined when calling auditingEnableRequestHeader().'
            );
        }

        if (requestParameters['AuditingEnableRequestHeaderRequest'] == null) {
            throw new runtime.RequiredError(
                'AuditingEnableRequestHeaderRequest',
                'Required parameter "AuditingEnableRequestHeaderRequest" was null or undefined when calling auditingEnableRequestHeader().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/config/auditing/request-headers/{header}`.replace(`{${"header"}}`, encodeURIComponent(String(requestParameters['header']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuditingEnableRequestHeaderRequestToJSON(requestParameters['AuditingEnableRequestHeaderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable auditing of a header.
     */
    async auditingEnableRequestHeader(header: string, AuditingEnableRequestHeaderRequest: AuditingEnableRequestHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.auditingEnableRequestHeaderRaw({ header: header, AuditingEnableRequestHeaderRequest: AuditingEnableRequestHeaderRequest }, initOverrides);
        return await response.value();
    }

    /**
     * List the enabled audit devices.
     */
    async auditingListEnabledDevicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/audit`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List the enabled audit devices.
     */
    async auditingListEnabledDevices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.auditingListEnabledDevicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * List the request headers that are configured to be audited.
     */
    async auditingListRequestHeadersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditingListRequestHeadersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/auditing/request-headers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditingListRequestHeadersResponseFromJSON(jsonValue));
    }

    /**
     * List the request headers that are configured to be audited.
     */
    async auditingListRequestHeaders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditingListRequestHeadersResponse> {
        const response = await this.auditingListRequestHeadersRaw(initOverrides);
        return await response.value();
    }

    /**
     * List the information for the given request header.
     */
    async auditingReadRequestHeaderInformationRaw(requestParameters: SystemApiAuditingReadRequestHeaderInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['header'] == null) {
            throw new runtime.RequiredError(
                'header',
                'Required parameter "header" was null or undefined when calling auditingReadRequestHeaderInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/auditing/request-headers/{header}`.replace(`{${"header"}}`, encodeURIComponent(String(requestParameters['header']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List the information for the given request header.
     */
    async auditingReadRequestHeaderInformation(header: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.auditingReadRequestHeaderInformationRaw({ header: header }, initOverrides);
        return await response.value();
    }

    /**
     * Disable the auth method at the given auth path
     */
    async authDisableMethodRaw(requestParameters: SystemApiAuthDisableMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling authDisableMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/auth/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable the auth method at the given auth path
     */
    async authDisableMethod(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.authDisableMethodRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * After enabling, the auth method can be accessed and configured via the auth path specified as part of the URL. This auth path will be nested under the auth prefix.  For example, enable the \"foo\" auth method will make it accessible at /auth/foo.
     * Enables a new auth method.
     */
    async authEnableMethodRaw(requestParameters: SystemApiAuthEnableMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling authEnableMethod().'
            );
        }

        if (requestParameters['AuthEnableMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'AuthEnableMethodRequest',
                'Required parameter "AuthEnableMethodRequest" was null or undefined when calling authEnableMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/auth/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthEnableMethodRequestToJSON(requestParameters['AuthEnableMethodRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * After enabling, the auth method can be accessed and configured via the auth path specified as part of the URL. This auth path will be nested under the auth prefix.  For example, enable the \"foo\" auth method will make it accessible at /auth/foo.
     * Enables a new auth method.
     */
    async authEnableMethod(path: string, AuthEnableMethodRequest: AuthEnableMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.authEnableMethodRaw({ path: path, AuthEnableMethodRequest: AuthEnableMethodRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async authListEnabledMethodsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authListEnabledMethods(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.authListEnabledMethodsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read the configuration of the auth engine at the given path.
     */
    async authReadConfigurationRaw(requestParameters: SystemApiAuthReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthReadConfigurationResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling authReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/auth/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthReadConfigurationResponseFromJSON(jsonValue));
    }

    /**
     * Read the configuration of the auth engine at the given path.
     */
    async authReadConfiguration(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthReadConfigurationResponse> {
        const response = await this.authReadConfigurationRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
     * Reads the given auth path\'s configuration.
     */
    async authReadTuningInformationRaw(requestParameters: SystemApiAuthReadTuningInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthReadTuningInformationResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling authReadTuningInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/auth/{path}/tune`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthReadTuningInformationResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
     * Reads the given auth path\'s configuration.
     */
    async authReadTuningInformation(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthReadTuningInformationResponse> {
        const response = await this.authReadTuningInformationRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
     * Tune configuration parameters for a given auth path.
     */
    async authTuneConfigurationParametersRaw(requestParameters: SystemApiAuthTuneConfigurationParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling authTuneConfigurationParameters().'
            );
        }

        if (requestParameters['AuthTuneConfigurationParametersRequest'] == null) {
            throw new runtime.RequiredError(
                'AuthTuneConfigurationParametersRequest',
                'Required parameter "AuthTuneConfigurationParametersRequest" was null or undefined when calling authTuneConfigurationParameters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/auth/{path}/tune`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthTuneConfigurationParametersRequestToJSON(requestParameters['AuthTuneConfigurationParametersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
     * Tune configuration parameters for a given auth path.
     */
    async authTuneConfigurationParameters(path: string, AuthTuneConfigurationParametersRequest: AuthTuneConfigurationParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.authTuneConfigurationParametersRaw({ path: path, AuthTuneConfigurationParametersRequest: AuthTuneConfigurationParametersRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Information about the host instance that this Vault server is running on.   The information that gets collected includes host hardware information, and CPU,   disk, and memory utilization
     * Information about the host instance that this Vault server is running on.
     */
    async collectHostInformationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectHostInformationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/host-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectHostInformationResponseFromJSON(jsonValue));
    }

    /**
     * Information about the host instance that this Vault server is running on.   The information that gets collected includes host hardware information, and CPU,   disk, and memory utilization
     * Information about the host instance that this Vault server is running on.
     */
    async collectHostInformation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectHostInformationResponse> {
        const response = await this.collectHostInformationRaw(initOverrides);
        return await response.value();
    }

    /**
     * This path responds to the following HTTP methods.   GET /    Returns a map of in-flight requests.
     * reports in-flight requests
     */
    async collectInFlightRequestInformationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/in-flight-req`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This path responds to the following HTTP methods.   GET /    Returns a map of in-flight requests.
     * reports in-flight requests
     */
    async collectInFlightRequestInformation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.collectInFlightRequestInformationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Configure the CORS settings.
     */
    async corsConfigureRaw(requestParameters: SystemApiCorsConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['CorsConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'CorsConfigureRequest',
                'Required parameter "CorsConfigureRequest" was null or undefined when calling corsConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/config/cors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CorsConfigureRequestToJSON(requestParameters['CorsConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure the CORS settings.
     */
    async corsConfigure(CorsConfigureRequest: CorsConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.corsConfigureRaw({ CorsConfigureRequest: CorsConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Remove any CORS settings.
     */
    async corsDeleteConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/cors`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove any CORS settings.
     */
    async corsDeleteConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.corsDeleteConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Return the current CORS settings.
     */
    async corsReadConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CorsReadConfigurationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/cors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CorsReadConfigurationResponseFromJSON(jsonValue));
    }

    /**
     * Return the current CORS settings.
     */
    async corsReadConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CorsReadConfigurationResponse> {
        const response = await this.corsReadConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create custom message
     */
    async createCustomMessageRaw(requestParameters: SystemApiCreateCustomMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['CreateCustomMessageRequest'] == null) {
            throw new runtime.RequiredError(
                'CreateCustomMessageRequest',
                'Required parameter "CreateCustomMessageRequest" was null or undefined when calling createCustomMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/config/ui/custom-messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomMessageRequestToJSON(requestParameters['CreateCustomMessageRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create custom message
     */
    async createCustomMessage(CreateCustomMessageRequest: CreateCustomMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.createCustomMessageRaw({ CreateCustomMessageRequest: CreateCustomMessageRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Decodes the encoded token with the otp.
     */
    async decodeTokenRaw(requestParameters: SystemApiDecodeTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['DecodeTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'DecodeTokenRequest',
                'Required parameter "DecodeTokenRequest" was null or undefined when calling decodeToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/decode-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DecodeTokenRequestToJSON(requestParameters['DecodeTokenRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decodes the encoded token with the otp.
     */
    async decodeToken(DecodeTokenRequest: DecodeTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.decodeTokenRaw({ DecodeTokenRequest: DecodeTokenRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async encryptionKeyConfigureRotationRaw(requestParameters: SystemApiEncryptionKeyConfigureRotationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['EncryptionKeyConfigureRotationRequest'] == null) {
            throw new runtime.RequiredError(
                'EncryptionKeyConfigureRotationRequest',
                'Required parameter "EncryptionKeyConfigureRotationRequest" was null or undefined when calling encryptionKeyConfigureRotation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/rotate/config`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EncryptionKeyConfigureRotationRequestToJSON(requestParameters['EncryptionKeyConfigureRotationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async encryptionKeyConfigureRotation(EncryptionKeyConfigureRotationRequest: EncryptionKeyConfigureRotationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.encryptionKeyConfigureRotationRaw({ EncryptionKeyConfigureRotationRequest: EncryptionKeyConfigureRotationRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async encryptionKeyReadRotationConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EncryptionKeyReadRotationConfigurationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/rotate/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EncryptionKeyReadRotationConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async encryptionKeyReadRotationConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EncryptionKeyReadRotationConfigurationResponse> {
        const response = await this.encryptionKeyReadRotationConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async encryptionKeyRotateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/rotate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async encryptionKeyRotate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.encryptionKeyRotateRaw(initOverrides);
        return await response.value();
    }

    /**
     * Provides information about the backend encryption key.
     */
    async encryptionKeyStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/key-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provides information about the backend encryption key.
     */
    async encryptionKeyStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.encryptionKeyStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async generateHashRaw(requestParameters: SystemApiGenerateHashOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateHashResponse>> {
        if (requestParameters['GenerateHashRequest'] == null) {
            throw new runtime.RequiredError(
                'GenerateHashRequest',
                'Required parameter "GenerateHashRequest" was null or undefined when calling generateHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/tools/hash`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateHashRequestToJSON(requestParameters['GenerateHashRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateHashResponseFromJSON(jsonValue));
    }

    /**
     */
    async generateHash(GenerateHashRequest: GenerateHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateHashResponse> {
        const response = await this.generateHashRaw({ GenerateHashRequest: GenerateHashRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async generateHashWithAlgorithmRaw(requestParameters: SystemApiGenerateHashWithAlgorithmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateHashWithAlgorithmResponse>> {
        if (requestParameters['urlalgorithm'] == null) {
            throw new runtime.RequiredError(
                'urlalgorithm',
                'Required parameter "urlalgorithm" was null or undefined when calling generateHashWithAlgorithm().'
            );
        }

        if (requestParameters['GenerateHashWithAlgorithmRequest'] == null) {
            throw new runtime.RequiredError(
                'GenerateHashWithAlgorithmRequest',
                'Required parameter "GenerateHashWithAlgorithmRequest" was null or undefined when calling generateHashWithAlgorithm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/tools/hash/{urlalgorithm}`.replace(`{${"urlalgorithm"}}`, encodeURIComponent(String(requestParameters['urlalgorithm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateHashWithAlgorithmRequestToJSON(requestParameters['GenerateHashWithAlgorithmRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateHashWithAlgorithmResponseFromJSON(jsonValue));
    }

    /**
     */
    async generateHashWithAlgorithm(urlalgorithm: string, GenerateHashWithAlgorithmRequest: GenerateHashWithAlgorithmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateHashWithAlgorithmResponse> {
        const response = await this.generateHashWithAlgorithmRaw({ urlalgorithm: urlalgorithm, GenerateHashWithAlgorithmRequest: GenerateHashWithAlgorithmRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async generateRandomRaw(requestParameters: SystemApiGenerateRandomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateRandomResponse>> {
        if (requestParameters['GenerateRandomRequest'] == null) {
            throw new runtime.RequiredError(
                'GenerateRandomRequest',
                'Required parameter "GenerateRandomRequest" was null or undefined when calling generateRandom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/tools/random`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateRandomRequestToJSON(requestParameters['GenerateRandomRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateRandomResponseFromJSON(jsonValue));
    }

    /**
     */
    async generateRandom(GenerateRandomRequest: GenerateRandomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateRandomResponse> {
        const response = await this.generateRandomRaw({ GenerateRandomRequest: GenerateRandomRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async generateRandomWithBytesRaw(requestParameters: SystemApiGenerateRandomWithBytesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateRandomWithBytesResponse>> {
        if (requestParameters['urlbytes'] == null) {
            throw new runtime.RequiredError(
                'urlbytes',
                'Required parameter "urlbytes" was null or undefined when calling generateRandomWithBytes().'
            );
        }

        if (requestParameters['GenerateRandomWithBytesRequest'] == null) {
            throw new runtime.RequiredError(
                'GenerateRandomWithBytesRequest',
                'Required parameter "GenerateRandomWithBytesRequest" was null or undefined when calling generateRandomWithBytes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/tools/random/{urlbytes}`.replace(`{${"urlbytes"}}`, encodeURIComponent(String(requestParameters['urlbytes']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateRandomWithBytesRequestToJSON(requestParameters['GenerateRandomWithBytesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateRandomWithBytesResponseFromJSON(jsonValue));
    }

    /**
     */
    async generateRandomWithBytes(urlbytes: string, GenerateRandomWithBytesRequest: GenerateRandomWithBytesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateRandomWithBytesResponse> {
        const response = await this.generateRandomWithBytesRaw({ urlbytes: urlbytes, GenerateRandomWithBytesRequest: GenerateRandomWithBytesRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async generateRandomWithSourceRaw(requestParameters: SystemApiGenerateRandomWithSourceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateRandomWithSourceResponse>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling generateRandomWithSource().'
            );
        }

        if (requestParameters['GenerateRandomWithSourceRequest'] == null) {
            throw new runtime.RequiredError(
                'GenerateRandomWithSourceRequest',
                'Required parameter "GenerateRandomWithSourceRequest" was null or undefined when calling generateRandomWithSource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/tools/random/{source}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateRandomWithSourceRequestToJSON(requestParameters['GenerateRandomWithSourceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateRandomWithSourceResponseFromJSON(jsonValue));
    }

    /**
     */
    async generateRandomWithSource(source: string, GenerateRandomWithSourceRequest: GenerateRandomWithSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateRandomWithSourceResponse> {
        const response = await this.generateRandomWithSourceRaw({ source: source, GenerateRandomWithSourceRequest: GenerateRandomWithSourceRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async generateRandomWithSourceAndBytesRaw(requestParameters: SystemApiGenerateRandomWithSourceAndBytesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateRandomWithSourceAndBytesResponse>> {
        if (requestParameters['source'] == null) {
            throw new runtime.RequiredError(
                'source',
                'Required parameter "source" was null or undefined when calling generateRandomWithSourceAndBytes().'
            );
        }

        if (requestParameters['urlbytes'] == null) {
            throw new runtime.RequiredError(
                'urlbytes',
                'Required parameter "urlbytes" was null or undefined when calling generateRandomWithSourceAndBytes().'
            );
        }

        if (requestParameters['GenerateRandomWithSourceAndBytesRequest'] == null) {
            throw new runtime.RequiredError(
                'GenerateRandomWithSourceAndBytesRequest',
                'Required parameter "GenerateRandomWithSourceAndBytesRequest" was null or undefined when calling generateRandomWithSourceAndBytes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/tools/random/{source}/{urlbytes}`.replace(`{${"source"}}`, encodeURIComponent(String(requestParameters['source']))).replace(`{${"urlbytes"}}`, encodeURIComponent(String(requestParameters['urlbytes']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateRandomWithSourceAndBytesRequestToJSON(requestParameters['GenerateRandomWithSourceAndBytesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateRandomWithSourceAndBytesResponseFromJSON(jsonValue));
    }

    /**
     */
    async generateRandomWithSourceAndBytes(source: string, urlbytes: string, GenerateRandomWithSourceAndBytesRequest: GenerateRandomWithSourceAndBytesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateRandomWithSourceAndBytesResponse> {
        const response = await this.generateRandomWithSourceAndBytesRaw({ source: source, urlbytes: urlbytes, GenerateRandomWithSourceAndBytesRequest: GenerateRandomWithSourceAndBytesRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async generateUtilizationReportRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateUtilizationReportResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/utilization-report`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateUtilizationReportResponseFromJSON(jsonValue));
    }

    /**
     */
    async generateUtilizationReport(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateUtilizationReportResponse> {
        const response = await this.generateUtilizationReportRaw(initOverrides);
        return await response.value();
    }

    /**
     * Check the HA status of a Vault cluster
     */
    async haStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HaStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/ha-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HaStatusResponseFromJSON(jsonValue));
    }

    /**
     * Check the HA status of a Vault cluster
     */
    async haStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HaStatusResponse> {
        const response = await this.haStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * The Vault must not have been previously initialized. The recovery options, as well as the stored shares option, are only available when using Vault HSM.
     * Initialize a new Vault.
     */
    async initializeRaw(requestParameters: SystemApiInitializeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['InitializeRequest'] == null) {
            throw new runtime.RequiredError(
                'InitializeRequest',
                'Required parameter "InitializeRequest" was null or undefined when calling initialize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/init`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitializeRequestToJSON(requestParameters['InitializeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The Vault must not have been previously initialized. The recovery options, as well as the stored shares option, are only available when using Vault HSM.
     * Initialize a new Vault.
     */
    async initialize(InitializeRequest: InitializeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.initializeRaw({ InitializeRequest: InitializeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Enable or disable collection of client count, set retention period, or set default reporting period.
     */
    async internalClientActivityConfigureRaw(requestParameters: SystemApiInternalClientActivityConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['InternalClientActivityConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'InternalClientActivityConfigureRequest',
                'Required parameter "InternalClientActivityConfigureRequest" was null or undefined when calling internalClientActivityConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/internal/counters/config`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InternalClientActivityConfigureRequestToJSON(requestParameters['InternalClientActivityConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable or disable collection of client count, set retention period, or set default reporting period.
     */
    async internalClientActivityConfigure(InternalClientActivityConfigureRequest: InternalClientActivityConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.internalClientActivityConfigureRaw({ InternalClientActivityConfigureRequest: InternalClientActivityConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Report the client count metrics, for this namespace and all child namespaces.
     */
    async internalClientActivityExportRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/counters/activity/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Report the client count metrics, for this namespace and all child namespaces.
     */
    async internalClientActivityExport(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.internalClientActivityExportRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read the client count tracking configuration.
     */
    async internalClientActivityReadConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/counters/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the client count tracking configuration.
     */
    async internalClientActivityReadConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.internalClientActivityReadConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Report the client count metrics, for this namespace and all child namespaces.
     */
    async internalClientActivityReportCountsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/counters/activity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Report the client count metrics, for this namespace and all child namespaces.
     */
    async internalClientActivityReportCounts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.internalClientActivityReportCountsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Report the number of clients for this month, for this namespace and all child namespaces.
     */
    async internalClientActivityReportCountsThisMonthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/counters/activity/monthly`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Report the number of clients for this month, for this namespace and all child namespaces.
     */
    async internalClientActivityReportCountsThisMonth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.internalClientActivityReportCountsThisMonthRaw(initOverrides);
        return await response.value();
    }

    /**
     * Backwards compatibility is not guaranteed for this API
     */
    async internalCountEntitiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalCountEntitiesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/counters/entities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalCountEntitiesResponseFromJSON(jsonValue));
    }

    /**
     * Backwards compatibility is not guaranteed for this API
     */
    async internalCountEntities(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalCountEntitiesResponse> {
        const response = await this.internalCountEntitiesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Backwards compatibility is not guaranteed for this API
     * @deprecated
     */
    async internalCountRequestsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/counters/requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Backwards compatibility is not guaranteed for this API
     * @deprecated
     */
    async internalCountRequests(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.internalCountRequestsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async internalGenerateOpenApiDocumentRaw(requestParameters: SystemApiInternalGenerateOpenApiDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        if (requestParameters['context'] != null) {
            queryParameters['context'] = requestParameters['context'];
        }

        if (requestParameters['generic_mount_paths'] != null) {
            queryParameters['generic_mount_paths'] = requestParameters['generic_mount_paths'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/specs/openapi`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async internalGenerateOpenApiDocument(context?: string, generic_mount_paths?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.internalGenerateOpenApiDocumentRaw({ context: context, generic_mount_paths: generic_mount_paths }, initOverrides);
        return await response.value();
    }

    /**
     */
    async internalGenerateOpenApiDocumentWithParametersRaw(requestParameters: SystemApiInternalGenerateOpenApiDocumentWithParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['InternalGenerateOpenApiDocumentWithParametersRequest'] == null) {
            throw new runtime.RequiredError(
                'InternalGenerateOpenApiDocumentWithParametersRequest',
                'Required parameter "InternalGenerateOpenApiDocumentWithParametersRequest" was null or undefined when calling internalGenerateOpenApiDocumentWithParameters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/internal/specs/openapi`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InternalGenerateOpenApiDocumentWithParametersRequestToJSON(requestParameters['InternalGenerateOpenApiDocumentWithParametersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async internalGenerateOpenApiDocumentWithParameters(InternalGenerateOpenApiDocumentWithParametersRequest: InternalGenerateOpenApiDocumentWithParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.internalGenerateOpenApiDocumentWithParametersRaw({ InternalGenerateOpenApiDocumentWithParametersRequest: InternalGenerateOpenApiDocumentWithParametersRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Expose the route entry and mount entry tables present in the router
     */
    async internalInspectRouterRaw(requestParameters: SystemApiInternalInspectRouterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling internalInspectRouter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/inspect/router/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters['tag']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Expose the route entry and mount entry tables present in the router
     */
    async internalInspectRouter(tag: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.internalInspectRouterRaw({ tag: tag }, initOverrides);
        return await response.value();
    }

    /**
     * Lists enabled feature flags.
     */
    async internalUiListEnabledFeatureFlagsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalUiListEnabledFeatureFlagsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/ui/feature-flags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalUiListEnabledFeatureFlagsResponseFromJSON(jsonValue));
    }

    /**
     * Lists enabled feature flags.
     */
    async internalUiListEnabledFeatureFlags(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalUiListEnabledFeatureFlagsResponse> {
        const response = await this.internalUiListEnabledFeatureFlagsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Lists all enabled and visible auth and secrets mounts.
     */
    async internalUiListEnabledVisibleMountsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalUiListEnabledVisibleMountsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/ui/mounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalUiListEnabledVisibleMountsResponseFromJSON(jsonValue));
    }

    /**
     * Lists all enabled and visible auth and secrets mounts.
     */
    async internalUiListEnabledVisibleMounts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalUiListEnabledVisibleMountsResponse> {
        const response = await this.internalUiListEnabledVisibleMountsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Backwards compatibility is not guaranteed for this API
     */
    async internalUiListNamespacesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalUiListNamespacesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/ui/namespaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalUiListNamespacesResponseFromJSON(jsonValue));
    }

    /**
     * Backwards compatibility is not guaranteed for this API
     */
    async internalUiListNamespaces(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalUiListNamespacesResponse> {
        const response = await this.internalUiListNamespacesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves Active post-login Custom Messages
     */
    async internalUiReadAuthenticatedActiveCustomMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalUiReadAuthenticatedActiveCustomMessagesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/ui/authenticated-messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalUiReadAuthenticatedActiveCustomMessagesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves Active post-login Custom Messages
     */
    async internalUiReadAuthenticatedActiveCustomMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalUiReadAuthenticatedActiveCustomMessagesResponse> {
        const response = await this.internalUiReadAuthenticatedActiveCustomMessagesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Return information about the given mount.
     */
    async internalUiReadMountInformationRaw(requestParameters: SystemApiInternalUiReadMountInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalUiReadMountInformationResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling internalUiReadMountInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/ui/mounts/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalUiReadMountInformationResponseFromJSON(jsonValue));
    }

    /**
     * Return information about the given mount.
     */
    async internalUiReadMountInformation(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalUiReadMountInformationResponse> {
        const response = await this.internalUiReadMountInformationRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * Backwards compatibility is not guaranteed for this API
     */
    async internalUiReadResultantAclRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalUiReadResultantAclResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/ui/resultant-acl`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalUiReadResultantAclResponseFromJSON(jsonValue));
    }

    /**
     * Backwards compatibility is not guaranteed for this API
     */
    async internalUiReadResultantAcl(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalUiReadResultantAclResponse | null | undefined > {
        const response = await this.internalUiReadResultantAclRaw(initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Retrieves Active pre-login Custom Messages
     */
    async internalUiReadUnauthenticatedActiveCustomMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalUiReadUnauthenticatedActiveCustomMessagesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/ui/unauthenticated-messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalUiReadUnauthenticatedActiveCustomMessagesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves Active pre-login Custom Messages
     */
    async internalUiReadUnauthenticatedActiveCustomMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalUiReadUnauthenticatedActiveCustomMessagesResponse> {
        const response = await this.internalUiReadUnauthenticatedActiveCustomMessagesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the high availability status and current leader instance of Vault.
     */
    async leaderStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeaderStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/leader`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaderStatusResponseFromJSON(jsonValue));
    }

    /**
     * Returns the high availability status and current leader instance of Vault.
     */
    async leaderStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeaderStatusResponse> {
        const response = await this.leaderStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async leasesCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeasesCountResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/leases/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeasesCountResponseFromJSON(jsonValue));
    }

    /**
     */
    async leasesCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeasesCountResponse> {
        const response = await this.leasesCountRaw(initOverrides);
        return await response.value();
    }

    /**
     * Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.  By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
     * Revokes all secrets or tokens generated under a given prefix immediately
     */
    async leasesForceRevokeLeaseWithPrefixRaw(requestParameters: SystemApiLeasesForceRevokeLeaseWithPrefixRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['prefix'] == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling leasesForceRevokeLeaseWithPrefix().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/leases/revoke-force/{prefix}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters['prefix']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.  By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
     * Revokes all secrets or tokens generated under a given prefix immediately
     */
    async leasesForceRevokeLeaseWithPrefix(prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesForceRevokeLeaseWithPrefixRaw({ prefix: prefix }, initOverrides);
        return await response.value();
    }

    /**
     * Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.  By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
     * Revokes all secrets or tokens generated under a given prefix immediately
     */
    async leasesForceRevokeLeaseWithPrefix2Raw(requestParameters: SystemApiLeasesForceRevokeLeaseWithPrefix2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['prefix'] == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling leasesForceRevokeLeaseWithPrefix2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/revoke-force/{prefix}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters['prefix']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.  By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
     * Revokes all secrets or tokens generated under a given prefix immediately
     */
    async leasesForceRevokeLeaseWithPrefix2(prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesForceRevokeLeaseWithPrefix2Raw({ prefix: prefix }, initOverrides);
        return await response.value();
    }

    /**
     */
    async leasesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeasesListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/leases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeasesListResponseFromJSON(jsonValue));
    }

    /**
     */
    async leasesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeasesListResponse> {
        const response = await this.leasesListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async leasesLookUpRaw(requestParameters: SystemApiLeasesLookUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeasesLookUpResponse>> {
        if (requestParameters['prefix'] == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling leasesLookUp().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling leasesLookUp().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/leases/lookup/{prefix}/`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters['prefix']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeasesLookUpResponseFromJSON(jsonValue));
    }

    /**
     */
    async leasesLookUp(prefix: string, list: LeasesLookUpListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeasesLookUpResponse> {
        const response = await this.leasesLookUpRaw({ prefix: prefix, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async leasesReadLeaseRaw(requestParameters: SystemApiLeasesReadLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeasesReadLeaseResponse>> {
        if (requestParameters['LeasesReadLeaseRequest'] == null) {
            throw new runtime.RequiredError(
                'LeasesReadLeaseRequest',
                'Required parameter "LeasesReadLeaseRequest" was null or undefined when calling leasesReadLease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/leases/lookup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeasesReadLeaseRequestToJSON(requestParameters['LeasesReadLeaseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeasesReadLeaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async leasesReadLease(LeasesReadLeaseRequest: LeasesReadLeaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeasesReadLeaseResponse> {
        const response = await this.leasesReadLeaseRaw({ LeasesReadLeaseRequest: LeasesReadLeaseRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Renews a lease, requesting to extend the lease.
     */
    async leasesRenewLeaseRaw(requestParameters: SystemApiLeasesRenewLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['LeasesRenewLeaseRequest'] == null) {
            throw new runtime.RequiredError(
                'LeasesRenewLeaseRequest',
                'Required parameter "LeasesRenewLeaseRequest" was null or undefined when calling leasesRenewLease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/leases/renew`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeasesRenewLeaseRequestToJSON(requestParameters['LeasesRenewLeaseRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renews a lease, requesting to extend the lease.
     */
    async leasesRenewLease(LeasesRenewLeaseRequest: LeasesRenewLeaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesRenewLeaseRaw({ LeasesRenewLeaseRequest: LeasesRenewLeaseRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Renews a lease, requesting to extend the lease.
     */
    async leasesRenewLease2Raw(requestParameters: SystemApiLeasesRenewLease2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['LeasesRenewLease2Request'] == null) {
            throw new runtime.RequiredError(
                'LeasesRenewLease2Request',
                'Required parameter "LeasesRenewLease2Request" was null or undefined when calling leasesRenewLease2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/renew`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeasesRenewLease2RequestToJSON(requestParameters['LeasesRenewLease2Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renews a lease, requesting to extend the lease.
     */
    async leasesRenewLease2(LeasesRenewLease2Request: LeasesRenewLease2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesRenewLease2Raw({ LeasesRenewLease2Request: LeasesRenewLease2Request }, initOverrides);
        return await response.value();
    }

    /**
     * Renews a lease, requesting to extend the lease.
     */
    async leasesRenewLeaseWithIdRaw(requestParameters: SystemApiLeasesRenewLeaseWithIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['url_lease_id'] == null) {
            throw new runtime.RequiredError(
                'url_lease_id',
                'Required parameter "url_lease_id" was null or undefined when calling leasesRenewLeaseWithId().'
            );
        }

        if (requestParameters['LeasesRenewLeaseWithIdRequest'] == null) {
            throw new runtime.RequiredError(
                'LeasesRenewLeaseWithIdRequest',
                'Required parameter "LeasesRenewLeaseWithIdRequest" was null or undefined when calling leasesRenewLeaseWithId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/leases/renew/{url_lease_id}`.replace(`{${"url_lease_id"}}`, encodeURIComponent(String(requestParameters['url_lease_id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeasesRenewLeaseWithIdRequestToJSON(requestParameters['LeasesRenewLeaseWithIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renews a lease, requesting to extend the lease.
     */
    async leasesRenewLeaseWithId(url_lease_id: string, LeasesRenewLeaseWithIdRequest: LeasesRenewLeaseWithIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesRenewLeaseWithIdRaw({ url_lease_id: url_lease_id, LeasesRenewLeaseWithIdRequest: LeasesRenewLeaseWithIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Renews a lease, requesting to extend the lease.
     */
    async leasesRenewLeaseWithId2Raw(requestParameters: SystemApiLeasesRenewLeaseWithId2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['url_lease_id'] == null) {
            throw new runtime.RequiredError(
                'url_lease_id',
                'Required parameter "url_lease_id" was null or undefined when calling leasesRenewLeaseWithId2().'
            );
        }

        if (requestParameters['LeasesRenewLeaseWithId2Request'] == null) {
            throw new runtime.RequiredError(
                'LeasesRenewLeaseWithId2Request',
                'Required parameter "LeasesRenewLeaseWithId2Request" was null or undefined when calling leasesRenewLeaseWithId2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/renew/{url_lease_id}`.replace(`{${"url_lease_id"}}`, encodeURIComponent(String(requestParameters['url_lease_id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeasesRenewLeaseWithId2RequestToJSON(requestParameters['LeasesRenewLeaseWithId2Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renews a lease, requesting to extend the lease.
     */
    async leasesRenewLeaseWithId2(url_lease_id: string, LeasesRenewLeaseWithId2Request: LeasesRenewLeaseWithId2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesRenewLeaseWithId2Raw({ url_lease_id: url_lease_id, LeasesRenewLeaseWithId2Request: LeasesRenewLeaseWithId2Request }, initOverrides);
        return await response.value();
    }

    /**
     * Revokes a lease immediately.
     */
    async leasesRevokeLeaseRaw(requestParameters: SystemApiLeasesRevokeLeaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['LeasesRevokeLeaseRequest'] == null) {
            throw new runtime.RequiredError(
                'LeasesRevokeLeaseRequest',
                'Required parameter "LeasesRevokeLeaseRequest" was null or undefined when calling leasesRevokeLease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/leases/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeasesRevokeLeaseRequestToJSON(requestParameters['LeasesRevokeLeaseRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes a lease immediately.
     */
    async leasesRevokeLease(LeasesRevokeLeaseRequest: LeasesRevokeLeaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesRevokeLeaseRaw({ LeasesRevokeLeaseRequest: LeasesRevokeLeaseRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Revokes a lease immediately.
     */
    async leasesRevokeLease2Raw(requestParameters: SystemApiLeasesRevokeLease2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['LeasesRevokeLease2Request'] == null) {
            throw new runtime.RequiredError(
                'LeasesRevokeLease2Request',
                'Required parameter "LeasesRevokeLease2Request" was null or undefined when calling leasesRevokeLease2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeasesRevokeLease2RequestToJSON(requestParameters['LeasesRevokeLease2Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes a lease immediately.
     */
    async leasesRevokeLease2(LeasesRevokeLease2Request: LeasesRevokeLease2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesRevokeLease2Raw({ LeasesRevokeLease2Request: LeasesRevokeLease2Request }, initOverrides);
        return await response.value();
    }

    /**
     * Revokes a lease immediately.
     */
    async leasesRevokeLeaseWithIdRaw(requestParameters: SystemApiLeasesRevokeLeaseWithIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['url_lease_id'] == null) {
            throw new runtime.RequiredError(
                'url_lease_id',
                'Required parameter "url_lease_id" was null or undefined when calling leasesRevokeLeaseWithId().'
            );
        }

        if (requestParameters['LeasesRevokeLeaseWithIdRequest'] == null) {
            throw new runtime.RequiredError(
                'LeasesRevokeLeaseWithIdRequest',
                'Required parameter "LeasesRevokeLeaseWithIdRequest" was null or undefined when calling leasesRevokeLeaseWithId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/leases/revoke/{url_lease_id}`.replace(`{${"url_lease_id"}}`, encodeURIComponent(String(requestParameters['url_lease_id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeasesRevokeLeaseWithIdRequestToJSON(requestParameters['LeasesRevokeLeaseWithIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes a lease immediately.
     */
    async leasesRevokeLeaseWithId(url_lease_id: string, LeasesRevokeLeaseWithIdRequest: LeasesRevokeLeaseWithIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesRevokeLeaseWithIdRaw({ url_lease_id: url_lease_id, LeasesRevokeLeaseWithIdRequest: LeasesRevokeLeaseWithIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Revokes a lease immediately.
     */
    async leasesRevokeLeaseWithId2Raw(requestParameters: SystemApiLeasesRevokeLeaseWithId2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['url_lease_id'] == null) {
            throw new runtime.RequiredError(
                'url_lease_id',
                'Required parameter "url_lease_id" was null or undefined when calling leasesRevokeLeaseWithId2().'
            );
        }

        if (requestParameters['LeasesRevokeLeaseWithId2Request'] == null) {
            throw new runtime.RequiredError(
                'LeasesRevokeLeaseWithId2Request',
                'Required parameter "LeasesRevokeLeaseWithId2Request" was null or undefined when calling leasesRevokeLeaseWithId2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/revoke/{url_lease_id}`.replace(`{${"url_lease_id"}}`, encodeURIComponent(String(requestParameters['url_lease_id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeasesRevokeLeaseWithId2RequestToJSON(requestParameters['LeasesRevokeLeaseWithId2Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes a lease immediately.
     */
    async leasesRevokeLeaseWithId2(url_lease_id: string, LeasesRevokeLeaseWithId2Request: LeasesRevokeLeaseWithId2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesRevokeLeaseWithId2Raw({ url_lease_id: url_lease_id, LeasesRevokeLeaseWithId2Request: LeasesRevokeLeaseWithId2Request }, initOverrides);
        return await response.value();
    }

    /**
     * Revokes all secrets (via a lease ID prefix) or tokens (via the tokens\' path property) generated under a given prefix immediately.
     */
    async leasesRevokeLeaseWithPrefixRaw(requestParameters: SystemApiLeasesRevokeLeaseWithPrefixOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['prefix'] == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling leasesRevokeLeaseWithPrefix().'
            );
        }

        if (requestParameters['LeasesRevokeLeaseWithPrefixRequest'] == null) {
            throw new runtime.RequiredError(
                'LeasesRevokeLeaseWithPrefixRequest',
                'Required parameter "LeasesRevokeLeaseWithPrefixRequest" was null or undefined when calling leasesRevokeLeaseWithPrefix().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/leases/revoke-prefix/{prefix}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters['prefix']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeasesRevokeLeaseWithPrefixRequestToJSON(requestParameters['LeasesRevokeLeaseWithPrefixRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes all secrets (via a lease ID prefix) or tokens (via the tokens\' path property) generated under a given prefix immediately.
     */
    async leasesRevokeLeaseWithPrefix(prefix: string, LeasesRevokeLeaseWithPrefixRequest: LeasesRevokeLeaseWithPrefixRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesRevokeLeaseWithPrefixRaw({ prefix: prefix, LeasesRevokeLeaseWithPrefixRequest: LeasesRevokeLeaseWithPrefixRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Revokes all secrets (via a lease ID prefix) or tokens (via the tokens\' path property) generated under a given prefix immediately.
     */
    async leasesRevokeLeaseWithPrefix2Raw(requestParameters: SystemApiLeasesRevokeLeaseWithPrefix2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['prefix'] == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling leasesRevokeLeaseWithPrefix2().'
            );
        }

        if (requestParameters['LeasesRevokeLeaseWithPrefix2Request'] == null) {
            throw new runtime.RequiredError(
                'LeasesRevokeLeaseWithPrefix2Request',
                'Required parameter "LeasesRevokeLeaseWithPrefix2Request" was null or undefined when calling leasesRevokeLeaseWithPrefix2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/revoke-prefix/{prefix}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters['prefix']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeasesRevokeLeaseWithPrefix2RequestToJSON(requestParameters['LeasesRevokeLeaseWithPrefix2Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes all secrets (via a lease ID prefix) or tokens (via the tokens\' path property) generated under a given prefix immediately.
     */
    async leasesRevokeLeaseWithPrefix2(prefix: string, LeasesRevokeLeaseWithPrefix2Request: LeasesRevokeLeaseWithPrefix2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesRevokeLeaseWithPrefix2Raw({ prefix: prefix, LeasesRevokeLeaseWithPrefix2Request: LeasesRevokeLeaseWithPrefix2Request }, initOverrides);
        return await response.value();
    }

    /**
     */
    async leasesTidyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/leases/tidy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async leasesTidy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.leasesTidyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the available and enabled experiments
     */
    async listExperimentalFeaturesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/experiments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the available and enabled experiments
     */
    async listExperimentalFeatures(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.listExperimentalFeaturesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Report the locked user count metrics, for this namespace and all child namespaces.
     */
    async lockedUsersListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/locked-users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Report the locked user count metrics, for this namespace and all child namespaces.
     */
    async lockedUsersList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.lockedUsersListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Unlocks the user with given mount_accessor and alias_identifier
     */
    async lockedUsersUnlockRaw(requestParameters: SystemApiLockedUsersUnlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['alias_identifier'] == null) {
            throw new runtime.RequiredError(
                'alias_identifier',
                'Required parameter "alias_identifier" was null or undefined when calling lockedUsersUnlock().'
            );
        }

        if (requestParameters['mount_accessor'] == null) {
            throw new runtime.RequiredError(
                'mount_accessor',
                'Required parameter "mount_accessor" was null or undefined when calling lockedUsersUnlock().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/locked-users/{mount_accessor}/unlock/{alias_identifier}`.replace(`{${"alias_identifier"}}`, encodeURIComponent(String(requestParameters['alias_identifier']))).replace(`{${"mount_accessor"}}`, encodeURIComponent(String(requestParameters['mount_accessor']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unlocks the user with given mount_accessor and alias_identifier
     */
    async lockedUsersUnlock(alias_identifier: string, mount_accessor: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.lockedUsersUnlockRaw({ alias_identifier: alias_identifier, mount_accessor: mount_accessor }, initOverrides);
        return await response.value();
    }

    /**
     * Read the log level for all existing loggers.
     */
    async loggersReadVerbosityLevelRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/loggers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the log level for all existing loggers.
     */
    async loggersReadVerbosityLevel(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.loggersReadVerbosityLevelRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read the log level for a single logger.
     */
    async loggersReadVerbosityLevelForRaw(requestParameters: SystemApiLoggersReadVerbosityLevelForRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling loggersReadVerbosityLevelFor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/loggers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the log level for a single logger.
     */
    async loggersReadVerbosityLevelFor(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.loggersReadVerbosityLevelForRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Revert the all loggers to use log level provided in config.
     */
    async loggersRevertVerbosityLevelRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/loggers`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revert the all loggers to use log level provided in config.
     */
    async loggersRevertVerbosityLevel(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.loggersRevertVerbosityLevelRaw(initOverrides);
        return await response.value();
    }

    /**
     * Revert a single logger to use log level provided in config.
     */
    async loggersRevertVerbosityLevelForRaw(requestParameters: SystemApiLoggersRevertVerbosityLevelForRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling loggersRevertVerbosityLevelFor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/loggers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revert a single logger to use log level provided in config.
     */
    async loggersRevertVerbosityLevelFor(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.loggersRevertVerbosityLevelForRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Modify the log level for all existing loggers.
     */
    async loggersUpdateVerbosityLevelRaw(requestParameters: SystemApiLoggersUpdateVerbosityLevelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['LoggersUpdateVerbosityLevelRequest'] == null) {
            throw new runtime.RequiredError(
                'LoggersUpdateVerbosityLevelRequest',
                'Required parameter "LoggersUpdateVerbosityLevelRequest" was null or undefined when calling loggersUpdateVerbosityLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/loggers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoggersUpdateVerbosityLevelRequestToJSON(requestParameters['LoggersUpdateVerbosityLevelRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Modify the log level for all existing loggers.
     */
    async loggersUpdateVerbosityLevel(LoggersUpdateVerbosityLevelRequest: LoggersUpdateVerbosityLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.loggersUpdateVerbosityLevelRaw({ LoggersUpdateVerbosityLevelRequest: LoggersUpdateVerbosityLevelRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Modify the log level of a single logger.
     */
    async loggersUpdateVerbosityLevelForRaw(requestParameters: SystemApiLoggersUpdateVerbosityLevelForOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling loggersUpdateVerbosityLevelFor().'
            );
        }

        if (requestParameters['LoggersUpdateVerbosityLevelForRequest'] == null) {
            throw new runtime.RequiredError(
                'LoggersUpdateVerbosityLevelForRequest',
                'Required parameter "LoggersUpdateVerbosityLevelForRequest" was null or undefined when calling loggersUpdateVerbosityLevelFor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/loggers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoggersUpdateVerbosityLevelForRequestToJSON(requestParameters['LoggersUpdateVerbosityLevelForRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Modify the log level of a single logger.
     */
    async loggersUpdateVerbosityLevelFor(name: string, LoggersUpdateVerbosityLevelForRequest: LoggersUpdateVerbosityLevelForRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.loggersUpdateVerbosityLevelForRaw({ name: name, LoggersUpdateVerbosityLevelForRequest: LoggersUpdateVerbosityLevelForRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async metricsRaw(requestParameters: SystemApiMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async metrics(format?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.metricsRaw({ format: format }, initOverrides);
        return await response.value();
    }

    /**
     * Validates the login for the given MFA methods. Upon successful validation, it returns an auth response containing the client token
     */
    async mfaValidateRaw(requestParameters: SystemApiMfaValidateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['MfaValidateRequest'] == null) {
            throw new runtime.RequiredError(
                'MfaValidateRequest',
                'Required parameter "MfaValidateRequest" was null or undefined when calling mfaValidate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/mfa/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaValidateRequestToJSON(requestParameters['MfaValidateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validates the login for the given MFA methods. Upon successful validation, it returns an auth response containing the client token
     */
    async mfaValidate(MfaValidateRequest: MfaValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mfaValidateRaw({ MfaValidateRequest: MfaValidateRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async monitorRaw(requestParameters: SystemApiMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        if (requestParameters['log_format'] != null) {
            queryParameters['log_format'] = requestParameters['log_format'];
        }

        if (requestParameters['log_level'] != null) {
            queryParameters['log_level'] = requestParameters['log_level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/monitor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async monitor(log_format?: string, log_level?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.monitorRaw({ log_format: log_format, log_level: log_level }, initOverrides);
        return await response.value();
    }

    /**
     * Disable the mount point specified at the given path.
     */
    async mountsDisableSecretsEngineRaw(requestParameters: SystemApiMountsDisableSecretsEngineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling mountsDisableSecretsEngine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mounts/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable the mount point specified at the given path.
     */
    async mountsDisableSecretsEngine(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mountsDisableSecretsEngineRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * Enable a new secrets engine at the given path.
     */
    async mountsEnableSecretsEngineRaw(requestParameters: SystemApiMountsEnableSecretsEngineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling mountsEnableSecretsEngine().'
            );
        }

        if (requestParameters['MountsEnableSecretsEngineRequest'] == null) {
            throw new runtime.RequiredError(
                'MountsEnableSecretsEngineRequest',
                'Required parameter "MountsEnableSecretsEngineRequest" was null or undefined when calling mountsEnableSecretsEngine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/mounts/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MountsEnableSecretsEngineRequestToJSON(requestParameters['MountsEnableSecretsEngineRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable a new secrets engine at the given path.
     */
    async mountsEnableSecretsEngine(path: string, MountsEnableSecretsEngineRequest: MountsEnableSecretsEngineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mountsEnableSecretsEngineRaw({ path: path, MountsEnableSecretsEngineRequest: MountsEnableSecretsEngineRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async mountsListSecretsEnginesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mountsListSecretsEngines(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mountsListSecretsEnginesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read the configuration of the secret engine at the given path.
     */
    async mountsReadConfigurationRaw(requestParameters: SystemApiMountsReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MountsReadConfigurationResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling mountsReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mounts/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MountsReadConfigurationResponseFromJSON(jsonValue));
    }

    /**
     * Read the configuration of the secret engine at the given path.
     */
    async mountsReadConfiguration(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MountsReadConfigurationResponse> {
        const response = await this.mountsReadConfigurationRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async mountsReadTuningInformationRaw(requestParameters: SystemApiMountsReadTuningInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MountsReadTuningInformationResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling mountsReadTuningInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mounts/{path}/tune`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MountsReadTuningInformationResponseFromJSON(jsonValue));
    }

    /**
     */
    async mountsReadTuningInformation(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MountsReadTuningInformationResponse> {
        const response = await this.mountsReadTuningInformationRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     */
    async mountsTuneConfigurationParametersRaw(requestParameters: SystemApiMountsTuneConfigurationParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling mountsTuneConfigurationParameters().'
            );
        }

        if (requestParameters['MountsTuneConfigurationParametersRequest'] == null) {
            throw new runtime.RequiredError(
                'MountsTuneConfigurationParametersRequest',
                'Required parameter "MountsTuneConfigurationParametersRequest" was null or undefined when calling mountsTuneConfigurationParameters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/mounts/{path}/tune`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MountsTuneConfigurationParametersRequestToJSON(requestParameters['MountsTuneConfigurationParametersRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mountsTuneConfigurationParameters(path: string, MountsTuneConfigurationParametersRequest: MountsTuneConfigurationParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.mountsTuneConfigurationParametersRaw({ path: path, MountsTuneConfigurationParametersRequest: MountsTuneConfigurationParametersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pluginsCatalogListPluginsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginsCatalogListPluginsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/catalog`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginsCatalogListPluginsResponseFromJSON(jsonValue));
    }

    /**
     */
    async pluginsCatalogListPlugins(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginsCatalogListPluginsResponse> {
        const response = await this.pluginsCatalogListPluginsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List the plugins in the catalog.
     */
    async pluginsCatalogListPluginsWithTypeRaw(requestParameters: SystemApiPluginsCatalogListPluginsWithTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginsCatalogListPluginsWithTypeResponse>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling pluginsCatalogListPluginsWithType().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pluginsCatalogListPluginsWithType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/catalog/{type}/`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginsCatalogListPluginsWithTypeResponseFromJSON(jsonValue));
    }

    /**
     * List the plugins in the catalog.
     */
    async pluginsCatalogListPluginsWithType(type: string, list: PluginsCatalogListPluginsWithTypeListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginsCatalogListPluginsWithTypeResponse> {
        const response = await this.pluginsCatalogListPluginsWithTypeRaw({ type: type, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Create or update the pinned version for a plugin with a given type and name.
     */
    async pluginsCatalogPinsCreatePinnedVersionRaw(requestParameters: SystemApiPluginsCatalogPinsCreatePinnedVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pluginsCatalogPinsCreatePinnedVersion().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling pluginsCatalogPinsCreatePinnedVersion().'
            );
        }

        if (requestParameters['PluginsCatalogPinsCreatePinnedVersionRequest'] == null) {
            throw new runtime.RequiredError(
                'PluginsCatalogPinsCreatePinnedVersionRequest',
                'Required parameter "PluginsCatalogPinsCreatePinnedVersionRequest" was null or undefined when calling pluginsCatalogPinsCreatePinnedVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/plugins/pins/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PluginsCatalogPinsCreatePinnedVersionRequestToJSON(requestParameters['PluginsCatalogPinsCreatePinnedVersionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create or update the pinned version for a plugin with a given type and name.
     */
    async pluginsCatalogPinsCreatePinnedVersion(name: string, type: string, PluginsCatalogPinsCreatePinnedVersionRequest: PluginsCatalogPinsCreatePinnedVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pluginsCatalogPinsCreatePinnedVersionRaw({ name: name, type: type, PluginsCatalogPinsCreatePinnedVersionRequest: PluginsCatalogPinsCreatePinnedVersionRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pluginsCatalogPinsListPinnedVersionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginsCatalogPinsListPinnedVersionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/pins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginsCatalogPinsListPinnedVersionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async pluginsCatalogPinsListPinnedVersions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginsCatalogPinsListPinnedVersionsResponse> {
        const response = await this.pluginsCatalogPinsListPinnedVersionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Return the pinned version for the plugin with the given type and name.
     */
    async pluginsCatalogPinsReadPinnedVersionRaw(requestParameters: SystemApiPluginsCatalogPinsReadPinnedVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginsCatalogPinsReadPinnedVersionResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pluginsCatalogPinsReadPinnedVersion().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling pluginsCatalogPinsReadPinnedVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/pins/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginsCatalogPinsReadPinnedVersionResponseFromJSON(jsonValue));
    }

    /**
     * Return the pinned version for the plugin with the given type and name.
     */
    async pluginsCatalogPinsReadPinnedVersion(name: string, type: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginsCatalogPinsReadPinnedVersionResponse> {
        const response = await this.pluginsCatalogPinsReadPinnedVersionRaw({ name: name, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Remove any pinned version for the plugin with the given type and name.
     */
    async pluginsCatalogPinsRemovePinnedVersionRaw(requestParameters: SystemApiPluginsCatalogPinsRemovePinnedVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pluginsCatalogPinsRemovePinnedVersion().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling pluginsCatalogPinsRemovePinnedVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/pins/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove any pinned version for the plugin with the given type and name.
     */
    async pluginsCatalogPinsRemovePinnedVersion(name: string, type: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pluginsCatalogPinsRemovePinnedVersionRaw({ name: name, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Return the configuration data for the plugin with the given name.
     */
    async pluginsCatalogReadPluginConfigurationRaw(requestParameters: SystemApiPluginsCatalogReadPluginConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginsCatalogReadPluginConfigurationResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pluginsCatalogReadPluginConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/catalog/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginsCatalogReadPluginConfigurationResponseFromJSON(jsonValue));
    }

    /**
     * Return the configuration data for the plugin with the given name.
     */
    async pluginsCatalogReadPluginConfiguration(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginsCatalogReadPluginConfigurationResponse> {
        const response = await this.pluginsCatalogReadPluginConfigurationRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Return the configuration data for the plugin with the given name.
     */
    async pluginsCatalogReadPluginConfigurationWithTypeRaw(requestParameters: SystemApiPluginsCatalogReadPluginConfigurationWithTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginsCatalogReadPluginConfigurationWithTypeResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pluginsCatalogReadPluginConfigurationWithType().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling pluginsCatalogReadPluginConfigurationWithType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/catalog/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginsCatalogReadPluginConfigurationWithTypeResponseFromJSON(jsonValue));
    }

    /**
     * Return the configuration data for the plugin with the given name.
     */
    async pluginsCatalogReadPluginConfigurationWithType(name: string, type: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginsCatalogReadPluginConfigurationWithTypeResponse> {
        const response = await this.pluginsCatalogReadPluginConfigurationWithTypeRaw({ name: name, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Register a new plugin, or updates an existing one with the supplied name.
     */
    async pluginsCatalogRegisterPluginRaw(requestParameters: SystemApiPluginsCatalogRegisterPluginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pluginsCatalogRegisterPlugin().'
            );
        }

        if (requestParameters['PluginsCatalogRegisterPluginRequest'] == null) {
            throw new runtime.RequiredError(
                'PluginsCatalogRegisterPluginRequest',
                'Required parameter "PluginsCatalogRegisterPluginRequest" was null or undefined when calling pluginsCatalogRegisterPlugin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/plugins/catalog/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PluginsCatalogRegisterPluginRequestToJSON(requestParameters['PluginsCatalogRegisterPluginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register a new plugin, or updates an existing one with the supplied name.
     */
    async pluginsCatalogRegisterPlugin(name: string, PluginsCatalogRegisterPluginRequest: PluginsCatalogRegisterPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pluginsCatalogRegisterPluginRaw({ name: name, PluginsCatalogRegisterPluginRequest: PluginsCatalogRegisterPluginRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Register a new plugin, or updates an existing one with the supplied name.
     */
    async pluginsCatalogRegisterPluginWithTypeRaw(requestParameters: SystemApiPluginsCatalogRegisterPluginWithTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pluginsCatalogRegisterPluginWithType().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling pluginsCatalogRegisterPluginWithType().'
            );
        }

        if (requestParameters['PluginsCatalogRegisterPluginWithTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'PluginsCatalogRegisterPluginWithTypeRequest',
                'Required parameter "PluginsCatalogRegisterPluginWithTypeRequest" was null or undefined when calling pluginsCatalogRegisterPluginWithType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/plugins/catalog/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PluginsCatalogRegisterPluginWithTypeRequestToJSON(requestParameters['PluginsCatalogRegisterPluginWithTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register a new plugin, or updates an existing one with the supplied name.
     */
    async pluginsCatalogRegisterPluginWithType(name: string, type: string, PluginsCatalogRegisterPluginWithTypeRequest: PluginsCatalogRegisterPluginWithTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pluginsCatalogRegisterPluginWithTypeRaw({ name: name, type: type, PluginsCatalogRegisterPluginWithTypeRequest: PluginsCatalogRegisterPluginWithTypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Remove the plugin with the given name.
     */
    async pluginsCatalogRemovePluginRaw(requestParameters: SystemApiPluginsCatalogRemovePluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pluginsCatalogRemovePlugin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/catalog/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the plugin with the given name.
     */
    async pluginsCatalogRemovePlugin(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pluginsCatalogRemovePluginRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Remove the plugin with the given name.
     */
    async pluginsCatalogRemovePluginWithTypeRaw(requestParameters: SystemApiPluginsCatalogRemovePluginWithTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pluginsCatalogRemovePluginWithType().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling pluginsCatalogRemovePluginWithType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/catalog/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the plugin with the given name.
     */
    async pluginsCatalogRemovePluginWithType(name: string, type: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pluginsCatalogRemovePluginWithTypeRaw({ name: name, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Either the plugin name (`plugin`) or the desired plugin backend mounts (`mounts`) must be provided, but not both. In the case that the plugin name is provided, all mounted paths that use that plugin backend will be reloaded.  If (`scope`) is provided and is (`global`), the plugin(s) are reloaded globally.
     * Reload mounted plugin backends.
     */
    async pluginsReloadBackendsRaw(requestParameters: SystemApiPluginsReloadBackendsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginsReloadBackendsResponse>> {
        if (requestParameters['PluginsReloadBackendsRequest'] == null) {
            throw new runtime.RequiredError(
                'PluginsReloadBackendsRequest',
                'Required parameter "PluginsReloadBackendsRequest" was null or undefined when calling pluginsReloadBackends().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/plugins/reload/backend`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PluginsReloadBackendsRequestToJSON(requestParameters['PluginsReloadBackendsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginsReloadBackendsResponseFromJSON(jsonValue));
    }

    /**
     * Either the plugin name (`plugin`) or the desired plugin backend mounts (`mounts`) must be provided, but not both. In the case that the plugin name is provided, all mounted paths that use that plugin backend will be reloaded.  If (`scope`) is provided and is (`global`), the plugin(s) are reloaded globally.
     * Reload mounted plugin backends.
     */
    async pluginsReloadBackends(PluginsReloadBackendsRequest: PluginsReloadBackendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginsReloadBackendsResponse> {
        const response = await this.pluginsReloadBackendsRaw({ PluginsReloadBackendsRequest: PluginsReloadBackendsRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async pluginsRuntimesCatalogListPluginsRuntimesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginsRuntimesCatalogListPluginsRuntimesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/runtimes/catalog`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginsRuntimesCatalogListPluginsRuntimesResponseFromJSON(jsonValue));
    }

    /**
     */
    async pluginsRuntimesCatalogListPluginsRuntimes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginsRuntimesCatalogListPluginsRuntimesResponse> {
        const response = await this.pluginsRuntimesCatalogListPluginsRuntimesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async pluginsRuntimesCatalogListPluginsRuntimes_4Raw(requestParameters: SystemApiPluginsRuntimesCatalogListPluginsRuntimes0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginsRuntimesCatalogListPluginsRuntimesResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling pluginsRuntimesCatalogListPluginsRuntimes_4().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/runtimes/catalog/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginsRuntimesCatalogListPluginsRuntimesResponseFromJSON(jsonValue));
    }

    /**
     */
    async pluginsRuntimesCatalogListPluginsRuntimes_4(list: PluginsRuntimesCatalogListPluginsRuntimes0ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginsRuntimesCatalogListPluginsRuntimesResponse> {
        const response = await this.pluginsRuntimesCatalogListPluginsRuntimes_4Raw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Return the configuration data for the plugin runtime with the given name.
     */
    async pluginsRuntimesCatalogReadPluginRuntimeConfigurationRaw(requestParameters: SystemApiPluginsRuntimesCatalogReadPluginRuntimeConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginsRuntimesCatalogReadPluginRuntimeConfigurationResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pluginsRuntimesCatalogReadPluginRuntimeConfiguration().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling pluginsRuntimesCatalogReadPluginRuntimeConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/runtimes/catalog/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginsRuntimesCatalogReadPluginRuntimeConfigurationResponseFromJSON(jsonValue));
    }

    /**
     * Return the configuration data for the plugin runtime with the given name.
     */
    async pluginsRuntimesCatalogReadPluginRuntimeConfiguration(name: string, type: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginsRuntimesCatalogReadPluginRuntimeConfigurationResponse> {
        const response = await this.pluginsRuntimesCatalogReadPluginRuntimeConfigurationRaw({ name: name, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Register a new plugin runtime, or updates an existing one with the supplied name.
     */
    async pluginsRuntimesCatalogRegisterPluginRuntimeRaw(requestParameters: SystemApiPluginsRuntimesCatalogRegisterPluginRuntimeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pluginsRuntimesCatalogRegisterPluginRuntime().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling pluginsRuntimesCatalogRegisterPluginRuntime().'
            );
        }

        if (requestParameters['PluginsRuntimesCatalogRegisterPluginRuntimeRequest'] == null) {
            throw new runtime.RequiredError(
                'PluginsRuntimesCatalogRegisterPluginRuntimeRequest',
                'Required parameter "PluginsRuntimesCatalogRegisterPluginRuntimeRequest" was null or undefined when calling pluginsRuntimesCatalogRegisterPluginRuntime().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/plugins/runtimes/catalog/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PluginsRuntimesCatalogRegisterPluginRuntimeRequestToJSON(requestParameters['PluginsRuntimesCatalogRegisterPluginRuntimeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register a new plugin runtime, or updates an existing one with the supplied name.
     */
    async pluginsRuntimesCatalogRegisterPluginRuntime(name: string, type: string, PluginsRuntimesCatalogRegisterPluginRuntimeRequest: PluginsRuntimesCatalogRegisterPluginRuntimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pluginsRuntimesCatalogRegisterPluginRuntimeRaw({ name: name, type: type, PluginsRuntimesCatalogRegisterPluginRuntimeRequest: PluginsRuntimesCatalogRegisterPluginRuntimeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Remove the plugin runtime with the given name.
     */
    async pluginsRuntimesCatalogRemovePluginRuntimeRaw(requestParameters: SystemApiPluginsRuntimesCatalogRemovePluginRuntimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling pluginsRuntimesCatalogRemovePluginRuntime().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling pluginsRuntimesCatalogRemovePluginRuntime().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/runtimes/catalog/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the plugin runtime with the given name.
     */
    async pluginsRuntimesCatalogRemovePluginRuntime(name: string, type: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pluginsRuntimesCatalogRemovePluginRuntimeRaw({ name: name, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Delete the ACL policy with the given name.
     */
    async policiesDeleteAclPolicyRaw(requestParameters: SystemApiPoliciesDeleteAclPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling policiesDeleteAclPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/acl/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the ACL policy with the given name.
     */
    async policiesDeleteAclPolicy(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.policiesDeleteAclPolicyRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Delete the policy with the given name.
     */
    async policiesDeleteAclPolicy2Raw(requestParameters: SystemApiPoliciesDeleteAclPolicy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling policiesDeleteAclPolicy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policy/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the policy with the given name.
     */
    async policiesDeleteAclPolicy2(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.policiesDeleteAclPolicy2Raw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a password policy.
     */
    async policiesDeletePasswordPolicyRaw(requestParameters: SystemApiPoliciesDeletePasswordPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling policiesDeletePasswordPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/password/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a password policy.
     */
    async policiesDeletePasswordPolicy(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.policiesDeletePasswordPolicyRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Generate a password from an existing password policy.
     */
    async policiesGeneratePasswordFromPasswordPolicyRaw(requestParameters: SystemApiPoliciesGeneratePasswordFromPasswordPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PoliciesGeneratePasswordFromPasswordPolicyResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling policiesGeneratePasswordFromPasswordPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/password/{name}/generate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoliciesGeneratePasswordFromPasswordPolicyResponseFromJSON(jsonValue));
    }

    /**
     * Generate a password from an existing password policy.
     */
    async policiesGeneratePasswordFromPasswordPolicy(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PoliciesGeneratePasswordFromPasswordPolicyResponse> {
        const response = await this.policiesGeneratePasswordFromPasswordPolicyRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async policiesListAclPoliciesRaw(requestParameters: SystemApiPoliciesListAclPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PoliciesListAclPoliciesResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling policiesListAclPolicies().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/acl/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoliciesListAclPoliciesResponseFromJSON(jsonValue));
    }

    /**
     */
    async policiesListAclPolicies(list: PoliciesListAclPoliciesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PoliciesListAclPoliciesResponse> {
        const response = await this.policiesListAclPoliciesRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async policiesListAclPolicies2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PoliciesListAclPolicies2Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoliciesListAclPolicies2ResponseFromJSON(jsonValue));
    }

    /**
     */
    async policiesListAclPolicies2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PoliciesListAclPolicies2Response> {
        const response = await this.policiesListAclPolicies2Raw(initOverrides);
        return await response.value();
    }

    /**
     */
    async policiesListAclPolicies3Raw(requestParameters: SystemApiPoliciesListAclPolicies3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PoliciesListAclPolicies3Response>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling policiesListAclPolicies3().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policy/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoliciesListAclPolicies3ResponseFromJSON(jsonValue));
    }

    /**
     */
    async policiesListAclPolicies3(list: PoliciesListAclPolicies3ListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PoliciesListAclPolicies3Response> {
        const response = await this.policiesListAclPolicies3Raw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List the existing password policies.
     */
    async policiesListPasswordPoliciesRaw(requestParameters: SystemApiPoliciesListPasswordPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling policiesListPasswordPolicies().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/password/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List the existing password policies.
     */
    async policiesListPasswordPolicies(list: PoliciesListPasswordPoliciesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.policiesListPasswordPoliciesRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information about the named ACL policy.
     */
    async policiesReadAclPolicyRaw(requestParameters: SystemApiPoliciesReadAclPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PoliciesReadAclPolicyResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling policiesReadAclPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/acl/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoliciesReadAclPolicyResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve information about the named ACL policy.
     */
    async policiesReadAclPolicy(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PoliciesReadAclPolicyResponse> {
        const response = await this.policiesReadAclPolicyRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the policy body for the named policy.
     */
    async policiesReadAclPolicy2Raw(requestParameters: SystemApiPoliciesReadAclPolicy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PoliciesReadAclPolicy2Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling policiesReadAclPolicy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policy/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoliciesReadAclPolicy2ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the policy body for the named policy.
     */
    async policiesReadAclPolicy2(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PoliciesReadAclPolicy2Response> {
        const response = await this.policiesReadAclPolicy2Raw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an existing password policy.
     */
    async policiesReadPasswordPolicyRaw(requestParameters: SystemApiPoliciesReadPasswordPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PoliciesReadPasswordPolicyResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling policiesReadPasswordPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/password/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoliciesReadPasswordPolicyResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve an existing password policy.
     */
    async policiesReadPasswordPolicy(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PoliciesReadPasswordPolicyResponse> {
        const response = await this.policiesReadPasswordPolicyRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Add a new or update an existing ACL policy.
     */
    async policiesWriteAclPolicyRaw(requestParameters: SystemApiPoliciesWriteAclPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling policiesWriteAclPolicy().'
            );
        }

        if (requestParameters['PoliciesWriteAclPolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'PoliciesWriteAclPolicyRequest',
                'Required parameter "PoliciesWriteAclPolicyRequest" was null or undefined when calling policiesWriteAclPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/policies/acl/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PoliciesWriteAclPolicyRequestToJSON(requestParameters['PoliciesWriteAclPolicyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a new or update an existing ACL policy.
     */
    async policiesWriteAclPolicy(name: string, PoliciesWriteAclPolicyRequest: PoliciesWriteAclPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.policiesWriteAclPolicyRaw({ name: name, PoliciesWriteAclPolicyRequest: PoliciesWriteAclPolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Add a new or update an existing policy.
     */
    async policiesWriteAclPolicy2Raw(requestParameters: SystemApiPoliciesWriteAclPolicy2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling policiesWriteAclPolicy2().'
            );
        }

        if (requestParameters['PoliciesWriteAclPolicy2Request'] == null) {
            throw new runtime.RequiredError(
                'PoliciesWriteAclPolicy2Request',
                'Required parameter "PoliciesWriteAclPolicy2Request" was null or undefined when calling policiesWriteAclPolicy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/policy/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PoliciesWriteAclPolicy2RequestToJSON(requestParameters['PoliciesWriteAclPolicy2Request']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a new or update an existing policy.
     */
    async policiesWriteAclPolicy2(name: string, PoliciesWriteAclPolicy2Request: PoliciesWriteAclPolicy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.policiesWriteAclPolicy2Raw({ name: name, PoliciesWriteAclPolicy2Request: PoliciesWriteAclPolicy2Request }, initOverrides);
        return await response.value();
    }

    /**
     * Add a new or update an existing password policy.
     */
    async policiesWritePasswordPolicyRaw(requestParameters: SystemApiPoliciesWritePasswordPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling policiesWritePasswordPolicy().'
            );
        }

        if (requestParameters['PoliciesWritePasswordPolicyRequest'] == null) {
            throw new runtime.RequiredError(
                'PoliciesWritePasswordPolicyRequest',
                'Required parameter "PoliciesWritePasswordPolicyRequest" was null or undefined when calling policiesWritePasswordPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/policies/password/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PoliciesWritePasswordPolicyRequestToJSON(requestParameters['PoliciesWritePasswordPolicyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a new or update an existing password policy.
     */
    async policiesWritePasswordPolicy(name: string, PoliciesWritePasswordPolicyRequest: PoliciesWritePasswordPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.policiesWritePasswordPolicyRaw({ name: name, PoliciesWritePasswordPolicyRequest: PoliciesWritePasswordPolicyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Returns stack traces that led to blocking on synchronization primitives
     * Returns stack traces that led to blocking on synchronization primitives
     */
    async pprofBlockingRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/pprof/block`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns stack traces that led to blocking on synchronization primitives
     * Returns stack traces that led to blocking on synchronization primitives
     */
    async pprofBlocking(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pprofBlockingRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the running program\'s command line, with arguments separated by NUL bytes.
     * Returns the running program\'s command line.
     */
    async pprofCommandLineRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/pprof/cmdline`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the running program\'s command line, with arguments separated by NUL bytes.
     * Returns the running program\'s command line.
     */
    async pprofCommandLine(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pprofCommandLineRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a pprof-formatted cpu profile payload. Profiling lasts for duration specified in seconds GET parameter, or for 30 seconds if not specified.
     * Returns a pprof-formatted cpu profile payload.
     */
    async pprofCpuProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/pprof/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns a pprof-formatted cpu profile payload. Profiling lasts for duration specified in seconds GET parameter, or for 30 seconds if not specified.
     * Returns a pprof-formatted cpu profile payload.
     */
    async pprofCpuProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pprofCpuProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns  the execution trace in binary form. Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified.
     * Returns the execution trace in binary form.
     */
    async pprofExecutionTraceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/pprof/trace`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns  the execution trace in binary form. Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified.
     * Returns the execution trace in binary form.
     */
    async pprofExecutionTrace(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pprofExecutionTraceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns stack traces of all current goroutines.
     * Returns stack traces of all current goroutines.
     */
    async pprofGoroutinesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/pprof/goroutine`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns stack traces of all current goroutines.
     * Returns stack traces of all current goroutines.
     */
    async pprofGoroutines(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pprofGoroutinesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns an HTML page listing the available  profiles. This should be mainly accessed via browsers or applications that can  render pages.
     * Returns an HTML page listing the available profiles.
     */
    async pprofIndexRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/pprof`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an HTML page listing the available  profiles. This should be mainly accessed via browsers or applications that can  render pages.
     * Returns an HTML page listing the available profiles.
     */
    async pprofIndex(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pprofIndexRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a sampling of all past memory allocations.
     * Returns a sampling of all past memory allocations.
     */
    async pprofMemoryAllocationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/pprof/allocs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns a sampling of all past memory allocations.
     * Returns a sampling of all past memory allocations.
     */
    async pprofMemoryAllocations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pprofMemoryAllocationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a sampling of memory allocations of live object.
     * Returns a sampling of memory allocations of live object.
     */
    async pprofMemoryAllocationsLiveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/pprof/heap`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns a sampling of memory allocations of live object.
     * Returns a sampling of memory allocations of live object.
     */
    async pprofMemoryAllocationsLive(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pprofMemoryAllocationsLiveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns stack traces of holders of contended mutexes
     * Returns stack traces of holders of contended mutexes
     */
    async pprofMutexesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/pprof/mutex`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns stack traces of holders of contended mutexes
     * Returns stack traces of holders of contended mutexes
     */
    async pprofMutexes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pprofMutexesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the program counters listed in the request.
     * Returns the program counters listed in the request.
     */
    async pprofSymbolsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/pprof/symbol`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the program counters listed in the request.
     * Returns the program counters listed in the request.
     */
    async pprofSymbols(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pprofSymbolsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns stack traces that led to the creation of new OS threads
     * Returns stack traces that led to the creation of new OS threads
     */
    async pprofThreadCreationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/pprof/threadcreate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns stack traces that led to the creation of new OS threads
     * Returns stack traces that led to the creation of new OS threads
     */
    async pprofThreadCreations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.pprofThreadCreationsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async queryTokenAccessorCapabilitiesRaw(requestParameters: SystemApiQueryTokenAccessorCapabilitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['QueryTokenAccessorCapabilitiesRequest'] == null) {
            throw new runtime.RequiredError(
                'QueryTokenAccessorCapabilitiesRequest',
                'Required parameter "QueryTokenAccessorCapabilitiesRequest" was null or undefined when calling queryTokenAccessorCapabilities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/capabilities-accessor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryTokenAccessorCapabilitiesRequestToJSON(requestParameters['QueryTokenAccessorCapabilitiesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async queryTokenAccessorCapabilities(QueryTokenAccessorCapabilitiesRequest: QueryTokenAccessorCapabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.queryTokenAccessorCapabilitiesRaw({ QueryTokenAccessorCapabilitiesRequest: QueryTokenAccessorCapabilitiesRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async queryTokenCapabilitiesRaw(requestParameters: SystemApiQueryTokenCapabilitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['QueryTokenCapabilitiesRequest'] == null) {
            throw new runtime.RequiredError(
                'QueryTokenCapabilitiesRequest',
                'Required parameter "QueryTokenCapabilitiesRequest" was null or undefined when calling queryTokenCapabilities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/capabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryTokenCapabilitiesRequestToJSON(requestParameters['QueryTokenCapabilitiesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async queryTokenCapabilities(QueryTokenCapabilitiesRequest: QueryTokenCapabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.queryTokenCapabilitiesRaw({ QueryTokenCapabilitiesRequest: QueryTokenCapabilitiesRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async queryTokenSelfCapabilitiesRaw(requestParameters: SystemApiQueryTokenSelfCapabilitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['QueryTokenSelfCapabilitiesRequest'] == null) {
            throw new runtime.RequiredError(
                'QueryTokenSelfCapabilitiesRequest',
                'Required parameter "QueryTokenSelfCapabilitiesRequest" was null or undefined when calling queryTokenSelfCapabilities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/capabilities-self`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryTokenSelfCapabilitiesRequestToJSON(requestParameters['QueryTokenSelfCapabilitiesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async queryTokenSelfCapabilities(QueryTokenSelfCapabilitiesRequest: QueryTokenSelfCapabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.queryTokenSelfCapabilitiesRaw({ QueryTokenSelfCapabilitiesRequest: QueryTokenSelfCapabilitiesRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async rateLimitQuotasConfigureRaw(requestParameters: SystemApiRateLimitQuotasConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['RateLimitQuotasConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'RateLimitQuotasConfigureRequest',
                'Required parameter "RateLimitQuotasConfigureRequest" was null or undefined when calling rateLimitQuotasConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/quotas/config`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RateLimitQuotasConfigureRequestToJSON(requestParameters['RateLimitQuotasConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rateLimitQuotasConfigure(RateLimitQuotasConfigureRequest: RateLimitQuotasConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rateLimitQuotasConfigureRaw({ RateLimitQuotasConfigureRequest: RateLimitQuotasConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async rateLimitQuotasDeleteRaw(requestParameters: SystemApiRateLimitQuotasDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rateLimitQuotasDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/quotas/rate-limit/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rateLimitQuotasDelete(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rateLimitQuotasDeleteRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async rateLimitQuotasListRaw(requestParameters: SystemApiRateLimitQuotasListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling rateLimitQuotasList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/quotas/rate-limit/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async rateLimitQuotasList(list: RateLimitQuotasListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.rateLimitQuotasListRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async rateLimitQuotasReadRaw(requestParameters: SystemApiRateLimitQuotasReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateLimitQuotasReadResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rateLimitQuotasRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/quotas/rate-limit/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateLimitQuotasReadResponseFromJSON(jsonValue));
    }

    /**
     */
    async rateLimitQuotasRead(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateLimitQuotasReadResponse> {
        const response = await this.rateLimitQuotasReadRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async rateLimitQuotasReadConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateLimitQuotasReadConfigurationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/quotas/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateLimitQuotasReadConfigurationResponseFromJSON(jsonValue));
    }

    /**
     */
    async rateLimitQuotasReadConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateLimitQuotasReadConfigurationResponse> {
        const response = await this.rateLimitQuotasReadConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async rateLimitQuotasWriteRaw(requestParameters: SystemApiRateLimitQuotasWriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling rateLimitQuotasWrite().'
            );
        }

        if (requestParameters['RateLimitQuotasWriteRequest'] == null) {
            throw new runtime.RequiredError(
                'RateLimitQuotasWriteRequest',
                'Required parameter "RateLimitQuotasWriteRequest" was null or undefined when calling rateLimitQuotasWrite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/quotas/rate-limit/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RateLimitQuotasWriteRequestToJSON(requestParameters['RateLimitQuotasWriteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rateLimitQuotasWrite(name: string, RateLimitQuotasWriteRequest: RateLimitQuotasWriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rateLimitQuotasWriteRaw({ name: name, RateLimitQuotasWriteRequest: RateLimitQuotasWriteRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete the key with given path.
     */
    async rawDeleteRaw(requestParameters: SystemApiRawDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling rawDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/raw/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the key with given path.
     */
    async rawDelete(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rawDeleteRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * Return a list keys for a given path prefix.
     */
    async rawListRaw(requestParameters: SystemApiRawListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling rawList().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling rawList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/raw/{path}/`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Return a list keys for a given path prefix.
     */
    async rawList(path: string, list: RawListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.rawListRaw({ path: path, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Read the value of the key at the given path.
     */
    async rawReadRaw(requestParameters: SystemApiRawReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RawReadResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling rawRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/raw/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RawReadResponseFromJSON(jsonValue));
    }

    /**
     * Read the value of the key at the given path.
     */
    async rawRead(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RawReadResponse> {
        const response = await this.rawReadRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * Update the value of the key at the given path.
     */
    async rawWriteRaw(requestParameters: SystemApiRawWriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling rawWrite().'
            );
        }

        if (requestParameters['RawWriteRequest'] == null) {
            throw new runtime.RequiredError(
                'RawWriteRequest',
                'Required parameter "RawWriteRequest" was null or undefined when calling rawWrite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/raw/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RawWriteRequestToJSON(requestParameters['RawWriteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the value of the key at the given path.
     */
    async rawWrite(path: string, RawWriteRequest: RawWriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rawWriteRaw({ path: path, RawWriteRequest: RawWriteRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Returns the available and activated activation-flagged features.
     */
    async readActivationFlagsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/activation-flags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the available and activated activation-flagged features.
     */
    async readActivationFlags(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.readActivationFlagsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the health status of Vault.
     */
    async readHealthStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the health status of Vault.
     */
    async readHealthStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.readHealthStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the initialization status of Vault.
     */
    async readInitializationStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/init`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the initialization status of Vault.
     */
    async readInitializationStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.readInitializationStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * The sanitized output strips configuration values in the storage, HA storage, and seals stanzas, which may contain sensitive values such as API tokens. It also removes any token or secret fields in other stanzas, such as the circonus_api_token from telemetry.
     * Return a sanitized version of the Vault server configuration.
     */
    async readSanitizedConfigurationStateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/state/sanitized`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The sanitized output strips configuration values in the storage, HA storage, and seals stanzas, which may contain sensitive values such as API tokens. It also removes any token or secret fields in other stanzas, such as the circonus_api_token from telemetry.
     * Return a sanitized version of the Vault server configuration.
     */
    async readSanitizedConfigurationState(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.readSanitizedConfigurationStateRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read the current Census agent\'s snapshot fields.
     */
    async readVerbosityLevelForRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/census/snapshot`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current Census agent\'s snapshot fields.
     */
    async readVerbosityLevelFor(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.readVerbosityLevelForRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read the current status of the request limiter.
     */
    async readVerbosityLevelFor_5Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/request-limiter/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read the current status of the request limiter.
     */
    async readVerbosityLevelFor_5(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.readVerbosityLevelFor_5Raw(initOverrides);
        return await response.value();
    }

    /**
     * Look up wrapping properties for the given token.
     */
    async readWrappingPropertiesRaw(requestParameters: SystemApiReadWrappingPropertiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadWrappingPropertiesResponse>> {
        if (requestParameters['ReadWrappingPropertiesRequest'] == null) {
            throw new runtime.RequiredError(
                'ReadWrappingPropertiesRequest',
                'Required parameter "ReadWrappingPropertiesRequest" was null or undefined when calling readWrappingProperties().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/wrapping/lookup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadWrappingPropertiesRequestToJSON(requestParameters['ReadWrappingPropertiesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadWrappingPropertiesResponseFromJSON(jsonValue));
    }

    /**
     * Look up wrapping properties for the given token.
     */
    async readWrappingProperties(ReadWrappingPropertiesRequest: ReadWrappingPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadWrappingPropertiesResponse> {
        const response = await this.readWrappingPropertiesRaw({ ReadWrappingPropertiesRequest: ReadWrappingPropertiesRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Look up wrapping properties for the requester\'s token.
     */
    async readWrappingProperties2Raw(requestParameters: SystemApiReadWrappingProperties2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadWrappingProperties2Response>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/wrapping/lookup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadWrappingProperties2ResponseFromJSON(jsonValue));
    }

    /**
     * Look up wrapping properties for the requester\'s token.
     */
    async readWrappingProperties2(token?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadWrappingProperties2Response> {
        const response = await this.readWrappingProperties2Raw({ token: token }, initOverrides);
        return await response.value();
    }

    /**
     * This clears the rekey settings as well as any progress made. This must be called to change the parameters of the rekey. Note: verification is still a part of a rekey. If rekeying is canceled during the verification flow, the current unseal keys remain valid.
     * Cancels any in-progress rekey.
     */
    async rekeyAttemptCancelRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/rekey/init`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This clears the rekey settings as well as any progress made. This must be called to change the parameters of the rekey. Note: verification is still a part of a rekey. If rekeying is canceled during the verification flow, the current unseal keys remain valid.
     * Cancels any in-progress rekey.
     */
    async rekeyAttemptCancel(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rekeyAttemptCancelRaw(initOverrides);
        return await response.value();
    }

    /**
     * Only a single rekey attempt can take place at a time, and changing the parameters of a rekey requires canceling and starting a new rekey, which will also provide a new nonce.
     * Initializes a new rekey attempt.
     */
    async rekeyAttemptInitializeRaw(requestParameters: SystemApiRekeyAttemptInitializeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RekeyAttemptInitializeResponse>> {
        if (requestParameters['RekeyAttemptInitializeRequest'] == null) {
            throw new runtime.RequiredError(
                'RekeyAttemptInitializeRequest',
                'Required parameter "RekeyAttemptInitializeRequest" was null or undefined when calling rekeyAttemptInitialize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/rekey/init`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RekeyAttemptInitializeRequestToJSON(requestParameters['RekeyAttemptInitializeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RekeyAttemptInitializeResponseFromJSON(jsonValue));
    }

    /**
     * Only a single rekey attempt can take place at a time, and changing the parameters of a rekey requires canceling and starting a new rekey, which will also provide a new nonce.
     * Initializes a new rekey attempt.
     */
    async rekeyAttemptInitialize(RekeyAttemptInitializeRequest: RekeyAttemptInitializeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RekeyAttemptInitializeResponse> {
        const response = await this.rekeyAttemptInitializeRaw({ RekeyAttemptInitializeRequest: RekeyAttemptInitializeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Reads the configuration and progress of the current rekey attempt.
     */
    async rekeyAttemptReadProgressRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RekeyAttemptReadProgressResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/rekey/init`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RekeyAttemptReadProgressResponseFromJSON(jsonValue));
    }

    /**
     * Reads the configuration and progress of the current rekey attempt.
     */
    async rekeyAttemptReadProgress(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RekeyAttemptReadProgressResponse> {
        const response = await this.rekeyAttemptReadProgressRaw(initOverrides);
        return await response.value();
    }

    /**
     * Enter a single unseal key share to progress the rekey of the Vault.
     */
    async rekeyAttemptUpdateRaw(requestParameters: SystemApiRekeyAttemptUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RekeyAttemptUpdateResponse>> {
        if (requestParameters['RekeyAttemptUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'RekeyAttemptUpdateRequest',
                'Required parameter "RekeyAttemptUpdateRequest" was null or undefined when calling rekeyAttemptUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/rekey/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RekeyAttemptUpdateRequestToJSON(requestParameters['RekeyAttemptUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RekeyAttemptUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Enter a single unseal key share to progress the rekey of the Vault.
     */
    async rekeyAttemptUpdate(RekeyAttemptUpdateRequest: RekeyAttemptUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RekeyAttemptUpdateResponse> {
        const response = await this.rekeyAttemptUpdateRaw({ RekeyAttemptUpdateRequest: RekeyAttemptUpdateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete the backup copy of PGP-encrypted unseal keys.
     */
    async rekeyDeleteBackupKeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/rekey/backup`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the backup copy of PGP-encrypted unseal keys.
     */
    async rekeyDeleteBackupKey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rekeyDeleteBackupKeyRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async rekeyDeleteBackupRecoveryKeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/rekey/recovery-key-backup`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rekeyDeleteBackupRecoveryKey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rekeyDeleteBackupRecoveryKeyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Return the backup copy of PGP-encrypted unseal keys.
     */
    async rekeyReadBackupKeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RekeyReadBackupKeyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/rekey/backup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RekeyReadBackupKeyResponseFromJSON(jsonValue));
    }

    /**
     * Return the backup copy of PGP-encrypted unseal keys.
     */
    async rekeyReadBackupKey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RekeyReadBackupKeyResponse> {
        const response = await this.rekeyReadBackupKeyRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async rekeyReadBackupRecoveryKeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RekeyReadBackupRecoveryKeyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/rekey/recovery-key-backup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RekeyReadBackupRecoveryKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async rekeyReadBackupRecoveryKey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RekeyReadBackupRecoveryKeyResponse> {
        const response = await this.rekeyReadBackupRecoveryKeyRaw(initOverrides);
        return await response.value();
    }

    /**
     * This clears any progress made and resets the nonce. Unlike a `DELETE` against `sys/rekey/init`, this only resets the current verification operation, not the entire rekey atttempt.
     * Cancel any in-progress rekey verification operation.
     */
    async rekeyVerificationCancelRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RekeyVerificationCancelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/rekey/verify`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RekeyVerificationCancelResponseFromJSON(jsonValue));
    }

    /**
     * This clears any progress made and resets the nonce. Unlike a `DELETE` against `sys/rekey/init`, this only resets the current verification operation, not the entire rekey atttempt.
     * Cancel any in-progress rekey verification operation.
     */
    async rekeyVerificationCancel(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RekeyVerificationCancelResponse> {
        const response = await this.rekeyVerificationCancelRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read the configuration and progress of the current rekey verification attempt.
     */
    async rekeyVerificationReadProgressRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RekeyVerificationReadProgressResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/rekey/verify`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RekeyVerificationReadProgressResponseFromJSON(jsonValue));
    }

    /**
     * Read the configuration and progress of the current rekey verification attempt.
     */
    async rekeyVerificationReadProgress(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RekeyVerificationReadProgressResponse> {
        const response = await this.rekeyVerificationReadProgressRaw(initOverrides);
        return await response.value();
    }

    /**
     * Enter a single new key share to progress the rekey verification operation.
     */
    async rekeyVerificationUpdateRaw(requestParameters: SystemApiRekeyVerificationUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RekeyVerificationUpdateResponse>> {
        if (requestParameters['RekeyVerificationUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'RekeyVerificationUpdateRequest',
                'Required parameter "RekeyVerificationUpdateRequest" was null or undefined when calling rekeyVerificationUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/rekey/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RekeyVerificationUpdateRequestToJSON(requestParameters['RekeyVerificationUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RekeyVerificationUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Enter a single new key share to progress the rekey verification operation.
     */
    async rekeyVerificationUpdate(RekeyVerificationUpdateRequest: RekeyVerificationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RekeyVerificationUpdateResponse> {
        const response = await this.rekeyVerificationUpdateRaw({ RekeyVerificationUpdateRequest: RekeyVerificationUpdateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Reload all plugins of a specific name and type across all namespaces. If \"scope\" is provided and is \"global\", the plugin is reloaded across all nodes and clusters. If a new plugin version has been pinned, this will ensure all instances start using the new version.
     * Reload all instances of a specific plugin.
     */
    async reloadPluginsRaw(requestParameters: SystemApiReloadPluginsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReloadPluginsResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling reloadPlugins().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling reloadPlugins().'
            );
        }

        if (requestParameters['ReloadPluginsRequest'] == null) {
            throw new runtime.RequiredError(
                'ReloadPluginsRequest',
                'Required parameter "ReloadPluginsRequest" was null or undefined when calling reloadPlugins().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/plugins/reload/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReloadPluginsRequestToJSON(requestParameters['ReloadPluginsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReloadPluginsResponseFromJSON(jsonValue));
    }

    /**
     * Reload all plugins of a specific name and type across all namespaces. If \"scope\" is provided and is \"global\", the plugin is reloaded across all nodes and clusters. If a new plugin version has been pinned, this will ensure all instances start using the new version.
     * Reload all instances of a specific plugin.
     */
    async reloadPlugins(name: string, type: string, ReloadPluginsRequest: ReloadPluginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReloadPluginsResponse> {
        const response = await this.reloadPluginsRaw({ name: name, type: type, ReloadPluginsRequest: ReloadPluginsRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Reload the given subsystem
     */
    async reloadSubsystemRaw(requestParameters: SystemApiReloadSubsystemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['subsystem'] == null) {
            throw new runtime.RequiredError(
                'subsystem',
                'Required parameter "subsystem" was null or undefined when calling reloadSubsystem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/reload/{subsystem}`.replace(`{${"subsystem"}}`, encodeURIComponent(String(requestParameters['subsystem']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reload the given subsystem
     */
    async reloadSubsystem(subsystem: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.reloadSubsystemRaw({ subsystem: subsystem }, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a mount migration
     */
    async remountRaw(requestParameters: SystemApiRemountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemountResponse>> {
        if (requestParameters['RemountRequest'] == null) {
            throw new runtime.RequiredError(
                'RemountRequest',
                'Required parameter "RemountRequest" was null or undefined when calling remount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/remount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemountRequestToJSON(requestParameters['RemountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemountResponseFromJSON(jsonValue));
    }

    /**
     * Initiate a mount migration
     */
    async remount(RemountRequest: RemountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemountResponse> {
        const response = await this.remountRaw({ RemountRequest: RemountRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Check status of a mount migration
     */
    async remountStatusRaw(requestParameters: SystemApiRemountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemountStatusResponse>> {
        if (requestParameters['migration_id'] == null) {
            throw new runtime.RequiredError(
                'migration_id',
                'Required parameter "migration_id" was null or undefined when calling remountStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/remount/status/{migration_id}`.replace(`{${"migration_id"}}`, encodeURIComponent(String(requestParameters['migration_id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemountStatusResponseFromJSON(jsonValue));
    }

    /**
     * Check status of a mount migration
     */
    async remountStatus(migration_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemountStatusResponse> {
        const response = await this.remountStatusRaw({ migration_id: migration_id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async rewrapRaw(requestParameters: SystemApiRewrapOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['RewrapRequest'] == null) {
            throw new runtime.RequiredError(
                'RewrapRequest',
                'Required parameter "RewrapRequest" was null or undefined when calling rewrap().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/wrapping/rewrap`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RewrapRequestToJSON(requestParameters['RewrapRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rewrap(RewrapRequest: RewrapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rewrapRaw({ RewrapRequest: RewrapRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Cancels any in-progress root generation attempt.
     */
    async rootTokenGenerationCancelRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/generate-root/attempt`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancels any in-progress root generation attempt.
     */
    async rootTokenGenerationCancel(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rootTokenGenerationCancelRaw(initOverrides);
        return await response.value();
    }

    /**
     * Cancels any in-progress root generation attempt.
     */
    async rootTokenGenerationCancel2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/generate-root`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancels any in-progress root generation attempt.
     */
    async rootTokenGenerationCancel2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.rootTokenGenerationCancel2Raw(initOverrides);
        return await response.value();
    }

    /**
     * Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
     * Initializes a new root generation attempt.
     */
    async rootTokenGenerationInitializeRaw(requestParameters: SystemApiRootTokenGenerationInitializeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootTokenGenerationInitializeResponse>> {
        if (requestParameters['RootTokenGenerationInitializeRequest'] == null) {
            throw new runtime.RequiredError(
                'RootTokenGenerationInitializeRequest',
                'Required parameter "RootTokenGenerationInitializeRequest" was null or undefined when calling rootTokenGenerationInitialize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/generate-root/attempt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RootTokenGenerationInitializeRequestToJSON(requestParameters['RootTokenGenerationInitializeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootTokenGenerationInitializeResponseFromJSON(jsonValue));
    }

    /**
     * Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
     * Initializes a new root generation attempt.
     */
    async rootTokenGenerationInitialize(RootTokenGenerationInitializeRequest: RootTokenGenerationInitializeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootTokenGenerationInitializeResponse> {
        const response = await this.rootTokenGenerationInitializeRaw({ RootTokenGenerationInitializeRequest: RootTokenGenerationInitializeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
     * Initializes a new root generation attempt.
     */
    async rootTokenGenerationInitialize2Raw(requestParameters: SystemApiRootTokenGenerationInitialize2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootTokenGenerationInitialize2Response>> {
        if (requestParameters['RootTokenGenerationInitialize2Request'] == null) {
            throw new runtime.RequiredError(
                'RootTokenGenerationInitialize2Request',
                'Required parameter "RootTokenGenerationInitialize2Request" was null or undefined when calling rootTokenGenerationInitialize2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/generate-root`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RootTokenGenerationInitialize2RequestToJSON(requestParameters['RootTokenGenerationInitialize2Request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootTokenGenerationInitialize2ResponseFromJSON(jsonValue));
    }

    /**
     * Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
     * Initializes a new root generation attempt.
     */
    async rootTokenGenerationInitialize2(RootTokenGenerationInitialize2Request: RootTokenGenerationInitialize2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootTokenGenerationInitialize2Response> {
        const response = await this.rootTokenGenerationInitialize2Raw({ RootTokenGenerationInitialize2Request: RootTokenGenerationInitialize2Request }, initOverrides);
        return await response.value();
    }

    /**
     * Read the configuration and progress of the current root generation attempt.
     */
    async rootTokenGenerationReadProgressRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootTokenGenerationReadProgressResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/generate-root/attempt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootTokenGenerationReadProgressResponseFromJSON(jsonValue));
    }

    /**
     * Read the configuration and progress of the current root generation attempt.
     */
    async rootTokenGenerationReadProgress(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootTokenGenerationReadProgressResponse> {
        const response = await this.rootTokenGenerationReadProgressRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read the configuration and progress of the current root generation attempt.
     */
    async rootTokenGenerationReadProgress2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootTokenGenerationReadProgress2Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/generate-root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootTokenGenerationReadProgress2ResponseFromJSON(jsonValue));
    }

    /**
     * Read the configuration and progress of the current root generation attempt.
     */
    async rootTokenGenerationReadProgress2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootTokenGenerationReadProgress2Response> {
        const response = await this.rootTokenGenerationReadProgress2Raw(initOverrides);
        return await response.value();
    }

    /**
     * If the threshold number of unseal key shares is reached, Vault will complete the root generation and issue the new token. Otherwise, this API must be called multiple times until that threshold is met. The attempt nonce must be provided with each call.
     * Enter a single unseal key share to progress the root generation attempt.
     */
    async rootTokenGenerationUpdateRaw(requestParameters: SystemApiRootTokenGenerationUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootTokenGenerationUpdateResponse>> {
        if (requestParameters['RootTokenGenerationUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'RootTokenGenerationUpdateRequest',
                'Required parameter "RootTokenGenerationUpdateRequest" was null or undefined when calling rootTokenGenerationUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/generate-root/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RootTokenGenerationUpdateRequestToJSON(requestParameters['RootTokenGenerationUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootTokenGenerationUpdateResponseFromJSON(jsonValue));
    }

    /**
     * If the threshold number of unseal key shares is reached, Vault will complete the root generation and issue the new token. Otherwise, this API must be called multiple times until that threshold is met. The attempt nonce must be provided with each call.
     * Enter a single unseal key share to progress the root generation attempt.
     */
    async rootTokenGenerationUpdate(RootTokenGenerationUpdateRequest: RootTokenGenerationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootTokenGenerationUpdateResponse> {
        const response = await this.rootTokenGenerationUpdateRaw({ RootTokenGenerationUpdateRequest: RootTokenGenerationUpdateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Seal the Vault.
     */
    async sealRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/seal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Seal the Vault.
     */
    async seal(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.sealRaw(initOverrides);
        return await response.value();
    }

    /**
     * Check the seal status of a Vault.
     */
    async sealStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SealStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/seal-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SealStatusResponseFromJSON(jsonValue));
    }

    /**
     * Check the seal status of a Vault.
     */
    async sealStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SealStatusResponse> {
        const response = await this.sealStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint forces the node to give up active status. If the node does not have active status, this endpoint does nothing. Note that the node will sleep for ten seconds before attempting to grab the active lock again, but if no standby nodes grab the active lock in the interim, the same node may become the active node again.
     * Cause the node to give up active status.
     */
    async stepDownLeaderRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/step-down`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint forces the node to give up active status. If the node does not have active status, this endpoint does nothing. Note that the node will sleep for ten seconds before attempting to grab the active lock again, but if no standby nodes grab the active lock in the interim, the same node may become the active node again.
     * Cause the node to give up active status.
     */
    async stepDownLeader(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.stepDownLeaderRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the specified event notification subscription.
     */
    async subscriptionsCreateRaw(requestParameters: SystemApiSubscriptionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsCreateResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling subscriptionsCreate().'
            );
        }

        if (requestParameters['plugin'] == null) {
            throw new runtime.RequiredError(
                'plugin',
                'Required parameter "plugin" was null or undefined when calling subscriptionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/events/subscriptions/{plugin}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"plugin"}}`, encodeURIComponent(String(requestParameters['plugin']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsCreateResponseFromJSON(jsonValue));
    }

    /**
     * Returns the specified event notification subscription.
     */
    async subscriptionsCreate(id: string, plugin: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsCreateResponse> {
        const response = await this.subscriptionsCreateRaw({ id: id, plugin: plugin }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the specified event notification subscription and stops sending event notifications to it.
     */
    async subscriptionsCreate_6Raw(requestParameters: SystemApiSubscriptionsCreate0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling subscriptionsCreate_6().'
            );
        }

        if (requestParameters['plugin'] == null) {
            throw new runtime.RequiredError(
                'plugin',
                'Required parameter "plugin" was null or undefined when calling subscriptionsCreate_6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/events/subscriptions/{plugin}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"plugin"}}`, encodeURIComponent(String(requestParameters['plugin']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the specified event notification subscription and stops sending event notifications to it.
     */
    async subscriptionsCreate_6(id: string, plugin: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.subscriptionsCreate_6Raw({ id: id, plugin: plugin }, initOverrides);
        return await response.value();
    }

    /**
     * Listing event notifications subscriptions
     */
    async subscriptionsListEventsSubscriptionsRaw(requestParameters: SystemApiSubscriptionsListEventsSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsListEventsSubscriptionsResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling subscriptionsListEventsSubscriptions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/events/subscriptions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsListEventsSubscriptionsResponseFromJSON(jsonValue));
    }

    /**
     * Listing event notifications subscriptions
     */
    async subscriptionsListEventsSubscriptions(list: SubscriptionsListEventsSubscriptionsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsListEventsSubscriptionsResponse> {
        const response = await this.subscriptionsListEventsSubscriptionsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Listing event notifications subscriptions
     */
    async subscriptionsReadEventsSubscriptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsReadEventsSubscriptionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/events/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsReadEventsSubscriptionsResponseFromJSON(jsonValue));
    }

    /**
     * Listing event notifications subscriptions
     */
    async subscriptionsReadEventsSubscriptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsReadEventsSubscriptionsResponse> {
        const response = await this.subscriptionsReadEventsSubscriptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates a new event notification subscription and starts to send events to it.
     */
    async subscriptionsWriteEventsSubscriptionsRaw(requestParameters: SystemApiSubscriptionsWriteEventsSubscriptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsWriteEventsSubscriptionsResponse>> {
        if (requestParameters['SubscriptionsWriteEventsSubscriptionsRequest'] == null) {
            throw new runtime.RequiredError(
                'SubscriptionsWriteEventsSubscriptionsRequest',
                'Required parameter "SubscriptionsWriteEventsSubscriptionsRequest" was null or undefined when calling subscriptionsWriteEventsSubscriptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/events/subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionsWriteEventsSubscriptionsRequestToJSON(requestParameters['SubscriptionsWriteEventsSubscriptionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsWriteEventsSubscriptionsResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new event notification subscription and starts to send events to it.
     */
    async subscriptionsWriteEventsSubscriptions(SubscriptionsWriteEventsSubscriptionsRequest: SubscriptionsWriteEventsSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsWriteEventsSubscriptionsResponse> {
        const response = await this.subscriptionsWriteEventsSubscriptionsRaw({ SubscriptionsWriteEventsSubscriptionsRequest: SubscriptionsWriteEventsSubscriptionsRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Configure control group global settings.
     */
    async systemDeleteConfigControlGroupRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/control-group`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure control group global settings.
     */
    async systemDeleteConfigControlGroup(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteConfigControlGroupRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemDeleteManagedKeysTypeNameRaw(requestParameters: SystemApiSystemDeleteManagedKeysTypeNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteManagedKeysTypeName().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling systemDeleteManagedKeysTypeName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/managed-keys/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemDeleteManagedKeysTypeName(name: string, type: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteManagedKeysTypeNameRaw({ name: name, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Defines or updates a Duo MFA method.
     */
    async systemDeleteMfaMethodDuoNameRaw(requestParameters: SystemApiSystemDeleteMfaMethodDuoNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteMfaMethodDuoName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mfa/method/duo/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Defines or updates a Duo MFA method.
     */
    async systemDeleteMfaMethodDuoName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteMfaMethodDuoNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Defines or updates an Okta MFA method.
     */
    async systemDeleteMfaMethodOktaNameRaw(requestParameters: SystemApiSystemDeleteMfaMethodOktaNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteMfaMethodOktaName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mfa/method/okta/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Defines or updates an Okta MFA method.
     */
    async systemDeleteMfaMethodOktaName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteMfaMethodOktaNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Defines or updates a PingID MFA method.
     */
    async systemDeleteMfaMethodPingidNameRaw(requestParameters: SystemApiSystemDeleteMfaMethodPingidNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteMfaMethodPingidName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mfa/method/pingid/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Defines or updates a PingID MFA method.
     */
    async systemDeleteMfaMethodPingidName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteMfaMethodPingidNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Defines or updates a TOTP MFA method.
     */
    async systemDeleteMfaMethodTotpNameRaw(requestParameters: SystemApiSystemDeleteMfaMethodTotpNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteMfaMethodTotpName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mfa/method/totp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Defines or updates a TOTP MFA method.
     */
    async systemDeleteMfaMethodTotpName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteMfaMethodTotpNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemDeleteNamespacesPathRaw(requestParameters: SystemApiSystemDeleteNamespacesPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling systemDeleteNamespacesPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/namespaces/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemDeleteNamespacesPath(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteNamespacesPathRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * Read, Modify, or Delete an access control policy.
     */
    async systemDeletePoliciesEgpNameRaw(requestParameters: SystemApiSystemDeletePoliciesEgpNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeletePoliciesEgpName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/egp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, Modify, or Delete an access control policy.
     */
    async systemDeletePoliciesEgpName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeletePoliciesEgpNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Read, Modify, or Delete an access control policy.
     */
    async systemDeletePoliciesRgpNameRaw(requestParameters: SystemApiSystemDeletePoliciesRgpNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeletePoliciesRgpName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/rgp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, Modify, or Delete an access control policy.
     */
    async systemDeletePoliciesRgpName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeletePoliciesRgpNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemDeleteQuotasLeaseCountNameRaw(requestParameters: SystemApiSystemDeleteQuotasLeaseCountNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteQuotasLeaseCountName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/quotas/lease-count/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemDeleteQuotasLeaseCountName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteQuotasLeaseCountNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemDeleteReplicationPerformancePrimaryPathsFilterIdRaw(requestParameters: SystemApiSystemDeleteReplicationPerformancePrimaryPathsFilterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling systemDeleteReplicationPerformancePrimaryPathsFilterId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/performance/primary/paths-filter/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemDeleteReplicationPerformancePrimaryPathsFilterId(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteReplicationPerformancePrimaryPathsFilterIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Delete automated raft snapshot configuration
     */
    async systemDeleteStorageRaftSnapshotAutoConfigNameRaw(requestParameters: SystemApiSystemDeleteStorageRaftSnapshotAutoConfigNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteStorageRaftSnapshotAutoConfigName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/storage/raft/snapshot-auto/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete automated raft snapshot configuration
     */
    async systemDeleteStorageRaftSnapshotAutoConfigName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteStorageRaftSnapshotAutoConfigNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Delete recovery snapshot
     */
    async systemDeleteStorageRaftSnapshotLoadIdRaw(requestParameters: SystemApiSystemDeleteStorageRaftSnapshotLoadIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling systemDeleteStorageRaftSnapshotLoadId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/storage/raft/snapshot-load/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete recovery snapshot
     */
    async systemDeleteStorageRaftSnapshotLoadId(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteStorageRaftSnapshotLoadIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemDeleteSyncConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemDeleteSyncConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/config`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemDeleteSyncConfigResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemDeleteSyncConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemDeleteSyncConfigResponse> {
        const response = await this.systemDeleteSyncConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemDeleteSyncDestinationsAwsSmNameRaw(requestParameters: SystemApiSystemDeleteSyncDestinationsAwsSmNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteSyncDestinationsAwsSmName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/aws-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemDeleteSyncDestinationsAwsSmName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteSyncDestinationsAwsSmNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemDeleteSyncDestinationsAzureKvNameRaw(requestParameters: SystemApiSystemDeleteSyncDestinationsAzureKvNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteSyncDestinationsAzureKvName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/azure-kv/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemDeleteSyncDestinationsAzureKvName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteSyncDestinationsAzureKvNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemDeleteSyncDestinationsGcpSmNameRaw(requestParameters: SystemApiSystemDeleteSyncDestinationsGcpSmNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteSyncDestinationsGcpSmName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/gcp-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemDeleteSyncDestinationsGcpSmName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteSyncDestinationsGcpSmNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemDeleteSyncDestinationsGhNameRaw(requestParameters: SystemApiSystemDeleteSyncDestinationsGhNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteSyncDestinationsGhName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/gh/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemDeleteSyncDestinationsGhName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteSyncDestinationsGhNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemDeleteSyncDestinationsInMemNameRaw(requestParameters: SystemApiSystemDeleteSyncDestinationsInMemNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteSyncDestinationsInMemName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/in-mem/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemDeleteSyncDestinationsInMemName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteSyncDestinationsInMemNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemDeleteSyncDestinationsVercelProjectNameRaw(requestParameters: SystemApiSystemDeleteSyncDestinationsVercelProjectNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteSyncDestinationsVercelProjectName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/vercel-project/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemDeleteSyncDestinationsVercelProjectName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemDeleteSyncDestinationsVercelProjectNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemDeleteSyncGithubAppsNameRaw(requestParameters: SystemApiSystemDeleteSyncGithubAppsNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemDeleteSyncGithubAppsNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemDeleteSyncGithubAppsName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/github-apps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemDeleteSyncGithubAppsNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemDeleteSyncGithubAppsName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemDeleteSyncGithubAppsNameResponse> {
        const response = await this.systemDeleteSyncGithubAppsNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemListManagedKeysTypeRaw(requestParameters: SystemApiSystemListManagedKeysTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling systemListManagedKeysType().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling systemListManagedKeysType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/managed-keys/{type}/`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemListManagedKeysType(type: string, list: SystemListManagedKeysTypeListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.systemListManagedKeysTypeRaw({ type: type, list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Lists all the available MFA methods by their name.
     */
    async systemListMfaMethodRaw(requestParameters: SystemApiSystemListMfaMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling systemListMfaMethod().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mfa/method/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * Lists all the available MFA methods by their name.
     */
    async systemListMfaMethod(list: SystemListMfaMethodListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.systemListMfaMethodRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemListNamespacesRaw(requestParameters: SystemApiSystemListNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling systemListNamespaces().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/namespaces/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemListNamespaces(list: SystemListNamespacesListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.systemListNamespacesRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List the configured access control policies.
     */
    async systemListPoliciesEgpRaw(requestParameters: SystemApiSystemListPoliciesEgpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling systemListPoliciesEgp().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/egp/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List the configured access control policies.
     */
    async systemListPoliciesEgp(list: SystemListPoliciesEgpListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.systemListPoliciesEgpRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List the configured access control policies.
     */
    async systemListPoliciesRgpRaw(requestParameters: SystemApiSystemListPoliciesRgpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling systemListPoliciesRgp().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/rgp/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List the configured access control policies.
     */
    async systemListPoliciesRgp(list: SystemListPoliciesRgpListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.systemListPoliciesRgpRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemListQuotasLeaseCountRaw(requestParameters: SystemApiSystemListQuotasLeaseCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling systemListQuotasLeaseCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/quotas/lease-count/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemListQuotasLeaseCount(list: SystemListQuotasLeaseCountListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.systemListQuotasLeaseCountRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List automated raft snapshot configurations
     */
    async systemListStorageRaftSnapshotAutoConfigRaw(requestParameters: SystemApiSystemListStorageRaftSnapshotAutoConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling systemListStorageRaftSnapshotAutoConfig().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/storage/raft/snapshot-auto/config/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List automated raft snapshot configurations
     */
    async systemListStorageRaftSnapshotAutoConfig(list: SystemListStorageRaftSnapshotAutoConfigListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.systemListStorageRaftSnapshotAutoConfigRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * List recovery snapshots
     */
    async systemListStorageRaftSnapshotLoadRaw(requestParameters: SystemApiSystemListStorageRaftSnapshotLoadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandardListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling systemListStorageRaftSnapshotLoad().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/storage/raft/snapshot-load/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandardListResponseFromJSON(jsonValue));
    }

    /**
     * List recovery snapshots
     */
    async systemListStorageRaftSnapshotLoad(list: SystemListStorageRaftSnapshotLoadListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandardListResponse> {
        const response = await this.systemListStorageRaftSnapshotLoadRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemListSyncAssociationsRaw(requestParameters: SystemApiSystemListSyncAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemListSyncAssociationsResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling systemListSyncAssociations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/associations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemListSyncAssociationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemListSyncAssociations(list: SystemListSyncAssociationsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemListSyncAssociationsResponse> {
        const response = await this.systemListSyncAssociationsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemListSyncDestinationsRaw(requestParameters: SystemApiSystemListSyncDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemListSyncDestinationsResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling systemListSyncDestinations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemListSyncDestinationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemListSyncDestinations(list: SystemListSyncDestinationsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemListSyncDestinationsResponse> {
        const response = await this.systemListSyncDestinationsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemListSyncDestinationsTypeRaw(requestParameters: SystemApiSystemListSyncDestinationsTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemListSyncDestinationsTypeResponse>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling systemListSyncDestinationsType().'
            );
        }

        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling systemListSyncDestinationsType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/{type}/`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemListSyncDestinationsTypeResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemListSyncDestinationsType(type: string, list: SystemListSyncDestinationsTypeListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemListSyncDestinationsTypeResponse> {
        const response = await this.systemListSyncDestinationsTypeRaw({ type: type, list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemListSyncGithubAppsRaw(requestParameters: SystemApiSystemListSyncGithubAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemListSyncGithubAppsResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling systemListSyncGithubApps().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/github-apps/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemListSyncGithubAppsResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemListSyncGithubApps(list: SystemListSyncGithubAppsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemListSyncGithubAppsResponse> {
        const response = await this.systemListSyncGithubAppsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemPatchNamespacesPathRaw(requestParameters: SystemApiSystemPatchNamespacesPathOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling systemPatchNamespacesPath().'
            );
        }

        if (requestParameters['SystemPatchNamespacesPathRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemPatchNamespacesPathRequest',
                'Required parameter "SystemPatchNamespacesPathRequest" was null or undefined when calling systemPatchNamespacesPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/namespaces/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SystemPatchNamespacesPathRequestToJSON(requestParameters['SystemPatchNamespacesPathRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemPatchNamespacesPath(path: string, SystemPatchNamespacesPathRequest: SystemPatchNamespacesPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemPatchNamespacesPathRaw({ path: path, SystemPatchNamespacesPathRequest: SystemPatchNamespacesPathRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemPatchSyncConfigRaw(requestParameters: SystemApiSystemPatchSyncConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemPatchSyncConfigResponse>> {
        if (requestParameters['SystemPatchSyncConfigRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemPatchSyncConfigRequest',
                'Required parameter "SystemPatchSyncConfigRequest" was null or undefined when calling systemPatchSyncConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/config`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SystemPatchSyncConfigRequestToJSON(requestParameters['SystemPatchSyncConfigRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemPatchSyncConfigResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemPatchSyncConfig(SystemPatchSyncConfigRequest: SystemPatchSyncConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemPatchSyncConfigResponse> {
        const response = await this.systemPatchSyncConfigRaw({ SystemPatchSyncConfigRequest: SystemPatchSyncConfigRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemPatchSyncDestinationsAwsSmNameRaw(requestParameters: SystemApiSystemPatchSyncDestinationsAwsSmNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemPatchSyncDestinationsAwsSmNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemPatchSyncDestinationsAwsSmName().'
            );
        }

        if (requestParameters['SystemPatchSyncDestinationsAwsSmNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemPatchSyncDestinationsAwsSmNameRequest',
                'Required parameter "SystemPatchSyncDestinationsAwsSmNameRequest" was null or undefined when calling systemPatchSyncDestinationsAwsSmName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/aws-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SystemPatchSyncDestinationsAwsSmNameRequestToJSON(requestParameters['SystemPatchSyncDestinationsAwsSmNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemPatchSyncDestinationsAwsSmNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemPatchSyncDestinationsAwsSmName(name: string, SystemPatchSyncDestinationsAwsSmNameRequest: SystemPatchSyncDestinationsAwsSmNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemPatchSyncDestinationsAwsSmNameResponse> {
        const response = await this.systemPatchSyncDestinationsAwsSmNameRaw({ name: name, SystemPatchSyncDestinationsAwsSmNameRequest: SystemPatchSyncDestinationsAwsSmNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemPatchSyncDestinationsAzureKvNameRaw(requestParameters: SystemApiSystemPatchSyncDestinationsAzureKvNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemPatchSyncDestinationsAzureKvNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemPatchSyncDestinationsAzureKvName().'
            );
        }

        if (requestParameters['SystemPatchSyncDestinationsAzureKvNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemPatchSyncDestinationsAzureKvNameRequest',
                'Required parameter "SystemPatchSyncDestinationsAzureKvNameRequest" was null or undefined when calling systemPatchSyncDestinationsAzureKvName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/azure-kv/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SystemPatchSyncDestinationsAzureKvNameRequestToJSON(requestParameters['SystemPatchSyncDestinationsAzureKvNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemPatchSyncDestinationsAzureKvNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemPatchSyncDestinationsAzureKvName(name: string, SystemPatchSyncDestinationsAzureKvNameRequest: SystemPatchSyncDestinationsAzureKvNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemPatchSyncDestinationsAzureKvNameResponse> {
        const response = await this.systemPatchSyncDestinationsAzureKvNameRaw({ name: name, SystemPatchSyncDestinationsAzureKvNameRequest: SystemPatchSyncDestinationsAzureKvNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemPatchSyncDestinationsGcpSmNameRaw(requestParameters: SystemApiSystemPatchSyncDestinationsGcpSmNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemPatchSyncDestinationsGcpSmNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemPatchSyncDestinationsGcpSmName().'
            );
        }

        if (requestParameters['SystemPatchSyncDestinationsGcpSmNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemPatchSyncDestinationsGcpSmNameRequest',
                'Required parameter "SystemPatchSyncDestinationsGcpSmNameRequest" was null or undefined when calling systemPatchSyncDestinationsGcpSmName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/gcp-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SystemPatchSyncDestinationsGcpSmNameRequestToJSON(requestParameters['SystemPatchSyncDestinationsGcpSmNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemPatchSyncDestinationsGcpSmNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemPatchSyncDestinationsGcpSmName(name: string, SystemPatchSyncDestinationsGcpSmNameRequest: SystemPatchSyncDestinationsGcpSmNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemPatchSyncDestinationsGcpSmNameResponse> {
        const response = await this.systemPatchSyncDestinationsGcpSmNameRaw({ name: name, SystemPatchSyncDestinationsGcpSmNameRequest: SystemPatchSyncDestinationsGcpSmNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemPatchSyncDestinationsGhNameRaw(requestParameters: SystemApiSystemPatchSyncDestinationsGhNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemPatchSyncDestinationsGhNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemPatchSyncDestinationsGhName().'
            );
        }

        if (requestParameters['SystemPatchSyncDestinationsGhNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemPatchSyncDestinationsGhNameRequest',
                'Required parameter "SystemPatchSyncDestinationsGhNameRequest" was null or undefined when calling systemPatchSyncDestinationsGhName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/gh/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SystemPatchSyncDestinationsGhNameRequestToJSON(requestParameters['SystemPatchSyncDestinationsGhNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemPatchSyncDestinationsGhNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemPatchSyncDestinationsGhName(name: string, SystemPatchSyncDestinationsGhNameRequest: SystemPatchSyncDestinationsGhNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemPatchSyncDestinationsGhNameResponse> {
        const response = await this.systemPatchSyncDestinationsGhNameRaw({ name: name, SystemPatchSyncDestinationsGhNameRequest: SystemPatchSyncDestinationsGhNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemPatchSyncDestinationsInMemNameRaw(requestParameters: SystemApiSystemPatchSyncDestinationsInMemNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemPatchSyncDestinationsInMemNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemPatchSyncDestinationsInMemName().'
            );
        }

        if (requestParameters['SystemPatchSyncDestinationsInMemNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemPatchSyncDestinationsInMemNameRequest',
                'Required parameter "SystemPatchSyncDestinationsInMemNameRequest" was null or undefined when calling systemPatchSyncDestinationsInMemName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/in-mem/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SystemPatchSyncDestinationsInMemNameRequestToJSON(requestParameters['SystemPatchSyncDestinationsInMemNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemPatchSyncDestinationsInMemNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemPatchSyncDestinationsInMemName(name: string, SystemPatchSyncDestinationsInMemNameRequest: SystemPatchSyncDestinationsInMemNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemPatchSyncDestinationsInMemNameResponse> {
        const response = await this.systemPatchSyncDestinationsInMemNameRaw({ name: name, SystemPatchSyncDestinationsInMemNameRequest: SystemPatchSyncDestinationsInMemNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemPatchSyncDestinationsVercelProjectNameRaw(requestParameters: SystemApiSystemPatchSyncDestinationsVercelProjectNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemPatchSyncDestinationsVercelProjectNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemPatchSyncDestinationsVercelProjectName().'
            );
        }

        if (requestParameters['SystemPatchSyncDestinationsVercelProjectNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemPatchSyncDestinationsVercelProjectNameRequest',
                'Required parameter "SystemPatchSyncDestinationsVercelProjectNameRequest" was null or undefined when calling systemPatchSyncDestinationsVercelProjectName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/vercel-project/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SystemPatchSyncDestinationsVercelProjectNameRequestToJSON(requestParameters['SystemPatchSyncDestinationsVercelProjectNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemPatchSyncDestinationsVercelProjectNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemPatchSyncDestinationsVercelProjectName(name: string, SystemPatchSyncDestinationsVercelProjectNameRequest: SystemPatchSyncDestinationsVercelProjectNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemPatchSyncDestinationsVercelProjectNameResponse> {
        const response = await this.systemPatchSyncDestinationsVercelProjectNameRaw({ name: name, SystemPatchSyncDestinationsVercelProjectNameRequest: SystemPatchSyncDestinationsVercelProjectNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Configure control group global settings.
     */
    async systemReadConfigControlGroupRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/control-group`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure control group global settings.
     */
    async systemReadConfigControlGroup(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadConfigControlGroupRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets the current status of the policy application mode for Vault.
     * Gets the current status of the policy application mode for Vault.
     */
    async systemReadConfigGroupPolicyApplicationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadConfigGroupPolicyApplicationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/group-policy-application`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadConfigGroupPolicyApplicationResponseFromJSON(jsonValue));
    }

    /**
     * Gets the current status of the policy application mode for Vault.
     * Gets the current status of the policy application mode for Vault.
     */
    async systemReadConfigGroupPolicyApplication(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadConfigGroupPolicyApplicationResponse> {
        const response = await this.systemReadConfigGroupPolicyApplicationRaw(initOverrides);
        return await response.value();
    }

    /**
     * The path responds to the following HTTP methods.      GET /         Returns information on the installed license      POST         Sets the license for the server
     */
    async systemReadLicenseStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/license/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The path responds to the following HTTP methods.      GET /         Returns information on the installed license      POST         Sets the license for the server
     */
    async systemReadLicenseStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadLicenseStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadManagedKeysTypeNameRaw(requestParameters: SystemApiSystemReadManagedKeysTypeNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadManagedKeysTypeName().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling systemReadManagedKeysTypeName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/managed-keys/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemReadManagedKeysTypeName(name: string, type: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadManagedKeysTypeNameRaw({ name: name, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Defines or updates a Duo MFA method.
     */
    async systemReadMfaMethodDuoNameRaw(requestParameters: SystemApiSystemReadMfaMethodDuoNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadMfaMethodDuoName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mfa/method/duo/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Defines or updates a Duo MFA method.
     */
    async systemReadMfaMethodDuoName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadMfaMethodDuoNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Defines or updates an Okta MFA method.
     */
    async systemReadMfaMethodOktaNameRaw(requestParameters: SystemApiSystemReadMfaMethodOktaNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadMfaMethodOktaName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mfa/method/okta/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Defines or updates an Okta MFA method.
     */
    async systemReadMfaMethodOktaName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadMfaMethodOktaNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Defines or updates a PingID MFA method.
     */
    async systemReadMfaMethodPingidNameRaw(requestParameters: SystemApiSystemReadMfaMethodPingidNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadMfaMethodPingidName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mfa/method/pingid/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Defines or updates a PingID MFA method.
     */
    async systemReadMfaMethodPingidName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadMfaMethodPingidNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Defines or updates a TOTP MFA method.
     */
    async systemReadMfaMethodTotpNameRaw(requestParameters: SystemApiSystemReadMfaMethodTotpNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadMfaMethodTotpName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mfa/method/totp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Defines or updates a TOTP MFA method.
     */
    async systemReadMfaMethodTotpName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadMfaMethodTotpNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Generates a TOTP secret for the given method name on the entity of the   calling token.
     */
    async systemReadMfaMethodTotpNameGenerateRaw(requestParameters: SystemApiSystemReadMfaMethodTotpNameGenerateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadMfaMethodTotpNameGenerate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/mfa/method/totp/{name}/generate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generates a TOTP secret for the given method name on the entity of the   calling token.
     */
    async systemReadMfaMethodTotpNameGenerate(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadMfaMethodTotpNameGenerateRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadNamespacesPathRaw(requestParameters: SystemApiSystemReadNamespacesPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling systemReadNamespacesPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/namespaces/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemReadNamespacesPath(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadNamespacesPathRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * The reload_id returned by a cluster scoped reload must be provided.
     * Get the status of a cluster-scoped reload.
     */
    async systemReadPluginsReloadBackendStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/plugins/reload/backend/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The reload_id returned by a cluster scoped reload must be provided.
     * Get the status of a cluster-scoped reload.
     */
    async systemReadPluginsReloadBackendStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadPluginsReloadBackendStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read, Modify, or Delete an access control policy.
     */
    async systemReadPoliciesEgpNameRaw(requestParameters: SystemApiSystemReadPoliciesEgpNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadPoliciesEgpName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/egp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, Modify, or Delete an access control policy.
     */
    async systemReadPoliciesEgpName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadPoliciesEgpNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Read, Modify, or Delete an access control policy.
     */
    async systemReadPoliciesRgpNameRaw(requestParameters: SystemApiSystemReadPoliciesRgpNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadPoliciesRgpName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/policies/rgp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, Modify, or Delete an access control policy.
     */
    async systemReadPoliciesRgpName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadPoliciesRgpNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadQuotasLeaseCountNameRaw(requestParameters: SystemApiSystemReadQuotasLeaseCountNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadQuotasLeaseCountName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/quotas/lease-count/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemReadQuotasLeaseCountName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadQuotasLeaseCountNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadReplicationDrSecondaryLicenseStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/dr/secondary/license/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemReadReplicationDrSecondaryLicenseStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadReplicationDrSecondaryLicenseStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadReplicationDrStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/dr/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemReadReplicationDrStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadReplicationDrStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadReplicationPerformancePrimaryDynamicFilterIdRaw(requestParameters: SystemApiSystemReadReplicationPerformancePrimaryDynamicFilterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling systemReadReplicationPerformancePrimaryDynamicFilterId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/performance/primary/dynamic-filter/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemReadReplicationPerformancePrimaryDynamicFilterId(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadReplicationPerformancePrimaryDynamicFilterIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadReplicationPerformancePrimaryPathsFilterIdRaw(requestParameters: SystemApiSystemReadReplicationPerformancePrimaryPathsFilterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling systemReadReplicationPerformancePrimaryPathsFilterId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/performance/primary/paths-filter/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemReadReplicationPerformancePrimaryPathsFilterId(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadReplicationPerformancePrimaryPathsFilterIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadReplicationPerformanceSecondaryDynamicFilterIdRaw(requestParameters: SystemApiSystemReadReplicationPerformanceSecondaryDynamicFilterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling systemReadReplicationPerformanceSecondaryDynamicFilterId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/performance/secondary/dynamic-filter/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemReadReplicationPerformanceSecondaryDynamicFilterId(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadReplicationPerformanceSecondaryDynamicFilterIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadReplicationPerformanceStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/performance/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemReadReplicationPerformanceStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadReplicationPerformanceStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadReplicationStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemReadReplicationStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadReplicationStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the state of any ongoing seal rewrap process
     */
    async systemReadSealwrapRewrapRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sealwrap/rewrap`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the state of any ongoing seal rewrap process
     */
    async systemReadSealwrapRewrap(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadSealwrapRewrapRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read automated raft snapshot configuration
     */
    async systemReadStorageRaftSnapshotAutoConfigNameRaw(requestParameters: SystemApiSystemReadStorageRaftSnapshotAutoConfigNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadStorageRaftSnapshotAutoConfigName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/storage/raft/snapshot-auto/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read automated raft snapshot configuration
     */
    async systemReadStorageRaftSnapshotAutoConfigName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadStorageRaftSnapshotAutoConfigNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Read status of automated raft snapshots
     */
    async systemReadStorageRaftSnapshotAutoStatusNameRaw(requestParameters: SystemApiSystemReadStorageRaftSnapshotAutoStatusNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadStorageRaftSnapshotAutoStatusName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/storage/raft/snapshot-auto/status/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read status of automated raft snapshots
     */
    async systemReadStorageRaftSnapshotAutoStatusName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemReadStorageRaftSnapshotAutoStatusNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Read recovery snapshot
     */
    async systemReadStorageRaftSnapshotLoadIdRaw(requestParameters: SystemApiSystemReadStorageRaftSnapshotLoadIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadStorageRaftSnapshotLoadIdResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling systemReadStorageRaftSnapshotLoadId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/storage/raft/snapshot-load/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadStorageRaftSnapshotLoadIdResponseFromJSON(jsonValue));
    }

    /**
     * Read recovery snapshot
     */
    async systemReadStorageRaftSnapshotLoadId(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadStorageRaftSnapshotLoadIdResponse> {
        const response = await this.systemReadStorageRaftSnapshotLoadIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadSyncAssociationsDestinationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadSyncAssociationsDestinationsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/associations/destinations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadSyncAssociationsDestinationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemReadSyncAssociationsDestinations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadSyncAssociationsDestinationsResponse> {
        const response = await this.systemReadSyncAssociationsDestinationsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadSyncAssociationsMountSecretNameRaw(requestParameters: SystemApiSystemReadSyncAssociationsMountSecretNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadSyncAssociationsMountSecretNameResponse>> {
        if (requestParameters['mount'] == null) {
            throw new runtime.RequiredError(
                'mount',
                'Required parameter "mount" was null or undefined when calling systemReadSyncAssociationsMountSecretName().'
            );
        }

        if (requestParameters['secret_name'] == null) {
            throw new runtime.RequiredError(
                'secret_name',
                'Required parameter "secret_name" was null or undefined when calling systemReadSyncAssociationsMountSecretName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/associations/{mount}/{secret_name}`.replace(`{${"mount"}}`, encodeURIComponent(String(requestParameters['mount']))).replace(`{${"secret_name"}}`, encodeURIComponent(String(requestParameters['secret_name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadSyncAssociationsMountSecretNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemReadSyncAssociationsMountSecretName(mount: string, secret_name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadSyncAssociationsMountSecretNameResponse> {
        const response = await this.systemReadSyncAssociationsMountSecretNameRaw({ mount: mount, secret_name: secret_name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadSyncConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadSyncConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadSyncConfigResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemReadSyncConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadSyncConfigResponse> {
        const response = await this.systemReadSyncConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadSyncDestinationsAwsSmNameRaw(requestParameters: SystemApiSystemReadSyncDestinationsAwsSmNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadSyncDestinationsAwsSmNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsAwsSmName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/aws-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadSyncDestinationsAwsSmNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemReadSyncDestinationsAwsSmName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadSyncDestinationsAwsSmNameResponse> {
        const response = await this.systemReadSyncDestinationsAwsSmNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadSyncDestinationsAzureKvNameRaw(requestParameters: SystemApiSystemReadSyncDestinationsAzureKvNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadSyncDestinationsAzureKvNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsAzureKvName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/azure-kv/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadSyncDestinationsAzureKvNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemReadSyncDestinationsAzureKvName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadSyncDestinationsAzureKvNameResponse> {
        const response = await this.systemReadSyncDestinationsAzureKvNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadSyncDestinationsGcpSmNameRaw(requestParameters: SystemApiSystemReadSyncDestinationsGcpSmNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadSyncDestinationsGcpSmNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsGcpSmName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/gcp-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadSyncDestinationsGcpSmNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemReadSyncDestinationsGcpSmName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadSyncDestinationsGcpSmNameResponse> {
        const response = await this.systemReadSyncDestinationsGcpSmNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadSyncDestinationsGhNameRaw(requestParameters: SystemApiSystemReadSyncDestinationsGhNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadSyncDestinationsGhNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsGhName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/gh/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadSyncDestinationsGhNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemReadSyncDestinationsGhName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadSyncDestinationsGhNameResponse> {
        const response = await this.systemReadSyncDestinationsGhNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadSyncDestinationsInMemNameRaw(requestParameters: SystemApiSystemReadSyncDestinationsInMemNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadSyncDestinationsInMemNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsInMemName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/in-mem/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadSyncDestinationsInMemNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemReadSyncDestinationsInMemName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadSyncDestinationsInMemNameResponse> {
        const response = await this.systemReadSyncDestinationsInMemNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadSyncDestinationsTypeNameAssociationsRaw(requestParameters: SystemApiSystemReadSyncDestinationsTypeNameAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadSyncDestinationsTypeNameAssociationsResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsTypeNameAssociations().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling systemReadSyncDestinationsTypeNameAssociations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/{type}/{name}/associations`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadSyncDestinationsTypeNameAssociationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemReadSyncDestinationsTypeNameAssociations(name: string, type: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadSyncDestinationsTypeNameAssociationsResponse> {
        const response = await this.systemReadSyncDestinationsTypeNameAssociationsRaw({ name: name, type: type }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadSyncDestinationsVercelProjectNameRaw(requestParameters: SystemApiSystemReadSyncDestinationsVercelProjectNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadSyncDestinationsVercelProjectNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadSyncDestinationsVercelProjectName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/destinations/vercel-project/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadSyncDestinationsVercelProjectNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemReadSyncDestinationsVercelProjectName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadSyncDestinationsVercelProjectNameResponse> {
        const response = await this.systemReadSyncDestinationsVercelProjectNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemReadSyncGithubAppsNameRaw(requestParameters: SystemApiSystemReadSyncGithubAppsNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemReadSyncGithubAppsNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemReadSyncGithubAppsName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sync/github-apps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemReadSyncGithubAppsNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemReadSyncGithubAppsName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemReadSyncGithubAppsNameResponse> {
        const response = await this.systemReadSyncGithubAppsNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Configure control group global settings.
     */
    async systemWriteConfigControlGroupRaw(requestParameters: SystemApiSystemWriteConfigControlGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteConfigControlGroupRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteConfigControlGroupRequest',
                'Required parameter "SystemWriteConfigControlGroupRequest" was null or undefined when calling systemWriteConfigControlGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/config/control-group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteConfigControlGroupRequestToJSON(requestParameters['SystemWriteConfigControlGroupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure control group global settings.
     */
    async systemWriteConfigControlGroup(SystemWriteConfigControlGroupRequest: SystemWriteConfigControlGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteConfigControlGroupRaw({ SystemWriteConfigControlGroupRequest: SystemWriteConfigControlGroupRequest }, initOverrides);
        return await response.value();
    }

    /**
     * The group_policy_application_mode must be provided, as within_namespace_hierarchy or any.
     * Updates the policy application mode for Vault.
     */
    async systemWriteConfigGroupPolicyApplicationRaw(requestParameters: SystemApiSystemWriteConfigGroupPolicyApplicationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteConfigGroupPolicyApplicationRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteConfigGroupPolicyApplicationRequest',
                'Required parameter "SystemWriteConfigGroupPolicyApplicationRequest" was null or undefined when calling systemWriteConfigGroupPolicyApplication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/config/group-policy-application`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteConfigGroupPolicyApplicationRequestToJSON(requestParameters['SystemWriteConfigGroupPolicyApplicationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The group_policy_application_mode must be provided, as within_namespace_hierarchy or any.
     * Updates the policy application mode for Vault.
     */
    async systemWriteConfigGroupPolicyApplication(SystemWriteConfigGroupPolicyApplicationRequest: SystemWriteConfigGroupPolicyApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteConfigGroupPolicyApplicationRaw({ SystemWriteConfigGroupPolicyApplicationRequest: SystemWriteConfigGroupPolicyApplicationRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Authorize a control group request
     */
    async systemWriteControlGroupAuthorizeRaw(requestParameters: SystemApiSystemWriteControlGroupAuthorizeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteControlGroupAuthorizeRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteControlGroupAuthorizeRequest',
                'Required parameter "SystemWriteControlGroupAuthorizeRequest" was null or undefined when calling systemWriteControlGroupAuthorize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/control-group/authorize`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteControlGroupAuthorizeRequestToJSON(requestParameters['SystemWriteControlGroupAuthorizeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authorize a control group request
     */
    async systemWriteControlGroupAuthorize(SystemWriteControlGroupAuthorizeRequest: SystemWriteControlGroupAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteControlGroupAuthorizeRaw({ SystemWriteControlGroupAuthorizeRequest: SystemWriteControlGroupAuthorizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Check the status of a control group request
     */
    async systemWriteControlGroupRequestRaw(requestParameters: SystemApiSystemWriteControlGroupRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteControlGroupRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteControlGroupRequestRequest',
                'Required parameter "SystemWriteControlGroupRequestRequest" was null or undefined when calling systemWriteControlGroupRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/control-group/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteControlGroupRequestRequestToJSON(requestParameters['SystemWriteControlGroupRequestRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check the status of a control group request
     */
    async systemWriteControlGroupRequest(SystemWriteControlGroupRequestRequest: SystemWriteControlGroupRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteControlGroupRequestRaw({ SystemWriteControlGroupRequestRequest: SystemWriteControlGroupRequestRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Write activity log data
     */
    async systemWriteInternalCountersActivityWriteRaw(requestParameters: SystemApiSystemWriteInternalCountersActivityWriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteInternalCountersActivityWriteRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteInternalCountersActivityWriteRequest',
                'Required parameter "SystemWriteInternalCountersActivityWriteRequest" was null or undefined when calling systemWriteInternalCountersActivityWrite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/internal/counters/activity/write`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteInternalCountersActivityWriteRequestToJSON(requestParameters['SystemWriteInternalCountersActivityWriteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Write activity log data
     */
    async systemWriteInternalCountersActivityWrite(SystemWriteInternalCountersActivityWriteRequest: SystemWriteInternalCountersActivityWriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteInternalCountersActivityWriteRaw({ SystemWriteInternalCountersActivityWriteRequest: SystemWriteInternalCountersActivityWriteRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteManagedKeysTypeNameRaw(requestParameters: SystemApiSystemWriteManagedKeysTypeNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteManagedKeysTypeName().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling systemWriteManagedKeysTypeName().'
            );
        }

        if (requestParameters['SystemWriteManagedKeysTypeNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteManagedKeysTypeNameRequest',
                'Required parameter "SystemWriteManagedKeysTypeNameRequest" was null or undefined when calling systemWriteManagedKeysTypeName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/managed-keys/{type}/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteManagedKeysTypeNameRequestToJSON(requestParameters['SystemWriteManagedKeysTypeNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteManagedKeysTypeName(name: string, type: string, SystemWriteManagedKeysTypeNameRequest: SystemWriteManagedKeysTypeNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteManagedKeysTypeNameRaw({ name: name, type: type, SystemWriteManagedKeysTypeNameRequest: SystemWriteManagedKeysTypeNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteManagedKeysTypeNameTestSignRaw(requestParameters: SystemApiSystemWriteManagedKeysTypeNameTestSignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteManagedKeysTypeNameTestSign().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling systemWriteManagedKeysTypeNameTestSign().'
            );
        }

        if (requestParameters['SystemWriteManagedKeysTypeNameTestSignRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteManagedKeysTypeNameTestSignRequest',
                'Required parameter "SystemWriteManagedKeysTypeNameTestSignRequest" was null or undefined when calling systemWriteManagedKeysTypeNameTestSign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/managed-keys/{type}/{name}/test/sign`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteManagedKeysTypeNameTestSignRequestToJSON(requestParameters['SystemWriteManagedKeysTypeNameTestSignRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteManagedKeysTypeNameTestSign(name: string, type: string, SystemWriteManagedKeysTypeNameTestSignRequest: SystemWriteManagedKeysTypeNameTestSignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteManagedKeysTypeNameTestSignRaw({ name: name, type: type, SystemWriteManagedKeysTypeNameTestSignRequest: SystemWriteManagedKeysTypeNameTestSignRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Defines or updates a Duo MFA method.
     */
    async systemWriteMfaMethodDuoNameRaw(requestParameters: SystemApiSystemWriteMfaMethodDuoNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteMfaMethodDuoName().'
            );
        }

        if (requestParameters['SystemWriteMfaMethodDuoNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteMfaMethodDuoNameRequest',
                'Required parameter "SystemWriteMfaMethodDuoNameRequest" was null or undefined when calling systemWriteMfaMethodDuoName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/mfa/method/duo/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteMfaMethodDuoNameRequestToJSON(requestParameters['SystemWriteMfaMethodDuoNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Defines or updates a Duo MFA method.
     */
    async systemWriteMfaMethodDuoName(name: string, SystemWriteMfaMethodDuoNameRequest: SystemWriteMfaMethodDuoNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteMfaMethodDuoNameRaw({ name: name, SystemWriteMfaMethodDuoNameRequest: SystemWriteMfaMethodDuoNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Defines or updates an Okta MFA method.
     */
    async systemWriteMfaMethodOktaNameRaw(requestParameters: SystemApiSystemWriteMfaMethodOktaNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteMfaMethodOktaName().'
            );
        }

        if (requestParameters['SystemWriteMfaMethodOktaNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteMfaMethodOktaNameRequest',
                'Required parameter "SystemWriteMfaMethodOktaNameRequest" was null or undefined when calling systemWriteMfaMethodOktaName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/mfa/method/okta/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteMfaMethodOktaNameRequestToJSON(requestParameters['SystemWriteMfaMethodOktaNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Defines or updates an Okta MFA method.
     */
    async systemWriteMfaMethodOktaName(name: string, SystemWriteMfaMethodOktaNameRequest: SystemWriteMfaMethodOktaNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteMfaMethodOktaNameRaw({ name: name, SystemWriteMfaMethodOktaNameRequest: SystemWriteMfaMethodOktaNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Defines or updates a PingID MFA method.
     */
    async systemWriteMfaMethodPingidNameRaw(requestParameters: SystemApiSystemWriteMfaMethodPingidNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteMfaMethodPingidName().'
            );
        }

        if (requestParameters['SystemWriteMfaMethodPingidNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteMfaMethodPingidNameRequest',
                'Required parameter "SystemWriteMfaMethodPingidNameRequest" was null or undefined when calling systemWriteMfaMethodPingidName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/mfa/method/pingid/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteMfaMethodPingidNameRequestToJSON(requestParameters['SystemWriteMfaMethodPingidNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Defines or updates a PingID MFA method.
     */
    async systemWriteMfaMethodPingidName(name: string, SystemWriteMfaMethodPingidNameRequest: SystemWriteMfaMethodPingidNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteMfaMethodPingidNameRaw({ name: name, SystemWriteMfaMethodPingidNameRequest: SystemWriteMfaMethodPingidNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Defines or updates a TOTP MFA method.
     */
    async systemWriteMfaMethodTotpNameRaw(requestParameters: SystemApiSystemWriteMfaMethodTotpNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteMfaMethodTotpName().'
            );
        }

        if (requestParameters['SystemWriteMfaMethodTotpNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteMfaMethodTotpNameRequest',
                'Required parameter "SystemWriteMfaMethodTotpNameRequest" was null or undefined when calling systemWriteMfaMethodTotpName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/mfa/method/totp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteMfaMethodTotpNameRequestToJSON(requestParameters['SystemWriteMfaMethodTotpNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Defines or updates a TOTP MFA method.
     */
    async systemWriteMfaMethodTotpName(name: string, SystemWriteMfaMethodTotpNameRequest: SystemWriteMfaMethodTotpNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteMfaMethodTotpNameRaw({ name: name, SystemWriteMfaMethodTotpNameRequest: SystemWriteMfaMethodTotpNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the TOTP secret for the given method name on the given entity.
     */
    async systemWriteMfaMethodTotpNameAdminDestroyRaw(requestParameters: SystemApiSystemWriteMfaMethodTotpNameAdminDestroyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteMfaMethodTotpNameAdminDestroy().'
            );
        }

        if (requestParameters['SystemWriteMfaMethodTotpNameAdminDestroyRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteMfaMethodTotpNameAdminDestroyRequest',
                'Required parameter "SystemWriteMfaMethodTotpNameAdminDestroyRequest" was null or undefined when calling systemWriteMfaMethodTotpNameAdminDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/mfa/method/totp/{name}/admin-destroy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteMfaMethodTotpNameAdminDestroyRequestToJSON(requestParameters['SystemWriteMfaMethodTotpNameAdminDestroyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the TOTP secret for the given method name on the given entity.
     */
    async systemWriteMfaMethodTotpNameAdminDestroy(name: string, SystemWriteMfaMethodTotpNameAdminDestroyRequest: SystemWriteMfaMethodTotpNameAdminDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteMfaMethodTotpNameAdminDestroyRaw({ name: name, SystemWriteMfaMethodTotpNameAdminDestroyRequest: SystemWriteMfaMethodTotpNameAdminDestroyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generates a TOTP secret for the given method name on the given entity.
     */
    async systemWriteMfaMethodTotpNameAdminGenerateRaw(requestParameters: SystemApiSystemWriteMfaMethodTotpNameAdminGenerateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteMfaMethodTotpNameAdminGenerate().'
            );
        }

        if (requestParameters['SystemWriteMfaMethodTotpNameAdminGenerateRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteMfaMethodTotpNameAdminGenerateRequest',
                'Required parameter "SystemWriteMfaMethodTotpNameAdminGenerateRequest" was null or undefined when calling systemWriteMfaMethodTotpNameAdminGenerate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/mfa/method/totp/{name}/admin-generate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteMfaMethodTotpNameAdminGenerateRequestToJSON(requestParameters['SystemWriteMfaMethodTotpNameAdminGenerateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generates a TOTP secret for the given method name on the given entity.
     */
    async systemWriteMfaMethodTotpNameAdminGenerate(name: string, SystemWriteMfaMethodTotpNameAdminGenerateRequest: SystemWriteMfaMethodTotpNameAdminGenerateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteMfaMethodTotpNameAdminGenerateRaw({ name: name, SystemWriteMfaMethodTotpNameAdminGenerateRequest: SystemWriteMfaMethodTotpNameAdminGenerateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Lock the API for a namespace and its descendants
     */
    async systemWriteNamespacesApiLockLockRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/namespaces/api-lock/lock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lock the API for a namespace and its descendants
     */
    async systemWriteNamespacesApiLockLock(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteNamespacesApiLockLockRaw(initOverrides);
        return await response.value();
    }

    /**
     * Lock the API for a namespace and its descendants
     */
    async systemWriteNamespacesApiLockLockPathRaw(requestParameters: SystemApiSystemWriteNamespacesApiLockLockPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling systemWriteNamespacesApiLockLockPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/namespaces/api-lock/lock/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lock the API for a namespace and its descendants
     */
    async systemWriteNamespacesApiLockLockPath(path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteNamespacesApiLockLockPathRaw({ path: path }, initOverrides);
        return await response.value();
    }

    /**
     * Unlock the API for a namespace and its descendants
     */
    async systemWriteNamespacesApiLockUnlockRaw(requestParameters: SystemApiSystemWriteNamespacesApiLockUnlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteNamespacesApiLockUnlockRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteNamespacesApiLockUnlockRequest',
                'Required parameter "SystemWriteNamespacesApiLockUnlockRequest" was null or undefined when calling systemWriteNamespacesApiLockUnlock().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/namespaces/api-lock/unlock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteNamespacesApiLockUnlockRequestToJSON(requestParameters['SystemWriteNamespacesApiLockUnlockRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unlock the API for a namespace and its descendants
     */
    async systemWriteNamespacesApiLockUnlock(SystemWriteNamespacesApiLockUnlockRequest: SystemWriteNamespacesApiLockUnlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteNamespacesApiLockUnlockRaw({ SystemWriteNamespacesApiLockUnlockRequest: SystemWriteNamespacesApiLockUnlockRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Unlock the API for a namespace and its descendants
     */
    async systemWriteNamespacesApiLockUnlockPathRaw(requestParameters: SystemApiSystemWriteNamespacesApiLockUnlockPathOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling systemWriteNamespacesApiLockUnlockPath().'
            );
        }

        if (requestParameters['SystemWriteNamespacesApiLockUnlockPathRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteNamespacesApiLockUnlockPathRequest',
                'Required parameter "SystemWriteNamespacesApiLockUnlockPathRequest" was null or undefined when calling systemWriteNamespacesApiLockUnlockPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/namespaces/api-lock/unlock/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteNamespacesApiLockUnlockPathRequestToJSON(requestParameters['SystemWriteNamespacesApiLockUnlockPathRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unlock the API for a namespace and its descendants
     */
    async systemWriteNamespacesApiLockUnlockPath(path: string, SystemWriteNamespacesApiLockUnlockPathRequest: SystemWriteNamespacesApiLockUnlockPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteNamespacesApiLockUnlockPathRaw({ path: path, SystemWriteNamespacesApiLockUnlockPathRequest: SystemWriteNamespacesApiLockUnlockPathRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteNamespacesPathRaw(requestParameters: SystemApiSystemWriteNamespacesPathOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling systemWriteNamespacesPath().'
            );
        }

        if (requestParameters['SystemWriteNamespacesPathRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteNamespacesPathRequest',
                'Required parameter "SystemWriteNamespacesPathRequest" was null or undefined when calling systemWriteNamespacesPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/namespaces/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteNamespacesPathRequestToJSON(requestParameters['SystemWriteNamespacesPathRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteNamespacesPath(path: string, SystemWriteNamespacesPathRequest: SystemWriteNamespacesPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteNamespacesPathRaw({ path: path, SystemWriteNamespacesPathRequest: SystemWriteNamespacesPathRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Read, Modify, or Delete an access control policy.
     */
    async systemWritePoliciesEgpNameRaw(requestParameters: SystemApiSystemWritePoliciesEgpNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWritePoliciesEgpName().'
            );
        }

        if (requestParameters['SystemWritePoliciesEgpNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWritePoliciesEgpNameRequest',
                'Required parameter "SystemWritePoliciesEgpNameRequest" was null or undefined when calling systemWritePoliciesEgpName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/policies/egp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWritePoliciesEgpNameRequestToJSON(requestParameters['SystemWritePoliciesEgpNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, Modify, or Delete an access control policy.
     */
    async systemWritePoliciesEgpName(name: string, SystemWritePoliciesEgpNameRequest: SystemWritePoliciesEgpNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWritePoliciesEgpNameRaw({ name: name, SystemWritePoliciesEgpNameRequest: SystemWritePoliciesEgpNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Read, Modify, or Delete an access control policy.
     */
    async systemWritePoliciesRgpNameRaw(requestParameters: SystemApiSystemWritePoliciesRgpNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWritePoliciesRgpName().'
            );
        }

        if (requestParameters['SystemWritePoliciesRgpNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWritePoliciesRgpNameRequest',
                'Required parameter "SystemWritePoliciesRgpNameRequest" was null or undefined when calling systemWritePoliciesRgpName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/policies/rgp/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWritePoliciesRgpNameRequestToJSON(requestParameters['SystemWritePoliciesRgpNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read, Modify, or Delete an access control policy.
     */
    async systemWritePoliciesRgpName(name: string, SystemWritePoliciesRgpNameRequest: SystemWritePoliciesRgpNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWritePoliciesRgpNameRaw({ name: name, SystemWritePoliciesRgpNameRequest: SystemWritePoliciesRgpNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteQuotasLeaseCountNameRaw(requestParameters: SystemApiSystemWriteQuotasLeaseCountNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteQuotasLeaseCountName().'
            );
        }

        if (requestParameters['SystemWriteQuotasLeaseCountNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteQuotasLeaseCountNameRequest',
                'Required parameter "SystemWriteQuotasLeaseCountNameRequest" was null or undefined when calling systemWriteQuotasLeaseCountName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/quotas/lease-count/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteQuotasLeaseCountNameRequestToJSON(requestParameters['SystemWriteQuotasLeaseCountNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteQuotasLeaseCountName(name: string, SystemWriteQuotasLeaseCountNameRequest: SystemWriteQuotasLeaseCountNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteQuotasLeaseCountNameRaw({ name: name, SystemWriteQuotasLeaseCountNameRequest: SystemWriteQuotasLeaseCountNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrPrimaryDemoteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/dr/primary/demote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrPrimaryDemote(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrPrimaryDemoteRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrPrimaryDisableRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/dr/primary/disable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrPrimaryDisable(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrPrimaryDisableRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrPrimaryEnableRaw(requestParameters: SystemApiSystemWriteReplicationDrPrimaryEnableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationDrPrimaryEnableRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationDrPrimaryEnableRequest',
                'Required parameter "SystemWriteReplicationDrPrimaryEnableRequest" was null or undefined when calling systemWriteReplicationDrPrimaryEnable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/dr/primary/enable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationDrPrimaryEnableRequestToJSON(requestParameters['SystemWriteReplicationDrPrimaryEnableRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrPrimaryEnable(SystemWriteReplicationDrPrimaryEnableRequest: SystemWriteReplicationDrPrimaryEnableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrPrimaryEnableRaw({ SystemWriteReplicationDrPrimaryEnableRequest: SystemWriteReplicationDrPrimaryEnableRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrPrimaryRevokeSecondaryRaw(requestParameters: SystemApiSystemWriteReplicationDrPrimaryRevokeSecondaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationDrPrimaryRevokeSecondaryRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationDrPrimaryRevokeSecondaryRequest',
                'Required parameter "SystemWriteReplicationDrPrimaryRevokeSecondaryRequest" was null or undefined when calling systemWriteReplicationDrPrimaryRevokeSecondary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/dr/primary/revoke-secondary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationDrPrimaryRevokeSecondaryRequestToJSON(requestParameters['SystemWriteReplicationDrPrimaryRevokeSecondaryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrPrimaryRevokeSecondary(SystemWriteReplicationDrPrimaryRevokeSecondaryRequest: SystemWriteReplicationDrPrimaryRevokeSecondaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrPrimaryRevokeSecondaryRaw({ SystemWriteReplicationDrPrimaryRevokeSecondaryRequest: SystemWriteReplicationDrPrimaryRevokeSecondaryRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrPrimarySecondaryTokenRaw(requestParameters: SystemApiSystemWriteReplicationDrPrimarySecondaryTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationDrPrimarySecondaryTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationDrPrimarySecondaryTokenRequest',
                'Required parameter "SystemWriteReplicationDrPrimarySecondaryTokenRequest" was null or undefined when calling systemWriteReplicationDrPrimarySecondaryToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/dr/primary/secondary-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationDrPrimarySecondaryTokenRequestToJSON(requestParameters['SystemWriteReplicationDrPrimarySecondaryTokenRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrPrimarySecondaryToken(SystemWriteReplicationDrPrimarySecondaryTokenRequest: SystemWriteReplicationDrPrimarySecondaryTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrPrimarySecondaryTokenRaw({ SystemWriteReplicationDrPrimarySecondaryTokenRequest: SystemWriteReplicationDrPrimarySecondaryTokenRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Reload the given subsystem
     */
    async systemWriteReplicationDrSecondaryConfigReloadSubsystemRaw(requestParameters: SystemApiSystemWriteReplicationDrSecondaryConfigReloadSubsystemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['subsystem'] == null) {
            throw new runtime.RequiredError(
                'subsystem',
                'Required parameter "subsystem" was null or undefined when calling systemWriteReplicationDrSecondaryConfigReloadSubsystem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/dr/secondary/config/reload/{subsystem}`.replace(`{${"subsystem"}}`, encodeURIComponent(String(requestParameters['subsystem']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reload the given subsystem
     */
    async systemWriteReplicationDrSecondaryConfigReloadSubsystem(subsystem: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrSecondaryConfigReloadSubsystemRaw({ subsystem: subsystem }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrSecondaryDisableRaw(requestParameters: SystemApiSystemWriteReplicationDrSecondaryDisableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationDrSecondaryDisableRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationDrSecondaryDisableRequest',
                'Required parameter "SystemWriteReplicationDrSecondaryDisableRequest" was null or undefined when calling systemWriteReplicationDrSecondaryDisable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/dr/secondary/disable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationDrSecondaryDisableRequestToJSON(requestParameters['SystemWriteReplicationDrSecondaryDisableRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrSecondaryDisable(SystemWriteReplicationDrSecondaryDisableRequest: SystemWriteReplicationDrSecondaryDisableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrSecondaryDisableRaw({ SystemWriteReplicationDrSecondaryDisableRequest: SystemWriteReplicationDrSecondaryDisableRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrSecondaryEnableRaw(requestParameters: SystemApiSystemWriteReplicationDrSecondaryEnableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationDrSecondaryEnableRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationDrSecondaryEnableRequest',
                'Required parameter "SystemWriteReplicationDrSecondaryEnableRequest" was null or undefined when calling systemWriteReplicationDrSecondaryEnable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/dr/secondary/enable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationDrSecondaryEnableRequestToJSON(requestParameters['SystemWriteReplicationDrSecondaryEnableRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrSecondaryEnable(SystemWriteReplicationDrSecondaryEnableRequest: SystemWriteReplicationDrSecondaryEnableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrSecondaryEnableRaw({ SystemWriteReplicationDrSecondaryEnableRequest: SystemWriteReplicationDrSecondaryEnableRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrSecondaryGeneratePublicKeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/dr/secondary/generate-public-key`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrSecondaryGeneratePublicKey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrSecondaryGeneratePublicKeyRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrSecondaryMerkleCheckRaw(requestParameters: SystemApiSystemWriteReplicationDrSecondaryMerkleCheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationDrSecondaryMerkleCheckRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationDrSecondaryMerkleCheckRequest',
                'Required parameter "SystemWriteReplicationDrSecondaryMerkleCheckRequest" was null or undefined when calling systemWriteReplicationDrSecondaryMerkleCheck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/dr/secondary/merkle-check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationDrSecondaryMerkleCheckRequestToJSON(requestParameters['SystemWriteReplicationDrSecondaryMerkleCheckRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrSecondaryMerkleCheck(SystemWriteReplicationDrSecondaryMerkleCheckRequest: SystemWriteReplicationDrSecondaryMerkleCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrSecondaryMerkleCheckRaw({ SystemWriteReplicationDrSecondaryMerkleCheckRequest: SystemWriteReplicationDrSecondaryMerkleCheckRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrSecondaryOperationTokenDeleteRaw(requestParameters: SystemApiSystemWriteReplicationDrSecondaryOperationTokenDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationDrSecondaryOperationTokenDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationDrSecondaryOperationTokenDeleteRequest',
                'Required parameter "SystemWriteReplicationDrSecondaryOperationTokenDeleteRequest" was null or undefined when calling systemWriteReplicationDrSecondaryOperationTokenDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/dr/secondary/operation-token/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationDrSecondaryOperationTokenDeleteRequestToJSON(requestParameters['SystemWriteReplicationDrSecondaryOperationTokenDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrSecondaryOperationTokenDelete(SystemWriteReplicationDrSecondaryOperationTokenDeleteRequest: SystemWriteReplicationDrSecondaryOperationTokenDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrSecondaryOperationTokenDeleteRaw({ SystemWriteReplicationDrSecondaryOperationTokenDeleteRequest: SystemWriteReplicationDrSecondaryOperationTokenDeleteRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrSecondaryPromoteRaw(requestParameters: SystemApiSystemWriteReplicationDrSecondaryPromoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationDrSecondaryPromoteRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationDrSecondaryPromoteRequest',
                'Required parameter "SystemWriteReplicationDrSecondaryPromoteRequest" was null or undefined when calling systemWriteReplicationDrSecondaryPromote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/dr/secondary/promote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationDrSecondaryPromoteRequestToJSON(requestParameters['SystemWriteReplicationDrSecondaryPromoteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrSecondaryPromote(SystemWriteReplicationDrSecondaryPromoteRequest: SystemWriteReplicationDrSecondaryPromoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrSecondaryPromoteRaw({ SystemWriteReplicationDrSecondaryPromoteRequest: SystemWriteReplicationDrSecondaryPromoteRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrSecondaryRecoverRaw(requestParameters: SystemApiSystemWriteReplicationDrSecondaryRecoverOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationDrSecondaryRecoverRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationDrSecondaryRecoverRequest',
                'Required parameter "SystemWriteReplicationDrSecondaryRecoverRequest" was null or undefined when calling systemWriteReplicationDrSecondaryRecover().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/dr/secondary/recover`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationDrSecondaryRecoverRequestToJSON(requestParameters['SystemWriteReplicationDrSecondaryRecoverRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrSecondaryRecover(SystemWriteReplicationDrSecondaryRecoverRequest: SystemWriteReplicationDrSecondaryRecoverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrSecondaryRecoverRaw({ SystemWriteReplicationDrSecondaryRecoverRequest: SystemWriteReplicationDrSecondaryRecoverRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrSecondaryReindexRaw(requestParameters: SystemApiSystemWriteReplicationDrSecondaryReindexOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationDrSecondaryReindexRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationDrSecondaryReindexRequest',
                'Required parameter "SystemWriteReplicationDrSecondaryReindexRequest" was null or undefined when calling systemWriteReplicationDrSecondaryReindex().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/dr/secondary/reindex`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationDrSecondaryReindexRequestToJSON(requestParameters['SystemWriteReplicationDrSecondaryReindexRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrSecondaryReindex(SystemWriteReplicationDrSecondaryReindexRequest: SystemWriteReplicationDrSecondaryReindexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrSecondaryReindexRaw({ SystemWriteReplicationDrSecondaryReindexRequest: SystemWriteReplicationDrSecondaryReindexRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationDrSecondaryUpdatePrimaryRaw(requestParameters: SystemApiSystemWriteReplicationDrSecondaryUpdatePrimaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationDrSecondaryUpdatePrimaryRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationDrSecondaryUpdatePrimaryRequest',
                'Required parameter "SystemWriteReplicationDrSecondaryUpdatePrimaryRequest" was null or undefined when calling systemWriteReplicationDrSecondaryUpdatePrimary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/dr/secondary/update-primary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationDrSecondaryUpdatePrimaryRequestToJSON(requestParameters['SystemWriteReplicationDrSecondaryUpdatePrimaryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationDrSecondaryUpdatePrimary(SystemWriteReplicationDrSecondaryUpdatePrimaryRequest: SystemWriteReplicationDrSecondaryUpdatePrimaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationDrSecondaryUpdatePrimaryRaw({ SystemWriteReplicationDrSecondaryUpdatePrimaryRequest: SystemWriteReplicationDrSecondaryUpdatePrimaryRequest }, initOverrides);
        return await response.value();
    }

    /**
     * force corrupting stuff
     */
    async systemWriteReplicationForceCorruptionRaw(requestParameters: SystemApiSystemWriteReplicationForceCorruptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationForceCorruptionRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationForceCorruptionRequest',
                'Required parameter "SystemWriteReplicationForceCorruptionRequest" was null or undefined when calling systemWriteReplicationForceCorruption().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/force-corruption`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationForceCorruptionRequestToJSON(requestParameters['SystemWriteReplicationForceCorruptionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * force corrupting stuff
     */
    async systemWriteReplicationForceCorruption(SystemWriteReplicationForceCorruptionRequest: SystemWriteReplicationForceCorruptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationForceCorruptionRaw({ SystemWriteReplicationForceCorruptionRequest: SystemWriteReplicationForceCorruptionRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationMerkleCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/merkle-check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationMerkleCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationMerkleCheckRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPerformancePrimaryDemoteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/performance/primary/demote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPerformancePrimaryDemote(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPerformancePrimaryDemoteRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPerformancePrimaryDisableRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/performance/primary/disable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPerformancePrimaryDisable(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPerformancePrimaryDisableRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPerformancePrimaryEnableRaw(requestParameters: SystemApiSystemWriteReplicationPerformancePrimaryEnableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationPerformancePrimaryEnableRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationPerformancePrimaryEnableRequest',
                'Required parameter "SystemWriteReplicationPerformancePrimaryEnableRequest" was null or undefined when calling systemWriteReplicationPerformancePrimaryEnable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/performance/primary/enable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationPerformancePrimaryEnableRequestToJSON(requestParameters['SystemWriteReplicationPerformancePrimaryEnableRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPerformancePrimaryEnable(SystemWriteReplicationPerformancePrimaryEnableRequest: SystemWriteReplicationPerformancePrimaryEnableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPerformancePrimaryEnableRaw({ SystemWriteReplicationPerformancePrimaryEnableRequest: SystemWriteReplicationPerformancePrimaryEnableRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPerformancePrimaryPathsFilterIdRaw(requestParameters: SystemApiSystemWriteReplicationPerformancePrimaryPathsFilterIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling systemWriteReplicationPerformancePrimaryPathsFilterId().'
            );
        }

        if (requestParameters['SystemWriteReplicationPerformancePrimaryPathsFilterIdRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationPerformancePrimaryPathsFilterIdRequest',
                'Required parameter "SystemWriteReplicationPerformancePrimaryPathsFilterIdRequest" was null or undefined when calling systemWriteReplicationPerformancePrimaryPathsFilterId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/performance/primary/paths-filter/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationPerformancePrimaryPathsFilterIdRequestToJSON(requestParameters['SystemWriteReplicationPerformancePrimaryPathsFilterIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPerformancePrimaryPathsFilterId(id: string, SystemWriteReplicationPerformancePrimaryPathsFilterIdRequest: SystemWriteReplicationPerformancePrimaryPathsFilterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPerformancePrimaryPathsFilterIdRaw({ id: id, SystemWriteReplicationPerformancePrimaryPathsFilterIdRequest: SystemWriteReplicationPerformancePrimaryPathsFilterIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPerformancePrimaryRevokeSecondaryRaw(requestParameters: SystemApiSystemWriteReplicationPerformancePrimaryRevokeSecondaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequest',
                'Required parameter "SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequest" was null or undefined when calling systemWriteReplicationPerformancePrimaryRevokeSecondary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/performance/primary/revoke-secondary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequestToJSON(requestParameters['SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPerformancePrimaryRevokeSecondary(SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequest: SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPerformancePrimaryRevokeSecondaryRaw({ SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequest: SystemWriteReplicationPerformancePrimaryRevokeSecondaryRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPerformancePrimarySecondaryTokenRaw(requestParameters: SystemApiSystemWriteReplicationPerformancePrimarySecondaryTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationPerformancePrimarySecondaryTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationPerformancePrimarySecondaryTokenRequest',
                'Required parameter "SystemWriteReplicationPerformancePrimarySecondaryTokenRequest" was null or undefined when calling systemWriteReplicationPerformancePrimarySecondaryToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/performance/primary/secondary-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationPerformancePrimarySecondaryTokenRequestToJSON(requestParameters['SystemWriteReplicationPerformancePrimarySecondaryTokenRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPerformancePrimarySecondaryToken(SystemWriteReplicationPerformancePrimarySecondaryTokenRequest: SystemWriteReplicationPerformancePrimarySecondaryTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPerformancePrimarySecondaryTokenRaw({ SystemWriteReplicationPerformancePrimarySecondaryTokenRequest: SystemWriteReplicationPerformancePrimarySecondaryTokenRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPerformanceSecondaryDisableRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/performance/secondary/disable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPerformanceSecondaryDisable(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPerformanceSecondaryDisableRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPerformanceSecondaryEnableRaw(requestParameters: SystemApiSystemWriteReplicationPerformanceSecondaryEnableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationPerformanceSecondaryEnableRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationPerformanceSecondaryEnableRequest',
                'Required parameter "SystemWriteReplicationPerformanceSecondaryEnableRequest" was null or undefined when calling systemWriteReplicationPerformanceSecondaryEnable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/performance/secondary/enable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationPerformanceSecondaryEnableRequestToJSON(requestParameters['SystemWriteReplicationPerformanceSecondaryEnableRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPerformanceSecondaryEnable(SystemWriteReplicationPerformanceSecondaryEnableRequest: SystemWriteReplicationPerformanceSecondaryEnableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPerformanceSecondaryEnableRaw({ SystemWriteReplicationPerformanceSecondaryEnableRequest: SystemWriteReplicationPerformanceSecondaryEnableRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPerformanceSecondaryGeneratePublicKeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/performance/secondary/generate-public-key`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPerformanceSecondaryGeneratePublicKey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPerformanceSecondaryGeneratePublicKeyRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPerformanceSecondaryPromoteRaw(requestParameters: SystemApiSystemWriteReplicationPerformanceSecondaryPromoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationPerformanceSecondaryPromoteRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationPerformanceSecondaryPromoteRequest',
                'Required parameter "SystemWriteReplicationPerformanceSecondaryPromoteRequest" was null or undefined when calling systemWriteReplicationPerformanceSecondaryPromote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/performance/secondary/promote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationPerformanceSecondaryPromoteRequestToJSON(requestParameters['SystemWriteReplicationPerformanceSecondaryPromoteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPerformanceSecondaryPromote(SystemWriteReplicationPerformanceSecondaryPromoteRequest: SystemWriteReplicationPerformanceSecondaryPromoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPerformanceSecondaryPromoteRaw({ SystemWriteReplicationPerformanceSecondaryPromoteRequest: SystemWriteReplicationPerformanceSecondaryPromoteRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPerformanceSecondaryUpdatePrimaryRaw(requestParameters: SystemApiSystemWriteReplicationPerformanceSecondaryUpdatePrimaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest',
                'Required parameter "SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest" was null or undefined when calling systemWriteReplicationPerformanceSecondaryUpdatePrimary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/performance/secondary/update-primary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequestToJSON(requestParameters['SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPerformanceSecondaryUpdatePrimary(SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest: SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPerformanceSecondaryUpdatePrimaryRaw({ SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest: SystemWriteReplicationPerformanceSecondaryUpdatePrimaryRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPrimaryDemoteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/primary/demote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPrimaryDemote(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPrimaryDemoteRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPrimaryDisableRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/primary/disable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPrimaryDisable(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPrimaryDisableRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPrimaryEnableRaw(requestParameters: SystemApiSystemWriteReplicationPrimaryEnableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationPrimaryEnableRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationPrimaryEnableRequest',
                'Required parameter "SystemWriteReplicationPrimaryEnableRequest" was null or undefined when calling systemWriteReplicationPrimaryEnable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/primary/enable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationPrimaryEnableRequestToJSON(requestParameters['SystemWriteReplicationPrimaryEnableRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPrimaryEnable(SystemWriteReplicationPrimaryEnableRequest: SystemWriteReplicationPrimaryEnableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPrimaryEnableRaw({ SystemWriteReplicationPrimaryEnableRequest: SystemWriteReplicationPrimaryEnableRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPrimaryRevokeSecondaryRaw(requestParameters: SystemApiSystemWriteReplicationPrimaryRevokeSecondaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationPrimaryRevokeSecondaryRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationPrimaryRevokeSecondaryRequest',
                'Required parameter "SystemWriteReplicationPrimaryRevokeSecondaryRequest" was null or undefined when calling systemWriteReplicationPrimaryRevokeSecondary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/primary/revoke-secondary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationPrimaryRevokeSecondaryRequestToJSON(requestParameters['SystemWriteReplicationPrimaryRevokeSecondaryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPrimaryRevokeSecondary(SystemWriteReplicationPrimaryRevokeSecondaryRequest: SystemWriteReplicationPrimaryRevokeSecondaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPrimaryRevokeSecondaryRaw({ SystemWriteReplicationPrimaryRevokeSecondaryRequest: SystemWriteReplicationPrimaryRevokeSecondaryRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationPrimarySecondaryTokenRaw(requestParameters: SystemApiSystemWriteReplicationPrimarySecondaryTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationPrimarySecondaryTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationPrimarySecondaryTokenRequest',
                'Required parameter "SystemWriteReplicationPrimarySecondaryTokenRequest" was null or undefined when calling systemWriteReplicationPrimarySecondaryToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/primary/secondary-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationPrimarySecondaryTokenRequestToJSON(requestParameters['SystemWriteReplicationPrimarySecondaryTokenRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationPrimarySecondaryToken(SystemWriteReplicationPrimarySecondaryTokenRequest: SystemWriteReplicationPrimarySecondaryTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationPrimarySecondaryTokenRaw({ SystemWriteReplicationPrimarySecondaryTokenRequest: SystemWriteReplicationPrimarySecondaryTokenRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationRecoverRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/recover`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationRecover(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationRecoverRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationReindexRaw(requestParameters: SystemApiSystemWriteReplicationReindexOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationReindexRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationReindexRequest',
                'Required parameter "SystemWriteReplicationReindexRequest" was null or undefined when calling systemWriteReplicationReindex().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/reindex`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationReindexRequestToJSON(requestParameters['SystemWriteReplicationReindexRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationReindex(SystemWriteReplicationReindexRequest: SystemWriteReplicationReindexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationReindexRaw({ SystemWriteReplicationReindexRequest: SystemWriteReplicationReindexRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationSecondaryDisableRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/replication/secondary/disable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationSecondaryDisable(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationSecondaryDisableRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationSecondaryEnableRaw(requestParameters: SystemApiSystemWriteReplicationSecondaryEnableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationSecondaryEnableRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationSecondaryEnableRequest',
                'Required parameter "SystemWriteReplicationSecondaryEnableRequest" was null or undefined when calling systemWriteReplicationSecondaryEnable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/secondary/enable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationSecondaryEnableRequestToJSON(requestParameters['SystemWriteReplicationSecondaryEnableRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationSecondaryEnable(SystemWriteReplicationSecondaryEnableRequest: SystemWriteReplicationSecondaryEnableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationSecondaryEnableRaw({ SystemWriteReplicationSecondaryEnableRequest: SystemWriteReplicationSecondaryEnableRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationSecondaryPromoteRaw(requestParameters: SystemApiSystemWriteReplicationSecondaryPromoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationSecondaryPromoteRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationSecondaryPromoteRequest',
                'Required parameter "SystemWriteReplicationSecondaryPromoteRequest" was null or undefined when calling systemWriteReplicationSecondaryPromote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/secondary/promote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationSecondaryPromoteRequestToJSON(requestParameters['SystemWriteReplicationSecondaryPromoteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationSecondaryPromote(SystemWriteReplicationSecondaryPromoteRequest: SystemWriteReplicationSecondaryPromoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationSecondaryPromoteRaw({ SystemWriteReplicationSecondaryPromoteRequest: SystemWriteReplicationSecondaryPromoteRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteReplicationSecondaryUpdatePrimaryRaw(requestParameters: SystemApiSystemWriteReplicationSecondaryUpdatePrimaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['SystemWriteReplicationSecondaryUpdatePrimaryRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteReplicationSecondaryUpdatePrimaryRequest',
                'Required parameter "SystemWriteReplicationSecondaryUpdatePrimaryRequest" was null or undefined when calling systemWriteReplicationSecondaryUpdatePrimary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/replication/secondary/update-primary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteReplicationSecondaryUpdatePrimaryRequestToJSON(requestParameters['SystemWriteReplicationSecondaryUpdatePrimaryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteReplicationSecondaryUpdatePrimary(SystemWriteReplicationSecondaryUpdatePrimaryRequest: SystemWriteReplicationSecondaryUpdatePrimaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteReplicationSecondaryUpdatePrimaryRaw({ SystemWriteReplicationSecondaryUpdatePrimaryRequest: SystemWriteReplicationSecondaryUpdatePrimaryRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Start a seal rewrap process
     */
    async systemWriteSealwrapRewrapRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/sealwrap/rewrap`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Start a seal rewrap process
     */
    async systemWriteSealwrapRewrap(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteSealwrapRewrapRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update automated raft snapshot configuration
     */
    async systemWriteStorageRaftSnapshotAutoConfigNameRaw(requestParameters: SystemApiSystemWriteStorageRaftSnapshotAutoConfigNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteStorageRaftSnapshotAutoConfigName().'
            );
        }

        if (requestParameters['SystemWriteStorageRaftSnapshotAutoConfigNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteStorageRaftSnapshotAutoConfigNameRequest',
                'Required parameter "SystemWriteStorageRaftSnapshotAutoConfigNameRequest" was null or undefined when calling systemWriteStorageRaftSnapshotAutoConfigName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/storage/raft/snapshot-auto/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteStorageRaftSnapshotAutoConfigNameRequestToJSON(requestParameters['SystemWriteStorageRaftSnapshotAutoConfigNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update automated raft snapshot configuration
     */
    async systemWriteStorageRaftSnapshotAutoConfigName(name: string, SystemWriteStorageRaftSnapshotAutoConfigNameRequest: SystemWriteStorageRaftSnapshotAutoConfigNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteStorageRaftSnapshotAutoConfigNameRaw({ name: name, SystemWriteStorageRaftSnapshotAutoConfigNameRequest: SystemWriteStorageRaftSnapshotAutoConfigNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteStorageRaftSnapshotAutoSnapshotLoadNameRaw(requestParameters: SystemApiSystemWriteStorageRaftSnapshotAutoSnapshotLoadNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteStorageRaftSnapshotAutoSnapshotLoadName().'
            );
        }

        if (requestParameters['SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequest',
                'Required parameter "SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequest" was null or undefined when calling systemWriteStorageRaftSnapshotAutoSnapshotLoadName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/storage/raft/snapshot-auto/snapshot-load/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequestToJSON(requestParameters['SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async systemWriteStorageRaftSnapshotAutoSnapshotLoadName(name: string, SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequest: SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.systemWriteStorageRaftSnapshotAutoSnapshotLoadNameRaw({ name: name, SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequest: SystemWriteStorageRaftSnapshotAutoSnapshotLoadNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Load recovery snapshot
     */
    async systemWriteStorageRaftSnapshotLoadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemWriteStorageRaftSnapshotLoadResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/storage/raft/snapshot-load`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemWriteStorageRaftSnapshotLoadResponseFromJSON(jsonValue));
    }

    /**
     * Load recovery snapshot
     */
    async systemWriteStorageRaftSnapshotLoad(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemWriteStorageRaftSnapshotLoadResponse> {
        const response = await this.systemWriteStorageRaftSnapshotLoadRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteSyncDestinationsAwsSmNameRaw(requestParameters: SystemApiSystemWriteSyncDestinationsAwsSmNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemWriteSyncDestinationsAwsSmNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsAwsSmName().'
            );
        }

        if (requestParameters['SystemWriteSyncDestinationsAwsSmNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteSyncDestinationsAwsSmNameRequest',
                'Required parameter "SystemWriteSyncDestinationsAwsSmNameRequest" was null or undefined when calling systemWriteSyncDestinationsAwsSmName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/aws-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteSyncDestinationsAwsSmNameRequestToJSON(requestParameters['SystemWriteSyncDestinationsAwsSmNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemWriteSyncDestinationsAwsSmNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemWriteSyncDestinationsAwsSmName(name: string, SystemWriteSyncDestinationsAwsSmNameRequest: SystemWriteSyncDestinationsAwsSmNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemWriteSyncDestinationsAwsSmNameResponse> {
        const response = await this.systemWriteSyncDestinationsAwsSmNameRaw({ name: name, SystemWriteSyncDestinationsAwsSmNameRequest: SystemWriteSyncDestinationsAwsSmNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteSyncDestinationsAzureKvNameRaw(requestParameters: SystemApiSystemWriteSyncDestinationsAzureKvNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemWriteSyncDestinationsAzureKvNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsAzureKvName().'
            );
        }

        if (requestParameters['SystemWriteSyncDestinationsAzureKvNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteSyncDestinationsAzureKvNameRequest',
                'Required parameter "SystemWriteSyncDestinationsAzureKvNameRequest" was null or undefined when calling systemWriteSyncDestinationsAzureKvName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/azure-kv/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteSyncDestinationsAzureKvNameRequestToJSON(requestParameters['SystemWriteSyncDestinationsAzureKvNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemWriteSyncDestinationsAzureKvNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemWriteSyncDestinationsAzureKvName(name: string, SystemWriteSyncDestinationsAzureKvNameRequest: SystemWriteSyncDestinationsAzureKvNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemWriteSyncDestinationsAzureKvNameResponse> {
        const response = await this.systemWriteSyncDestinationsAzureKvNameRaw({ name: name, SystemWriteSyncDestinationsAzureKvNameRequest: SystemWriteSyncDestinationsAzureKvNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteSyncDestinationsGcpSmNameRaw(requestParameters: SystemApiSystemWriteSyncDestinationsGcpSmNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemWriteSyncDestinationsGcpSmNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsGcpSmName().'
            );
        }

        if (requestParameters['SystemWriteSyncDestinationsGcpSmNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteSyncDestinationsGcpSmNameRequest',
                'Required parameter "SystemWriteSyncDestinationsGcpSmNameRequest" was null or undefined when calling systemWriteSyncDestinationsGcpSmName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/gcp-sm/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteSyncDestinationsGcpSmNameRequestToJSON(requestParameters['SystemWriteSyncDestinationsGcpSmNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemWriteSyncDestinationsGcpSmNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemWriteSyncDestinationsGcpSmName(name: string, SystemWriteSyncDestinationsGcpSmNameRequest: SystemWriteSyncDestinationsGcpSmNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemWriteSyncDestinationsGcpSmNameResponse> {
        const response = await this.systemWriteSyncDestinationsGcpSmNameRaw({ name: name, SystemWriteSyncDestinationsGcpSmNameRequest: SystemWriteSyncDestinationsGcpSmNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteSyncDestinationsGhNameRaw(requestParameters: SystemApiSystemWriteSyncDestinationsGhNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemWriteSyncDestinationsGhNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsGhName().'
            );
        }

        if (requestParameters['SystemWriteSyncDestinationsGhNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteSyncDestinationsGhNameRequest',
                'Required parameter "SystemWriteSyncDestinationsGhNameRequest" was null or undefined when calling systemWriteSyncDestinationsGhName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/gh/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteSyncDestinationsGhNameRequestToJSON(requestParameters['SystemWriteSyncDestinationsGhNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemWriteSyncDestinationsGhNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemWriteSyncDestinationsGhName(name: string, SystemWriteSyncDestinationsGhNameRequest: SystemWriteSyncDestinationsGhNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemWriteSyncDestinationsGhNameResponse> {
        const response = await this.systemWriteSyncDestinationsGhNameRaw({ name: name, SystemWriteSyncDestinationsGhNameRequest: SystemWriteSyncDestinationsGhNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteSyncDestinationsInMemNameRaw(requestParameters: SystemApiSystemWriteSyncDestinationsInMemNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemWriteSyncDestinationsInMemNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsInMemName().'
            );
        }

        if (requestParameters['SystemWriteSyncDestinationsInMemNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteSyncDestinationsInMemNameRequest',
                'Required parameter "SystemWriteSyncDestinationsInMemNameRequest" was null or undefined when calling systemWriteSyncDestinationsInMemName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/in-mem/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteSyncDestinationsInMemNameRequestToJSON(requestParameters['SystemWriteSyncDestinationsInMemNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemWriteSyncDestinationsInMemNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemWriteSyncDestinationsInMemName(name: string, SystemWriteSyncDestinationsInMemNameRequest: SystemWriteSyncDestinationsInMemNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemWriteSyncDestinationsInMemNameResponse> {
        const response = await this.systemWriteSyncDestinationsInMemNameRaw({ name: name, SystemWriteSyncDestinationsInMemNameRequest: SystemWriteSyncDestinationsInMemNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteSyncDestinationsTypeNameAssociationsRemoveRaw(requestParameters: SystemApiSystemWriteSyncDestinationsTypeNameAssociationsRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemWriteSyncDestinationsTypeNameAssociationsRemoveResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsTypeNameAssociationsRemove().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling systemWriteSyncDestinationsTypeNameAssociationsRemove().'
            );
        }

        if (requestParameters['SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequest',
                'Required parameter "SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequest" was null or undefined when calling systemWriteSyncDestinationsTypeNameAssociationsRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/{type}/{name}/associations/remove`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequestToJSON(requestParameters['SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemWriteSyncDestinationsTypeNameAssociationsRemoveResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemWriteSyncDestinationsTypeNameAssociationsRemove(name: string, type: string, SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequest: SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemWriteSyncDestinationsTypeNameAssociationsRemoveResponse> {
        const response = await this.systemWriteSyncDestinationsTypeNameAssociationsRemoveRaw({ name: name, type: type, SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequest: SystemWriteSyncDestinationsTypeNameAssociationsRemoveRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteSyncDestinationsTypeNameAssociationsSetRaw(requestParameters: SystemApiSystemWriteSyncDestinationsTypeNameAssociationsSetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemWriteSyncDestinationsTypeNameAssociationsSetResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsTypeNameAssociationsSet().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling systemWriteSyncDestinationsTypeNameAssociationsSet().'
            );
        }

        if (requestParameters['SystemWriteSyncDestinationsTypeNameAssociationsSetRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteSyncDestinationsTypeNameAssociationsSetRequest',
                'Required parameter "SystemWriteSyncDestinationsTypeNameAssociationsSetRequest" was null or undefined when calling systemWriteSyncDestinationsTypeNameAssociationsSet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/{type}/{name}/associations/set`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteSyncDestinationsTypeNameAssociationsSetRequestToJSON(requestParameters['SystemWriteSyncDestinationsTypeNameAssociationsSetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemWriteSyncDestinationsTypeNameAssociationsSetResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemWriteSyncDestinationsTypeNameAssociationsSet(name: string, type: string, SystemWriteSyncDestinationsTypeNameAssociationsSetRequest: SystemWriteSyncDestinationsTypeNameAssociationsSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemWriteSyncDestinationsTypeNameAssociationsSetResponse> {
        const response = await this.systemWriteSyncDestinationsTypeNameAssociationsSetRaw({ name: name, type: type, SystemWriteSyncDestinationsTypeNameAssociationsSetRequest: SystemWriteSyncDestinationsTypeNameAssociationsSetRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteSyncDestinationsVercelProjectNameRaw(requestParameters: SystemApiSystemWriteSyncDestinationsVercelProjectNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemWriteSyncDestinationsVercelProjectNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteSyncDestinationsVercelProjectName().'
            );
        }

        if (requestParameters['SystemWriteSyncDestinationsVercelProjectNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteSyncDestinationsVercelProjectNameRequest',
                'Required parameter "SystemWriteSyncDestinationsVercelProjectNameRequest" was null or undefined when calling systemWriteSyncDestinationsVercelProjectName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/destinations/vercel-project/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteSyncDestinationsVercelProjectNameRequestToJSON(requestParameters['SystemWriteSyncDestinationsVercelProjectNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemWriteSyncDestinationsVercelProjectNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemWriteSyncDestinationsVercelProjectName(name: string, SystemWriteSyncDestinationsVercelProjectNameRequest: SystemWriteSyncDestinationsVercelProjectNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemWriteSyncDestinationsVercelProjectNameResponse> {
        const response = await this.systemWriteSyncDestinationsVercelProjectNameRaw({ name: name, SystemWriteSyncDestinationsVercelProjectNameRequest: SystemWriteSyncDestinationsVercelProjectNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemWriteSyncGithubAppsNameRaw(requestParameters: SystemApiSystemWriteSyncGithubAppsNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemWriteSyncGithubAppsNameResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling systemWriteSyncGithubAppsName().'
            );
        }

        if (requestParameters['SystemWriteSyncGithubAppsNameRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteSyncGithubAppsNameRequest',
                'Required parameter "SystemWriteSyncGithubAppsNameRequest" was null or undefined when calling systemWriteSyncGithubAppsName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/sync/github-apps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteSyncGithubAppsNameRequestToJSON(requestParameters['SystemWriteSyncGithubAppsNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemWriteSyncGithubAppsNameResponseFromJSON(jsonValue));
    }

    /**
     */
    async systemWriteSyncGithubAppsName(name: string, SystemWriteSyncGithubAppsNameRequest: SystemWriteSyncGithubAppsNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemWriteSyncGithubAppsNameResponse> {
        const response = await this.systemWriteSyncGithubAppsNameRaw({ name: name, SystemWriteSyncGithubAppsNameRequest: SystemWriteSyncGithubAppsNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Gets manual license reporting data
     * returns manual license reporting report data
     */
    async systemWriteUtilizationRaw(requestParameters: SystemApiSystemWriteUtilizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemWriteUtilizationResponse>> {
        if (requestParameters['SystemWriteUtilizationRequest'] == null) {
            throw new runtime.RequiredError(
                'SystemWriteUtilizationRequest',
                'Required parameter "SystemWriteUtilizationRequest" was null or undefined when calling systemWriteUtilization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/utilization`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemWriteUtilizationRequestToJSON(requestParameters['SystemWriteUtilizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemWriteUtilizationResponseFromJSON(jsonValue));
    }

    /**
     * Gets manual license reporting data
     * returns manual license reporting report data
     */
    async systemWriteUtilization(SystemWriteUtilizationRequest: SystemWriteUtilizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemWriteUtilizationResponse> {
        const response = await this.systemWriteUtilizationRaw({ SystemWriteUtilizationRequest: SystemWriteUtilizationRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete custom message
     */
    async uiConfigDeleteCustomMessageRaw(requestParameters: SystemApiUiConfigDeleteCustomMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling uiConfigDeleteCustomMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/ui/custom-messages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete custom message
     */
    async uiConfigDeleteCustomMessage(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.uiConfigDeleteCustomMessageRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Lists custom messages
     */
    async uiConfigListCustomMessagesRaw(requestParameters: SystemApiUiConfigListCustomMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiConfigListCustomMessagesResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling uiConfigListCustomMessages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['authenticated'] != null) {
            queryParameters['authenticated'] = requestParameters['authenticated'];
        }

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/ui/custom-messages/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiConfigListCustomMessagesResponseFromJSON(jsonValue));
    }

    /**
     * Lists custom messages
     */
    async uiConfigListCustomMessages(list: UiConfigListCustomMessagesListEnum, active?: boolean, authenticated?: boolean, type?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiConfigListCustomMessagesResponse> {
        const response = await this.uiConfigListCustomMessagesRaw({ list: list, active: active, authenticated: authenticated, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Read custom message
     */
    async uiConfigReadCustomMessageRaw(requestParameters: SystemApiUiConfigReadCustomMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiConfigReadCustomMessageResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling uiConfigReadCustomMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/ui/custom-messages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiConfigReadCustomMessageResponseFromJSON(jsonValue));
    }

    /**
     * Read custom message
     */
    async uiConfigReadCustomMessage(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiConfigReadCustomMessageResponse> {
        const response = await this.uiConfigReadCustomMessageRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Update custom message
     */
    async uiConfigUpdateCustomMessageRaw(requestParameters: SystemApiUiConfigUpdateCustomMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiConfigUpdateCustomMessageResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling uiConfigUpdateCustomMessage().'
            );
        }

        if (requestParameters['UiConfigUpdateCustomMessageRequest'] == null) {
            throw new runtime.RequiredError(
                'UiConfigUpdateCustomMessageRequest',
                'Required parameter "UiConfigUpdateCustomMessageRequest" was null or undefined when calling uiConfigUpdateCustomMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/config/ui/custom-messages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UiConfigUpdateCustomMessageRequestToJSON(requestParameters['UiConfigUpdateCustomMessageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiConfigUpdateCustomMessageResponseFromJSON(jsonValue));
    }

    /**
     * Update custom message
     */
    async uiConfigUpdateCustomMessage(id: string, UiConfigUpdateCustomMessageRequest: UiConfigUpdateCustomMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiConfigUpdateCustomMessageResponse> {
        const response = await this.uiConfigUpdateCustomMessageRaw({ id: id, UiConfigUpdateCustomMessageRequest: UiConfigUpdateCustomMessageRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Configure the values to be returned for the UI header.
     */
    async uiHeadersConfigureRaw(requestParameters: SystemApiUiHeadersConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['header'] == null) {
            throw new runtime.RequiredError(
                'header',
                'Required parameter "header" was null or undefined when calling uiHeadersConfigure().'
            );
        }

        if (requestParameters['UiHeadersConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'UiHeadersConfigureRequest',
                'Required parameter "UiHeadersConfigureRequest" was null or undefined when calling uiHeadersConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/config/ui/headers/{header}`.replace(`{${"header"}}`, encodeURIComponent(String(requestParameters['header']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UiHeadersConfigureRequestToJSON(requestParameters['UiHeadersConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure the values to be returned for the UI header.
     */
    async uiHeadersConfigure(header: string, UiHeadersConfigureRequest: UiHeadersConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.uiHeadersConfigureRaw({ header: header, UiHeadersConfigureRequest: UiHeadersConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Remove a UI header.
     */
    async uiHeadersDeleteConfigurationRaw(requestParameters: SystemApiUiHeadersDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['header'] == null) {
            throw new runtime.RequiredError(
                'header',
                'Required parameter "header" was null or undefined when calling uiHeadersDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/ui/headers/{header}`.replace(`{${"header"}}`, encodeURIComponent(String(requestParameters['header']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a UI header.
     */
    async uiHeadersDeleteConfiguration(header: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.uiHeadersDeleteConfigurationRaw({ header: header }, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of configured UI headers.
     */
    async uiHeadersListRaw(requestParameters: SystemApiUiHeadersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiHeadersListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling uiHeadersList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/ui/headers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiHeadersListResponseFromJSON(jsonValue));
    }

    /**
     * Return a list of configured UI headers.
     */
    async uiHeadersList(list: UiHeadersListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiHeadersListResponse> {
        const response = await this.uiHeadersListRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     * Return the given UI header\'s configuration
     */
    async uiHeadersReadConfigurationRaw(requestParameters: SystemApiUiHeadersReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiHeadersReadConfigurationResponse>> {
        if (requestParameters['header'] == null) {
            throw new runtime.RequiredError(
                'header',
                'Required parameter "header" was null or undefined when calling uiHeadersReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/ui/headers/{header}`.replace(`{${"header"}}`, encodeURIComponent(String(requestParameters['header']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiHeadersReadConfigurationResponseFromJSON(jsonValue));
    }

    /**
     * Return the given UI header\'s configuration
     */
    async uiHeadersReadConfiguration(header: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiHeadersReadConfigurationResponse> {
        const response = await this.uiHeadersReadConfigurationRaw({ header: header }, initOverrides);
        return await response.value();
    }

    /**
     * Configure Default Auth method for UI Login.
     */
    async uiLoginDefaultAuthConfigureRaw(requestParameters: SystemApiUiLoginDefaultAuthConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling uiLoginDefaultAuthConfigure().'
            );
        }

        if (requestParameters['UiLoginDefaultAuthConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'UiLoginDefaultAuthConfigureRequest',
                'Required parameter "UiLoginDefaultAuthConfigureRequest" was null or undefined when calling uiLoginDefaultAuthConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/config/ui/login/default-auth/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UiLoginDefaultAuthConfigureRequestToJSON(requestParameters['UiLoginDefaultAuthConfigureRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configure Default Auth method for UI Login.
     */
    async uiLoginDefaultAuthConfigure(name: string, UiLoginDefaultAuthConfigureRequest: UiLoginDefaultAuthConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.uiLoginDefaultAuthConfigureRaw({ name: name, UiLoginDefaultAuthConfigureRequest: UiLoginDefaultAuthConfigureRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Remove Default Auth config for UI Login.
     */
    async uiLoginDefaultAuthDeleteConfigurationRaw(requestParameters: SystemApiUiLoginDefaultAuthDeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling uiLoginDefaultAuthDeleteConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/ui/login/default-auth/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove Default Auth config for UI Login.
     */
    async uiLoginDefaultAuthDeleteConfiguration(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.uiLoginDefaultAuthDeleteConfigurationRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of configured default auth methods for the UI.
     */
    async uiLoginDefaultAuthListRaw(requestParameters: SystemApiUiLoginDefaultAuthListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiLoginDefaultAuthListResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling uiLoginDefaultAuthList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/ui/login/default-auth/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiLoginDefaultAuthListResponseFromJSON(jsonValue));
    }

    /**
     * Return a list of configured default auth methods for the UI.
     */
    async uiLoginDefaultAuthList(list: UiLoginDefaultAuthListListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiLoginDefaultAuthListResponse> {
        const response = await this.uiLoginDefaultAuthListRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async uiLoginDefaultAuthMethodsReadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/internal/ui/default-auth-methods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async uiLoginDefaultAuthMethodsRead(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.uiLoginDefaultAuthMethodsReadRaw(initOverrides);
        return await response.value();
    }

    /**
     * Return the given Default Auth configuration
     */
    async uiLoginDefaultAuthReadConfigurationRaw(requestParameters: SystemApiUiLoginDefaultAuthReadConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling uiLoginDefaultAuthReadConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/config/ui/login/default-auth/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Return the given Default Auth configuration
     */
    async uiLoginDefaultAuthReadConfiguration(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.uiLoginDefaultAuthReadConfigurationRaw({ name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Unseal the Vault.
     */
    async unsealRaw(requestParameters: SystemApiUnsealOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnsealResponse>> {
        if (requestParameters['UnsealRequest'] == null) {
            throw new runtime.RequiredError(
                'UnsealRequest',
                'Required parameter "UnsealRequest" was null or undefined when calling unseal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/unseal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnsealRequestToJSON(requestParameters['UnsealRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnsealResponseFromJSON(jsonValue));
    }

    /**
     * Unseal the Vault.
     */
    async unseal(UnsealRequest: UnsealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnsealResponse> {
        const response = await this.unsealRaw({ UnsealRequest: UnsealRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async unwrapRaw(requestParameters: SystemApiUnwrapOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['UnwrapRequest'] == null) {
            throw new runtime.RequiredError(
                'UnwrapRequest',
                'Required parameter "UnwrapRequest" was null or undefined when calling unwrap().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/wrapping/unwrap`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnwrapRequestToJSON(requestParameters['UnwrapRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async unwrap(UnwrapRequest: UnwrapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.unwrapRaw({ UnwrapRequest: UnwrapRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Returns map of historical version change entries
     */
    async versionHistoryRaw(requestParameters: SystemApiVersionHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionHistoryResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling versionHistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/version-history/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionHistoryResponseFromJSON(jsonValue));
    }

    /**
     * Returns map of historical version change entries
     */
    async versionHistory(list: VersionHistoryListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionHistoryResponse> {
        const response = await this.versionHistoryRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async wellKnownListLabelsRaw(requestParameters: SystemApiWellKnownListLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WellKnownListLabelsResponse>> {
        if (requestParameters['list'] == null) {
            throw new runtime.RequiredError(
                'list',
                'Required parameter "list" was null or undefined when calling wellKnownListLabels().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['list'] != null) {
            queryParameters['list'] = requestParameters['list'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/well-known/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WellKnownListLabelsResponseFromJSON(jsonValue));
    }

    /**
     */
    async wellKnownListLabels(list: WellKnownListLabelsListEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WellKnownListLabelsResponse> {
        const response = await this.wellKnownListLabelsRaw({ list: list }, initOverrides);
        return await response.value();
    }

    /**
     */
    async wellKnownListLabels2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WellKnownListLabels2Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/well-known`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WellKnownListLabels2ResponseFromJSON(jsonValue));
    }

    /**
     */
    async wellKnownListLabels2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WellKnownListLabels2Response> {
        const response = await this.wellKnownListLabels2Raw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the associated mount information for a registered well-known label.
     */
    async wellKnownReadLabelRaw(requestParameters: SystemApiWellKnownReadLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WellKnownReadLabelResponse>> {
        if (requestParameters['label'] == null) {
            throw new runtime.RequiredError(
                'label',
                'Required parameter "label" was null or undefined when calling wellKnownReadLabel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sys/well-known/{label}`.replace(`{${"label"}}`, encodeURIComponent(String(requestParameters['label']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WellKnownReadLabelResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the associated mount information for a registered well-known label.
     */
    async wellKnownReadLabel(label: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WellKnownReadLabelResponse> {
        const response = await this.wellKnownReadLabelRaw({ label: label }, initOverrides);
        return await response.value();
    }

    /**
     */
    async wrapRaw(requestParameters: SystemApiWrapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<runtime.VoidResponse>> {
        if (requestParameters['request_body'] == null) {
            throw new runtime.RequiredError(
                'request_body',
                'Required parameter "request_body" was null or undefined when calling wrap().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sys/wrapping/wrap`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['request_body'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async wrap(request_body: { [key: string]: any; }, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.VoidResponse> {
        const response = await this.wrapRaw({ request_body: request_body }, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum LeasesLookUpListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PluginsCatalogListPluginsWithTypeListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PluginsRuntimesCatalogListPluginsRuntimes0ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PoliciesListAclPoliciesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PoliciesListAclPolicies3ListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum PoliciesListPasswordPoliciesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum RateLimitQuotasListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum RawListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SubscriptionsListEventsSubscriptionsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SystemListManagedKeysTypeListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SystemListMfaMethodListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SystemListNamespacesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SystemListPoliciesEgpListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SystemListPoliciesRgpListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SystemListQuotasLeaseCountListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SystemListStorageRaftSnapshotAutoConfigListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SystemListStorageRaftSnapshotLoadListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SystemListSyncAssociationsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SystemListSyncDestinationsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SystemListSyncDestinationsTypeListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum SystemListSyncGithubAppsListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum UiConfigListCustomMessagesListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum UiHeadersListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum UiLoginDefaultAuthListListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum VersionHistoryListEnum {
    TRUE = 'true'
}
/**
  * @export
  * @enum {string}
  */
export enum WellKnownListLabelsListEnum {
    TRUE = 'true'
}
